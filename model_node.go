/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node struct for Node
type Node struct {
	Instanceid     *string `json:"instanceid,omitempty"`
	Name           string  `json:"name"`
	Os             string  `json:"os"`
	Osversion      *string `json:"osversion,omitempty"`
	Kversion       *string `json:"kversion,omitempty"`
	Controladdress *string `json:"controladdress,omitempty"`
	Credential     *string `json:"credential,omitempty"`
	AccountID      *string `json:"accountID,omitempty"`
	Region         *string `json:"region,omitempty"`
	Zone           *string `json:"zone,omitempty"`
	// global namespace for resources in account empty if not aviliable/supported on cloud provider/node
	ResourceNamespace *string `json:"ResourceNamespace,omitempty"`
	// identifier of the physical location of the node empty if not aviliable/supported on on cloud provider/node
	PhysicalProximityGroup *string `json:"PhysicalProximityGroup,omitempty"`
	// virtual domain for the node fault domains if aviliable/supported on on cloud provider/node
	ResiliencyDomain *string `json:"ResiliencyDomain,omitempty"`
	// identifier for node in FaultDomain
	FaultDomain            *string                `json:"FaultDomain,omitempty"`
	Offlinetime            *string                `json:"offlinetime,omitempty"`
	State                  *string                `json:"state,omitempty"`
	Status                 *string                `json:"status,omitempty"`
	Progress               *int32                 `json:"progress,omitempty"`
	Connectorversion       *string                `json:"connectorversion,omitempty"`
	Label                  *string                `json:"label,omitempty"`
	Tags                   map[string]interface{} `json:"tags,omitempty"`
	Cloudprovider          *string                `json:"cloudprovider,omitempty"`
	Nodecluster            *string                `json:"nodecluster,omitempty"`
	AutoprovisionInfraUUID *string                `json:"autoprovisionInfraUUID,omitempty"`
	Instancetype           *string                `json:"instancetype,omitempty"`
}

type _Node Node

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(name string, os string) *Node {
	this := Node{}
	this.Name = name
	this.Os = os
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetInstanceid returns the Instanceid field value if set, zero value otherwise.
func (o *Node) GetInstanceid() string {
	if o == nil || IsNil(o.Instanceid) {
		var ret string
		return ret
	}
	return *o.Instanceid
}

// GetInstanceidOk returns a tuple with the Instanceid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetInstanceidOk() (*string, bool) {
	if o == nil || IsNil(o.Instanceid) {
		return nil, false
	}
	return o.Instanceid, true
}

// HasInstanceid returns a boolean if a field has been set.
func (o *Node) HasInstanceid() bool {
	if o != nil && !IsNil(o.Instanceid) {
		return true
	}

	return false
}

// SetInstanceid gets a reference to the given string and assigns it to the Instanceid field.
func (o *Node) SetInstanceid(v string) {
	o.Instanceid = &v
}

// GetName returns the Name field value
func (o *Node) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Node) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Node) SetName(v string) {
	o.Name = v
}

// GetOs returns the Os field value
func (o *Node) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *Node) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *Node) SetOs(v string) {
	o.Os = v
}

// GetOsversion returns the Osversion field value if set, zero value otherwise.
func (o *Node) GetOsversion() string {
	if o == nil || IsNil(o.Osversion) {
		var ret string
		return ret
	}
	return *o.Osversion
}

// GetOsversionOk returns a tuple with the Osversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetOsversionOk() (*string, bool) {
	if o == nil || IsNil(o.Osversion) {
		return nil, false
	}
	return o.Osversion, true
}

// HasOsversion returns a boolean if a field has been set.
func (o *Node) HasOsversion() bool {
	if o != nil && !IsNil(o.Osversion) {
		return true
	}

	return false
}

// SetOsversion gets a reference to the given string and assigns it to the Osversion field.
func (o *Node) SetOsversion(v string) {
	o.Osversion = &v
}

// GetKversion returns the Kversion field value if set, zero value otherwise.
func (o *Node) GetKversion() string {
	if o == nil || IsNil(o.Kversion) {
		var ret string
		return ret
	}
	return *o.Kversion
}

// GetKversionOk returns a tuple with the Kversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetKversionOk() (*string, bool) {
	if o == nil || IsNil(o.Kversion) {
		return nil, false
	}
	return o.Kversion, true
}

// HasKversion returns a boolean if a field has been set.
func (o *Node) HasKversion() bool {
	if o != nil && !IsNil(o.Kversion) {
		return true
	}

	return false
}

// SetKversion gets a reference to the given string and assigns it to the Kversion field.
func (o *Node) SetKversion(v string) {
	o.Kversion = &v
}

// GetControladdress returns the Controladdress field value if set, zero value otherwise.
func (o *Node) GetControladdress() string {
	if o == nil || IsNil(o.Controladdress) {
		var ret string
		return ret
	}
	return *o.Controladdress
}

// GetControladdressOk returns a tuple with the Controladdress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetControladdressOk() (*string, bool) {
	if o == nil || IsNil(o.Controladdress) {
		return nil, false
	}
	return o.Controladdress, true
}

// HasControladdress returns a boolean if a field has been set.
func (o *Node) HasControladdress() bool {
	if o != nil && !IsNil(o.Controladdress) {
		return true
	}

	return false
}

// SetControladdress gets a reference to the given string and assigns it to the Controladdress field.
func (o *Node) SetControladdress(v string) {
	o.Controladdress = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *Node) GetCredential() string {
	if o == nil || IsNil(o.Credential) {
		var ret string
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCredentialOk() (*string, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// HasCredential returns a boolean if a field has been set.
func (o *Node) HasCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given string and assigns it to the Credential field.
func (o *Node) SetCredential(v string) {
	o.Credential = &v
}

// GetAccountID returns the AccountID field value if set, zero value otherwise.
func (o *Node) GetAccountID() string {
	if o == nil || IsNil(o.AccountID) {
		var ret string
		return ret
	}
	return *o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetAccountIDOk() (*string, bool) {
	if o == nil || IsNil(o.AccountID) {
		return nil, false
	}
	return o.AccountID, true
}

// HasAccountID returns a boolean if a field has been set.
func (o *Node) HasAccountID() bool {
	if o != nil && !IsNil(o.AccountID) {
		return true
	}

	return false
}

// SetAccountID gets a reference to the given string and assigns it to the AccountID field.
func (o *Node) SetAccountID(v string) {
	o.AccountID = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Node) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Node) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Node) SetRegion(v string) {
	o.Region = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *Node) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *Node) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *Node) SetZone(v string) {
	o.Zone = &v
}

// GetResourceNamespace returns the ResourceNamespace field value if set, zero value otherwise.
func (o *Node) GetResourceNamespace() string {
	if o == nil || IsNil(o.ResourceNamespace) {
		var ret string
		return ret
	}
	return *o.ResourceNamespace
}

// GetResourceNamespaceOk returns a tuple with the ResourceNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetResourceNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceNamespace) {
		return nil, false
	}
	return o.ResourceNamespace, true
}

// HasResourceNamespace returns a boolean if a field has been set.
func (o *Node) HasResourceNamespace() bool {
	if o != nil && !IsNil(o.ResourceNamespace) {
		return true
	}

	return false
}

// SetResourceNamespace gets a reference to the given string and assigns it to the ResourceNamespace field.
func (o *Node) SetResourceNamespace(v string) {
	o.ResourceNamespace = &v
}

// GetPhysicalProximityGroup returns the PhysicalProximityGroup field value if set, zero value otherwise.
func (o *Node) GetPhysicalProximityGroup() string {
	if o == nil || IsNil(o.PhysicalProximityGroup) {
		var ret string
		return ret
	}
	return *o.PhysicalProximityGroup
}

// GetPhysicalProximityGroupOk returns a tuple with the PhysicalProximityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetPhysicalProximityGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalProximityGroup) {
		return nil, false
	}
	return o.PhysicalProximityGroup, true
}

// HasPhysicalProximityGroup returns a boolean if a field has been set.
func (o *Node) HasPhysicalProximityGroup() bool {
	if o != nil && !IsNil(o.PhysicalProximityGroup) {
		return true
	}

	return false
}

// SetPhysicalProximityGroup gets a reference to the given string and assigns it to the PhysicalProximityGroup field.
func (o *Node) SetPhysicalProximityGroup(v string) {
	o.PhysicalProximityGroup = &v
}

// GetResiliencyDomain returns the ResiliencyDomain field value if set, zero value otherwise.
func (o *Node) GetResiliencyDomain() string {
	if o == nil || IsNil(o.ResiliencyDomain) {
		var ret string
		return ret
	}
	return *o.ResiliencyDomain
}

// GetResiliencyDomainOk returns a tuple with the ResiliencyDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetResiliencyDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ResiliencyDomain) {
		return nil, false
	}
	return o.ResiliencyDomain, true
}

// HasResiliencyDomain returns a boolean if a field has been set.
func (o *Node) HasResiliencyDomain() bool {
	if o != nil && !IsNil(o.ResiliencyDomain) {
		return true
	}

	return false
}

// SetResiliencyDomain gets a reference to the given string and assigns it to the ResiliencyDomain field.
func (o *Node) SetResiliencyDomain(v string) {
	o.ResiliencyDomain = &v
}

// GetFaultDomain returns the FaultDomain field value if set, zero value otherwise.
func (o *Node) GetFaultDomain() string {
	if o == nil || IsNil(o.FaultDomain) {
		var ret string
		return ret
	}
	return *o.FaultDomain
}

// GetFaultDomainOk returns a tuple with the FaultDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetFaultDomainOk() (*string, bool) {
	if o == nil || IsNil(o.FaultDomain) {
		return nil, false
	}
	return o.FaultDomain, true
}

// HasFaultDomain returns a boolean if a field has been set.
func (o *Node) HasFaultDomain() bool {
	if o != nil && !IsNil(o.FaultDomain) {
		return true
	}

	return false
}

// SetFaultDomain gets a reference to the given string and assigns it to the FaultDomain field.
func (o *Node) SetFaultDomain(v string) {
	o.FaultDomain = &v
}

// GetOfflinetime returns the Offlinetime field value if set, zero value otherwise.
func (o *Node) GetOfflinetime() string {
	if o == nil || IsNil(o.Offlinetime) {
		var ret string
		return ret
	}
	return *o.Offlinetime
}

// GetOfflinetimeOk returns a tuple with the Offlinetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetOfflinetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Offlinetime) {
		return nil, false
	}
	return o.Offlinetime, true
}

// HasOfflinetime returns a boolean if a field has been set.
func (o *Node) HasOfflinetime() bool {
	if o != nil && !IsNil(o.Offlinetime) {
		return true
	}

	return false
}

// SetOfflinetime gets a reference to the given string and assigns it to the Offlinetime field.
func (o *Node) SetOfflinetime(v string) {
	o.Offlinetime = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Node) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Node) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Node) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Node) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Node) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Node) SetStatus(v string) {
	o.Status = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Node) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Node) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Node) SetProgress(v int32) {
	o.Progress = &v
}

// GetConnectorversion returns the Connectorversion field value if set, zero value otherwise.
func (o *Node) GetConnectorversion() string {
	if o == nil || IsNil(o.Connectorversion) {
		var ret string
		return ret
	}
	return *o.Connectorversion
}

// GetConnectorversionOk returns a tuple with the Connectorversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetConnectorversionOk() (*string, bool) {
	if o == nil || IsNil(o.Connectorversion) {
		return nil, false
	}
	return o.Connectorversion, true
}

// HasConnectorversion returns a boolean if a field has been set.
func (o *Node) HasConnectorversion() bool {
	if o != nil && !IsNil(o.Connectorversion) {
		return true
	}

	return false
}

// SetConnectorversion gets a reference to the given string and assigns it to the Connectorversion field.
func (o *Node) SetConnectorversion(v string) {
	o.Connectorversion = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Node) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Node) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Node) SetLabel(v string) {
	o.Label = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Node) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Node) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *Node) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetCloudprovider returns the Cloudprovider field value if set, zero value otherwise.
func (o *Node) GetCloudprovider() string {
	if o == nil || IsNil(o.Cloudprovider) {
		var ret string
		return ret
	}
	return *o.Cloudprovider
}

// GetCloudproviderOk returns a tuple with the Cloudprovider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCloudproviderOk() (*string, bool) {
	if o == nil || IsNil(o.Cloudprovider) {
		return nil, false
	}
	return o.Cloudprovider, true
}

// HasCloudprovider returns a boolean if a field has been set.
func (o *Node) HasCloudprovider() bool {
	if o != nil && !IsNil(o.Cloudprovider) {
		return true
	}

	return false
}

// SetCloudprovider gets a reference to the given string and assigns it to the Cloudprovider field.
func (o *Node) SetCloudprovider(v string) {
	o.Cloudprovider = &v
}

// GetNodecluster returns the Nodecluster field value if set, zero value otherwise.
func (o *Node) GetNodecluster() string {
	if o == nil || IsNil(o.Nodecluster) {
		var ret string
		return ret
	}
	return *o.Nodecluster
}

// GetNodeclusterOk returns a tuple with the Nodecluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNodeclusterOk() (*string, bool) {
	if o == nil || IsNil(o.Nodecluster) {
		return nil, false
	}
	return o.Nodecluster, true
}

// HasNodecluster returns a boolean if a field has been set.
func (o *Node) HasNodecluster() bool {
	if o != nil && !IsNil(o.Nodecluster) {
		return true
	}

	return false
}

// SetNodecluster gets a reference to the given string and assigns it to the Nodecluster field.
func (o *Node) SetNodecluster(v string) {
	o.Nodecluster = &v
}

// GetAutoprovisionInfraUUID returns the AutoprovisionInfraUUID field value if set, zero value otherwise.
func (o *Node) GetAutoprovisionInfraUUID() string {
	if o == nil || IsNil(o.AutoprovisionInfraUUID) {
		var ret string
		return ret
	}
	return *o.AutoprovisionInfraUUID
}

// GetAutoprovisionInfraUUIDOk returns a tuple with the AutoprovisionInfraUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetAutoprovisionInfraUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.AutoprovisionInfraUUID) {
		return nil, false
	}
	return o.AutoprovisionInfraUUID, true
}

// HasAutoprovisionInfraUUID returns a boolean if a field has been set.
func (o *Node) HasAutoprovisionInfraUUID() bool {
	if o != nil && !IsNil(o.AutoprovisionInfraUUID) {
		return true
	}

	return false
}

// SetAutoprovisionInfraUUID gets a reference to the given string and assigns it to the AutoprovisionInfraUUID field.
func (o *Node) SetAutoprovisionInfraUUID(v string) {
	o.AutoprovisionInfraUUID = &v
}

// GetInstancetype returns the Instancetype field value if set, zero value otherwise.
func (o *Node) GetInstancetype() string {
	if o == nil || IsNil(o.Instancetype) {
		var ret string
		return ret
	}
	return *o.Instancetype
}

// GetInstancetypeOk returns a tuple with the Instancetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetInstancetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Instancetype) {
		return nil, false
	}
	return o.Instancetype, true
}

// HasInstancetype returns a boolean if a field has been set.
func (o *Node) HasInstancetype() bool {
	if o != nil && !IsNil(o.Instancetype) {
		return true
	}

	return false
}

// SetInstancetype gets a reference to the given string and assigns it to the Instancetype field.
func (o *Node) SetInstancetype(v string) {
	o.Instancetype = &v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instanceid) {
		toSerialize["instanceid"] = o.Instanceid
	}
	toSerialize["name"] = o.Name
	toSerialize["os"] = o.Os
	if !IsNil(o.Osversion) {
		toSerialize["osversion"] = o.Osversion
	}
	if !IsNil(o.Kversion) {
		toSerialize["kversion"] = o.Kversion
	}
	if !IsNil(o.Controladdress) {
		toSerialize["controladdress"] = o.Controladdress
	}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	if !IsNil(o.AccountID) {
		toSerialize["accountID"] = o.AccountID
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	if !IsNil(o.ResourceNamespace) {
		toSerialize["ResourceNamespace"] = o.ResourceNamespace
	}
	if !IsNil(o.PhysicalProximityGroup) {
		toSerialize["PhysicalProximityGroup"] = o.PhysicalProximityGroup
	}
	if !IsNil(o.ResiliencyDomain) {
		toSerialize["ResiliencyDomain"] = o.ResiliencyDomain
	}
	if !IsNil(o.FaultDomain) {
		toSerialize["FaultDomain"] = o.FaultDomain
	}
	if !IsNil(o.Offlinetime) {
		toSerialize["offlinetime"] = o.Offlinetime
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Connectorversion) {
		toSerialize["connectorversion"] = o.Connectorversion
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Cloudprovider) {
		toSerialize["cloudprovider"] = o.Cloudprovider
	}
	if !IsNil(o.Nodecluster) {
		toSerialize["nodecluster"] = o.Nodecluster
	}
	if !IsNil(o.AutoprovisionInfraUUID) {
		toSerialize["autoprovisionInfraUUID"] = o.AutoprovisionInfraUUID
	}
	if !IsNil(o.Instancetype) {
		toSerialize["instancetype"] = o.Instancetype
	}
	return toSerialize, nil
}

func (o *Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"os",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNode := _Node{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNode)

	if err != nil {
		return err
	}

	*o = Node(varNode)

	return err
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
