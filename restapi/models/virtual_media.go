// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMedia virtual media
//
// swagger:model VirtualMedia
type VirtualMedia struct {

	// flavor
	// Enum: [stripped raid1]
	Flavor *string `json:"flavor,omitempty"`

	// media
	Media *Media `json:"media,omitempty"`

	// members
	Members []string `json:"members,omitempty"`
}

// Validate validates this virtual media
func (m *VirtualMedia) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlavor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualMediaTypeFlavorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stripped","raid1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMediaTypeFlavorPropEnum = append(virtualMediaTypeFlavorPropEnum, v)
	}
}

const (

	// VirtualMediaFlavorStripped captures enum value "stripped"
	VirtualMediaFlavorStripped string = "stripped"

	// VirtualMediaFlavorRaid1 captures enum value "raid1"
	VirtualMediaFlavorRaid1 string = "raid1"
)

// prop value enum
func (m *VirtualMedia) validateFlavorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualMediaTypeFlavorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMedia) validateFlavor(formats strfmt.Registry) error {
	if swag.IsZero(m.Flavor) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlavorEnum("flavor", "body", *m.Flavor); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMedia) validateMedia(formats strfmt.Registry) error {
	if swag.IsZero(m.Media) { // not required
		return nil
	}

	if m.Media != nil {
		if err := m.Media.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("media")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual media based on the context it is used
func (m *VirtualMedia) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMedia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMedia) contextValidateMedia(ctx context.Context, formats strfmt.Registry) error {

	if m.Media != nil {
		if err := m.Media.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("media")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMedia) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMedia) UnmarshalBinary(b []byte) error {
	var res VirtualMedia
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
