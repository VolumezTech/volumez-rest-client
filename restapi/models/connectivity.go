// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Connectivity connectivity
//
// swagger:model Connectivity
type Connectivity struct {

	// media protocol
	// Required: true
	MediaProtocol string `json:"mediaprotocol"`

	// replication bandwidth
	// Minimum: 0
	ReplicationBandwidth int64 `json:"replicationbandwidth"`

	// replication protocol
	// Required: true
	ReplicationProtocol string `json:"replicationprotocol"`

	// system types1
	// Required: true
	// Pattern: ^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$
	SystemTypes1 string `json:"systemtypes1"`

	// system types2
	// Required: true
	// Pattern: ^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$
	SystemTypes2 string `json:"systemtypes2"`

	// name
	// Required: true
	Name string `json:"name"`

	// zones1
	// Required: true
	Zones1 string `json:"zones1"`

	// zones2
	// Required: true
	Zones2 string `json:"zones2"`
}

// Validate validates this connectivity
func (m *Connectivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMediaProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationBandwidth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemTypes1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemTypes2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZones2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Connectivity) validateMediaProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("mediaprotocol", "body", m.MediaProtocol); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateReplicationBandwidth(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationBandwidth) { // not required
		return nil
	}

	if err := validate.MinimumInt("replicationbandwidth", "body", m.ReplicationBandwidth, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateReplicationProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("replicationprotocol", "body", m.ReplicationProtocol); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateSystemTypes1(formats strfmt.Registry) error {

	if err := validate.RequiredString("systemtypes1", "body", m.SystemTypes1); err != nil {
		return err
	}

	if err := validate.Pattern("systemtypes1", "body", m.SystemTypes1, `^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$`); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateSystemTypes2(formats strfmt.Registry) error {

	if err := validate.RequiredString("systemtypes2", "body", m.SystemTypes2); err != nil {
		return err
	}

	if err := validate.Pattern("systemtypes2", "body", m.SystemTypes2, `^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$`); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateZones1(formats strfmt.Registry) error {

	if err := validate.RequiredString("zones1", "body", m.Zones1); err != nil {
		return err
	}

	return nil
}

func (m *Connectivity) validateZones2(formats strfmt.Registry) error {

	if err := validate.RequiredString("zones2", "body", m.Zones2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this connectivity based on context it is used
func (m *Connectivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Connectivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Connectivity) UnmarshalBinary(b []byte) error {
	var res Connectivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
