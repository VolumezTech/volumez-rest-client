// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Controller controller
//
// swagger:model Controller
type Controller struct {

	// active node
	ActiveNode string `json:"activenode"`

	// backup node
	// Required: true
	BackupNode string `json:"backupnode"`

	// primary node
	// Required: true
	PrimaryNode string `json:"primarynode"`

	// name
	// Required: true
	Name string `json:"name"`

	// progress
	// Read Only: true
	Progress int64 `json:"progress"`

	// protocol
	// Required: true
	Protocol string `json:"protocol"`

	// state
	// Read Only: true
	State string `json:"state"`

	// status
	// Read Only: true
	Status string `json:"status"`
}

// Validate validates this controller
func (m *Controller) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Controller) validateBackupNode(formats strfmt.Registry) error {

	if err := validate.RequiredString("backupnode", "body", m.BackupNode); err != nil {
		return err
	}

	return nil
}

func (m *Controller) validatePrimaryNode(formats strfmt.Registry) error {

	if err := validate.RequiredString("primarynode", "body", m.PrimaryNode); err != nil {
		return err
	}

	return nil
}

func (m *Controller) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Controller) validateProtocol(formats strfmt.Registry) error {

	if err := validate.RequiredString("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this controller based on the context it is used
func (m *Controller) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Controller) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "progress", "body", int64(m.Progress)); err != nil {
		return err
	}

	return nil
}

func (m *Controller) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *Controller) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Controller) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Controller) UnmarshalBinary(b []byte) error {
	var res Controller
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
