// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Association association
//
// swagger:model Association
type Association struct {

	// name
	Name *string `json:"name,omitempty"`

	// Snapshot ID
	// Min Length: 1
	SnapshotID string `json:"snapshotid"`

	// Snapshot name
	// Min Length: 1
	SnapshotName string `json:"snapshotname"`

	// state
	// Read Only: true
	State string `json:"state"`

	// status
	// Read Only: true
	Status string `json:"status"`

	// Volume ID
	// Read Only: true
	// Min Length: 1
	VolumeID string `json:"volumeid"`

	// Volume name
	// Example: vol1
	VolumeName string `json:"volumename"`

	// id
	ID string `json:"id"`
}

// Validate validates this association
func (m *Association) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Association) validateSnapshotID(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotID) { // not required
		return nil
	}

	if err := validate.MinLength("snapshotid", "body", m.SnapshotID, 1); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateSnapshotName(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotName) { // not required
		return nil
	}

	if err := validate.MinLength("snapshotname", "body", m.SnapshotName, 1); err != nil {
		return err
	}

	return nil
}

func (m *Association) validateVolumeID(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeID) { // not required
		return nil
	}

	if err := validate.MinLength("volumeid", "body", m.VolumeID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this association based on the context it is used
func (m *Association) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Association) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "state", "body", string(m.State)); err != nil {
		return err
	}

	return nil
}

func (m *Association) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *Association) contextValidateVolumeID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "volumeid", "body", string(m.VolumeID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Association) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Association) UnmarshalBinary(b []byte) error {
	var res Association
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
