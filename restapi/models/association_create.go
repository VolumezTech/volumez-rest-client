// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssociationCreate association create
//
// swagger:model AssociationCreate
type AssociationCreate struct {

	// Mount point
	MountPoint *string `json:"mountpoint,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// selector
	// Min Length: 1
	Selector *string `json:"selector,omitempty"`

	// Snapshot
	// Min Length: 1
	Snapshot *string `json:"snapshot,omitempty"`

	// Volume
	Volume string `json:"volume"`
}

// Validate validates this association create
func (m *AssociationCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssociationCreate) validateSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if err := validate.MinLength("selector", "body", *m.Selector, 1); err != nil {
		return err
	}

	return nil
}

func (m *AssociationCreate) validateSnapshot(formats strfmt.Registry) error {
	if swag.IsZero(m.Snapshot) { // not required
		return nil
	}

	if err := validate.MinLength("snapshot", "body", *m.Snapshot, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this association create based on context it is used
func (m *AssociationCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssociationCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssociationCreate) UnmarshalBinary(b []byte) error {
	var res AssociationCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
