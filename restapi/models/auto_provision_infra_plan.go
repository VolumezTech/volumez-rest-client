// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutoProvisionInfraPlan auto provision infra plan
//
// swagger:model AutoProvisionInfraPlan
type AutoProvisionInfraPlan struct {

	// Number of instance to provision
	// Example: 10
	// Minimum: 1
	InstanceCount int64 `json:"instanceCount"`

	// instance type
	// Example: c6gd.2xlarge
	// Min Length: 1
	InstanceType string `json:"instanceType"`

	// os type
	// Enum: ["Linux","Rhel","Ubuntu"]
	OsType string `json:"osType"`

	// Number of instance to provision
	// Example: 10
	// Minimum: 1
	Price int64 `json:"price"`

	// subnets
	Subnets []string `json:"availabilityZones"`
}

// Validate validates this auto provision infra plan
func (m *AutoProvisionInfraPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutoProvisionInfraPlan) validateInstanceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("instanceCount", "body", m.InstanceCount, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *AutoProvisionInfraPlan) validateInstanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	if err := validate.MinLength("instanceType", "body", m.InstanceType, 1); err != nil {
		return err
	}

	return nil
}

var autoProvisionInfraPlanTypeOsTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Linux","Rhel","Ubuntu"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		autoProvisionInfraPlanTypeOsTypePropEnum = append(autoProvisionInfraPlanTypeOsTypePropEnum, v)
	}
}

const (

	// AutoProvisionInfraPlanOsTypeLinux captures enum value "Linux"
	AutoProvisionInfraPlanOsTypeLinux string = "Linux"

	// AutoProvisionInfraPlanOsTypeRhel captures enum value "Rhel"
	AutoProvisionInfraPlanOsTypeRhel string = "Rhel"

	// AutoProvisionInfraPlanOsTypeUbuntu captures enum value "Ubuntu"
	AutoProvisionInfraPlanOsTypeUbuntu string = "Ubuntu"
)

// prop value enum
func (m *AutoProvisionInfraPlan) validateOsTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, autoProvisionInfraPlanTypeOsTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AutoProvisionInfraPlan) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOsTypeEnum("osType", "body", m.OsType); err != nil {
		return err
	}

	return nil
}

func (m *AutoProvisionInfraPlan) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := validate.MinimumInt("price", "body", m.Price, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auto provision infra plan based on context it is used
func (m *AutoProvisionInfraPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AutoProvisionInfraPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutoProvisionInfraPlan) UnmarshalBinary(b []byte) error {
	var res AutoProvisionInfraPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
