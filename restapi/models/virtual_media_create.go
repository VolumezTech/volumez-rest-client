// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMediaCreate virtual media create
//
// swagger:model VirtualMediaCreate
type VirtualMediaCreate struct {

	// flavor
	// Enum: [stripped raid1 split]
	Flavor *string `json:"flavor,omitempty"`

	// selector
	// Min Length: 1
	Selector *string `json:"selector,omitempty"`
}

// Validate validates this virtual media create
func (m *VirtualMediaCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlavor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var virtualMediaCreateTypeFlavorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stripped","raid1","split"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMediaCreateTypeFlavorPropEnum = append(virtualMediaCreateTypeFlavorPropEnum, v)
	}
}

const (

	// VirtualMediaCreateFlavorStripped captures enum value "stripped"
	VirtualMediaCreateFlavorStripped string = "stripped"

	// VirtualMediaCreateFlavorRaid1 captures enum value "raid1"
	VirtualMediaCreateFlavorRaid1 string = "raid1"

	// VirtualMediaCreateFlavorSplit captures enum value "split"
	VirtualMediaCreateFlavorSplit string = "split"
)

// prop value enum
func (m *VirtualMediaCreate) validateFlavorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualMediaCreateTypeFlavorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMediaCreate) validateFlavor(formats strfmt.Registry) error {
	if swag.IsZero(m.Flavor) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlavorEnum("flavor", "body", *m.Flavor); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMediaCreate) validateSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if err := validate.MinLength("selector", "body", *m.Selector, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this virtual media create based on context it is used
func (m *VirtualMediaCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMediaCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMediaCreate) UnmarshalBinary(b []byte) error {
	var res VirtualMediaCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
