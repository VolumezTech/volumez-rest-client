/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"encoding/json"
)

// checks if the GetTenantSettingsResponseThrottleMedia type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTenantSettingsResponseThrottleMedia{}

// GetTenantSettingsResponseThrottleMedia struct for GetTenantSettingsResponseThrottleMedia
type GetTenantSettingsResponseThrottleMedia struct {
	AllowThrottleTargetSlices NullableBool `json:"allowThrottleTargetSlices,omitempty"`
}

// NewGetTenantSettingsResponseThrottleMedia instantiates a new GetTenantSettingsResponseThrottleMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTenantSettingsResponseThrottleMedia() *GetTenantSettingsResponseThrottleMedia {
	this := GetTenantSettingsResponseThrottleMedia{}
	return &this
}

// NewGetTenantSettingsResponseThrottleMediaWithDefaults instantiates a new GetTenantSettingsResponseThrottleMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTenantSettingsResponseThrottleMediaWithDefaults() *GetTenantSettingsResponseThrottleMedia {
	this := GetTenantSettingsResponseThrottleMedia{}
	return &this
}

// GetAllowThrottleTargetSlices returns the AllowThrottleTargetSlices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleMedia) GetAllowThrottleTargetSlices() bool {
	if o == nil || IsNil(o.AllowThrottleTargetSlices.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowThrottleTargetSlices.Get()
}

// GetAllowThrottleTargetSlicesOk returns a tuple with the AllowThrottleTargetSlices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleMedia) GetAllowThrottleTargetSlicesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowThrottleTargetSlices.Get(), o.AllowThrottleTargetSlices.IsSet()
}

// HasAllowThrottleTargetSlices returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleMedia) HasAllowThrottleTargetSlices() bool {
	if o != nil && o.AllowThrottleTargetSlices.IsSet() {
		return true
	}

	return false
}

// SetAllowThrottleTargetSlices gets a reference to the given NullableBool and assigns it to the AllowThrottleTargetSlices field.
func (o *GetTenantSettingsResponseThrottleMedia) SetAllowThrottleTargetSlices(v bool) {
	o.AllowThrottleTargetSlices.Set(&v)
}

// SetAllowThrottleTargetSlicesNil sets the value for AllowThrottleTargetSlices to be an explicit nil
func (o *GetTenantSettingsResponseThrottleMedia) SetAllowThrottleTargetSlicesNil() {
	o.AllowThrottleTargetSlices.Set(nil)
}

// UnsetAllowThrottleTargetSlices ensures that no value is present for AllowThrottleTargetSlices, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleMedia) UnsetAllowThrottleTargetSlices() {
	o.AllowThrottleTargetSlices.Unset()
}

func (o GetTenantSettingsResponseThrottleMedia) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTenantSettingsResponseThrottleMedia) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowThrottleTargetSlices.IsSet() {
		toSerialize["allowThrottleTargetSlices"] = o.AllowThrottleTargetSlices.Get()
	}
	return toSerialize, nil
}

type NullableGetTenantSettingsResponseThrottleMedia struct {
	value *GetTenantSettingsResponseThrottleMedia
	isSet bool
}

func (v NullableGetTenantSettingsResponseThrottleMedia) Get() *GetTenantSettingsResponseThrottleMedia {
	return v.value
}

func (v *NullableGetTenantSettingsResponseThrottleMedia) Set(val *GetTenantSettingsResponseThrottleMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTenantSettingsResponseThrottleMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTenantSettingsResponseThrottleMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTenantSettingsResponseThrottleMedia(val *GetTenantSettingsResponseThrottleMedia) *NullableGetTenantSettingsResponseThrottleMedia {
	return &NullableGetTenantSettingsResponseThrottleMedia{value: val, isSet: true}
}

func (v NullableGetTenantSettingsResponseThrottleMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTenantSettingsResponseThrottleMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
