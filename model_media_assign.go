/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"encoding/json"
)

// checks if the MediaAssign type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaAssign{}

// MediaAssign struct for MediaAssign
type MediaAssign struct {
	CapacityGroup *string `json:"capacity_group,omitempty"`
	// Profile media even if it was already profiled
	Reprofile *bool `json:"reprofile,omitempty"`
	// LBA size for media format
	Blocksize *int32 `json:"blocksize,omitempty"`
}

// NewMediaAssign instantiates a new MediaAssign object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaAssign() *MediaAssign {
	this := MediaAssign{}
	return &this
}

// NewMediaAssignWithDefaults instantiates a new MediaAssign object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaAssignWithDefaults() *MediaAssign {
	this := MediaAssign{}
	return &this
}

// GetCapacityGroup returns the CapacityGroup field value if set, zero value otherwise.
func (o *MediaAssign) GetCapacityGroup() string {
	if o == nil || IsNil(o.CapacityGroup) {
		var ret string
		return ret
	}
	return *o.CapacityGroup
}

// GetCapacityGroupOk returns a tuple with the CapacityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaAssign) GetCapacityGroupOk() (*string, bool) {
	if o == nil || IsNil(o.CapacityGroup) {
		return nil, false
	}
	return o.CapacityGroup, true
}

// HasCapacityGroup returns a boolean if a field has been set.
func (o *MediaAssign) HasCapacityGroup() bool {
	if o != nil && !IsNil(o.CapacityGroup) {
		return true
	}

	return false
}

// SetCapacityGroup gets a reference to the given string and assigns it to the CapacityGroup field.
func (o *MediaAssign) SetCapacityGroup(v string) {
	o.CapacityGroup = &v
}

// GetReprofile returns the Reprofile field value if set, zero value otherwise.
func (o *MediaAssign) GetReprofile() bool {
	if o == nil || IsNil(o.Reprofile) {
		var ret bool
		return ret
	}
	return *o.Reprofile
}

// GetReprofileOk returns a tuple with the Reprofile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaAssign) GetReprofileOk() (*bool, bool) {
	if o == nil || IsNil(o.Reprofile) {
		return nil, false
	}
	return o.Reprofile, true
}

// HasReprofile returns a boolean if a field has been set.
func (o *MediaAssign) HasReprofile() bool {
	if o != nil && !IsNil(o.Reprofile) {
		return true
	}

	return false
}

// SetReprofile gets a reference to the given bool and assigns it to the Reprofile field.
func (o *MediaAssign) SetReprofile(v bool) {
	o.Reprofile = &v
}

// GetBlocksize returns the Blocksize field value if set, zero value otherwise.
func (o *MediaAssign) GetBlocksize() int32 {
	if o == nil || IsNil(o.Blocksize) {
		var ret int32
		return ret
	}
	return *o.Blocksize
}

// GetBlocksizeOk returns a tuple with the Blocksize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaAssign) GetBlocksizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Blocksize) {
		return nil, false
	}
	return o.Blocksize, true
}

// HasBlocksize returns a boolean if a field has been set.
func (o *MediaAssign) HasBlocksize() bool {
	if o != nil && !IsNil(o.Blocksize) {
		return true
	}

	return false
}

// SetBlocksize gets a reference to the given int32 and assigns it to the Blocksize field.
func (o *MediaAssign) SetBlocksize(v int32) {
	o.Blocksize = &v
}

func (o MediaAssign) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaAssign) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CapacityGroup) {
		toSerialize["capacity_group"] = o.CapacityGroup
	}
	if !IsNil(o.Reprofile) {
		toSerialize["reprofile"] = o.Reprofile
	}
	if !IsNil(o.Blocksize) {
		toSerialize["blocksize"] = o.Blocksize
	}
	return toSerialize, nil
}

type NullableMediaAssign struct {
	value *MediaAssign
	isSet bool
}

func (v NullableMediaAssign) Get() *MediaAssign {
	return v.value
}

func (v *NullableMediaAssign) Set(val *MediaAssign) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaAssign) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaAssign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaAssign(val *MediaAssign) *NullableMediaAssign {
	return &NullableMediaAssign{value: val, isSet: true}
}

func (v NullableMediaAssign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaAssign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
