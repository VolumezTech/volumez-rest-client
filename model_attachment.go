/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment struct for Attachment
type Attachment struct {
	Volumename         *string `json:"volumename,omitempty"`
	Volumeid           *string `json:"volumeid,omitempty"`
	Snapshotname       *string `json:"snapshotname,omitempty"`
	Snapshotid         *string `json:"snapshotid,omitempty"`
	Node               string  `json:"node"`
	State              *string `json:"state,omitempty"`
	Status             *string `json:"status,omitempty"`
	Progress           *int32  `json:"progress,omitempty"`
	Mountpoint         *string `json:"mountpoint,omitempty"`
	Readonly           *bool   `json:"readonly,omitempty"`
	AllocatedResources *int32  `json:"allocated_resources,omitempty"`
}

type _Attachment Attachment

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment(node string) *Attachment {
	this := Attachment{}
	this.Node = node
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetVolumename returns the Volumename field value if set, zero value otherwise.
func (o *Attachment) GetVolumename() string {
	if o == nil || IsNil(o.Volumename) {
		var ret string
		return ret
	}
	return *o.Volumename
}

// GetVolumenameOk returns a tuple with the Volumename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetVolumenameOk() (*string, bool) {
	if o == nil || IsNil(o.Volumename) {
		return nil, false
	}
	return o.Volumename, true
}

// HasVolumename returns a boolean if a field has been set.
func (o *Attachment) HasVolumename() bool {
	if o != nil && !IsNil(o.Volumename) {
		return true
	}

	return false
}

// SetVolumename gets a reference to the given string and assigns it to the Volumename field.
func (o *Attachment) SetVolumename(v string) {
	o.Volumename = &v
}

// GetVolumeid returns the Volumeid field value if set, zero value otherwise.
func (o *Attachment) GetVolumeid() string {
	if o == nil || IsNil(o.Volumeid) {
		var ret string
		return ret
	}
	return *o.Volumeid
}

// GetVolumeidOk returns a tuple with the Volumeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetVolumeidOk() (*string, bool) {
	if o == nil || IsNil(o.Volumeid) {
		return nil, false
	}
	return o.Volumeid, true
}

// HasVolumeid returns a boolean if a field has been set.
func (o *Attachment) HasVolumeid() bool {
	if o != nil && !IsNil(o.Volumeid) {
		return true
	}

	return false
}

// SetVolumeid gets a reference to the given string and assigns it to the Volumeid field.
func (o *Attachment) SetVolumeid(v string) {
	o.Volumeid = &v
}

// GetSnapshotname returns the Snapshotname field value if set, zero value otherwise.
func (o *Attachment) GetSnapshotname() string {
	if o == nil || IsNil(o.Snapshotname) {
		var ret string
		return ret
	}
	return *o.Snapshotname
}

// GetSnapshotnameOk returns a tuple with the Snapshotname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetSnapshotnameOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshotname) {
		return nil, false
	}
	return o.Snapshotname, true
}

// HasSnapshotname returns a boolean if a field has been set.
func (o *Attachment) HasSnapshotname() bool {
	if o != nil && !IsNil(o.Snapshotname) {
		return true
	}

	return false
}

// SetSnapshotname gets a reference to the given string and assigns it to the Snapshotname field.
func (o *Attachment) SetSnapshotname(v string) {
	o.Snapshotname = &v
}

// GetSnapshotid returns the Snapshotid field value if set, zero value otherwise.
func (o *Attachment) GetSnapshotid() string {
	if o == nil || IsNil(o.Snapshotid) {
		var ret string
		return ret
	}
	return *o.Snapshotid
}

// GetSnapshotidOk returns a tuple with the Snapshotid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetSnapshotidOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshotid) {
		return nil, false
	}
	return o.Snapshotid, true
}

// HasSnapshotid returns a boolean if a field has been set.
func (o *Attachment) HasSnapshotid() bool {
	if o != nil && !IsNil(o.Snapshotid) {
		return true
	}

	return false
}

// SetSnapshotid gets a reference to the given string and assigns it to the Snapshotid field.
func (o *Attachment) SetSnapshotid(v string) {
	o.Snapshotid = &v
}

// GetNode returns the Node field value
func (o *Attachment) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *Attachment) SetNode(v string) {
	o.Node = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Attachment) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Attachment) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Attachment) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Attachment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Attachment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Attachment) SetStatus(v string) {
	o.Status = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Attachment) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Attachment) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Attachment) SetProgress(v int32) {
	o.Progress = &v
}

// GetMountpoint returns the Mountpoint field value if set, zero value otherwise.
func (o *Attachment) GetMountpoint() string {
	if o == nil || IsNil(o.Mountpoint) {
		var ret string
		return ret
	}
	return *o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetMountpointOk() (*string, bool) {
	if o == nil || IsNil(o.Mountpoint) {
		return nil, false
	}
	return o.Mountpoint, true
}

// HasMountpoint returns a boolean if a field has been set.
func (o *Attachment) HasMountpoint() bool {
	if o != nil && !IsNil(o.Mountpoint) {
		return true
	}

	return false
}

// SetMountpoint gets a reference to the given string and assigns it to the Mountpoint field.
func (o *Attachment) SetMountpoint(v string) {
	o.Mountpoint = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *Attachment) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *Attachment) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *Attachment) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetAllocatedResources returns the AllocatedResources field value if set, zero value otherwise.
func (o *Attachment) GetAllocatedResources() int32 {
	if o == nil || IsNil(o.AllocatedResources) {
		var ret int32
		return ret
	}
	return *o.AllocatedResources
}

// GetAllocatedResourcesOk returns a tuple with the AllocatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetAllocatedResourcesOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocatedResources) {
		return nil, false
	}
	return o.AllocatedResources, true
}

// HasAllocatedResources returns a boolean if a field has been set.
func (o *Attachment) HasAllocatedResources() bool {
	if o != nil && !IsNil(o.AllocatedResources) {
		return true
	}

	return false
}

// SetAllocatedResources gets a reference to the given int32 and assigns it to the AllocatedResources field.
func (o *Attachment) SetAllocatedResources(v int32) {
	o.AllocatedResources = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Volumename) {
		toSerialize["volumename"] = o.Volumename
	}
	if !IsNil(o.Volumeid) {
		toSerialize["volumeid"] = o.Volumeid
	}
	if !IsNil(o.Snapshotname) {
		toSerialize["snapshotname"] = o.Snapshotname
	}
	if !IsNil(o.Snapshotid) {
		toSerialize["snapshotid"] = o.Snapshotid
	}
	toSerialize["node"] = o.Node
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Mountpoint) {
		toSerialize["mountpoint"] = o.Mountpoint
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.AllocatedResources) {
		toSerialize["allocated_resources"] = o.AllocatedResources
	}
	return toSerialize, nil
}

func (o *Attachment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"node",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachment := _Attachment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachment)

	if err != nil {
		return err
	}

	*o = Attachment(varAttachment)

	return err
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
