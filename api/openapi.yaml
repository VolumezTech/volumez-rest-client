openapi: 3.0.1
info:
  description: Volumez orchestrator API
  title: GitHub
  version: 0.0.0
servers:
- url: https://api.dev.volumez.com
tags:
- description: ""
  name: Volumes
- description: ""
  name: AutoProvisionVolumes
- description: ""
  name: Nodes
- description: "Policies allow you to declare the desired characteristics of volumes\
    \ you will later create. Policies are expressed in terms of outcomes (such as\
    \ desired performance and resiliency). When you later ask Volumez to create volumes\
    \ using a policy, it will automatically allocate and configure whatever is necessary\
    \ to match these desired outcomes."
  name: Policies
- description: ""
  name: Networks
- description: ""
  name: Jobs
- description: ""
  name: Snapshots
- description: ""
  name: Attachments
- description: ""
  name: Media
- description: ""
  name: Connectivities
- description: ""
  name: CapacityGroups
- description: ""
  name: Alerts
- description: ""
  name: Exports
paths:
  /volumes:
    get:
      operationId: VolumesList
      parameters:
      - explode: true
        in: query
        name: capacity
        required: false
        schema:
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Volume'
                type: array
          description: List of volumes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of volumes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of volumes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of volumes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of volumes
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.capacity: method.request.querystring.capacity
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: VolumeCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        description: A Volume object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Volume has been created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new volume
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/plan:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: BatchVolumesPlan
      parameters:
      - description: if true will return the volume plan if false will omit the plan
          from the response
        explode: true
        in: query
        name: verbose
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchVolumesPlan_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumePlanOutput'
          description: volume plan output
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: check if volumes can be created
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/plan"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.verbose: method.request.querystring.verbose
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/snapshot:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: ConsistencyGroupSnapshotCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsistencyGroupSnapshotCreate_request'
        description: A Snapshot object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New snapshot was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new snapshot for given consistency group
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/snapshot"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/snapshot/{snapshot_group_name}:
    get:
      operationId: ConsistencyGroupGet
      parameters:
      - explode: false
        in: path
        name: snapshot_group_name
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Snapshot'
                type: array
          description: List of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: List of snapshots group
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/snapshot/{snapshot_group_name}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.snapshot_group_name: method.request.path.snapshot_group_name
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: path
        name: snapshot_group_name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /volumes/{volume}:
    delete:
      operationId: VolumeDelete
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A volume was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a volume
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: VolumeGet
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
          description: Properties of a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a volume
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: VolumeModify
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Volume'
        description: A Volume object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A volume was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a volume
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/{volume}/describe:
    get:
      operationId: VolumeDescribe
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeGroup'
          description: 'the Volume information '
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: 'describe existing volume '
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/describe"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /volumes/{volume}/recover:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: VolumeRecoverInitiate
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Volume recovery was initiated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error initiating recovery on volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error initiating recovery on volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error initiating recovery on volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Initiate recover on volume
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/recover"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /volumes/{volume}/snapshots:
    get:
      operationId: SnapshotsList
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Snapshot'
                type: array
          description: List of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of snapshots
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: SnapshotCreate
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Snapshot'
        description: A Snapshot object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New snapshot was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new snapshot
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/{volume}/snapshots/{snapshot}:
    delete:
      operationId: SnapshotDelete
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A snapshot was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a snapshot
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: SnapshotGet
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
          description: Properties of a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a snapshot
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: SnapshotModify
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Snapshot'
        description: A Snapshot object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A snapshot was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a snapshot
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a snapshot
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/{volume}/snapshots/{snapshot}/rollback:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: SnapshotRollback
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Rollback successful
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during rollback
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during rollback
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during rollback
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Roll back to snapshot
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/rollback"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /associations:
    get:
      operationId: AssociationsList
      parameters:
      - explode: true
        in: query
        name: startfrom
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Association'
                type: array
          description: List of associations
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of associations
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/associations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.startfrom: method.request.querystring.startfrom
          integration.request.querystring.count: method.request.querystring.count
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: AssociationCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationCreate'
        description: An association object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessJobResponse'
          description: Association has been created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create association
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/associations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /associations/{association}:
    delete:
      operationId: AssociationDelete
      parameters:
      - explode: false
        in: path
        name: association
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: An associations was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting association
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete an association
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/associations/{association}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.association: method.request.path.association
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: path
        name: association
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: AssociationModify
      parameters:
      - explode: false
        in: path
        name: association
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationModify'
        description: An association object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: swap successful
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during swap
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during swap
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error during swap
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Association modify
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/associations/{association}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.association: method.request.path.association
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /exports/:
    get:
      operationId: ExportsList
      parameters:
      - explode: true
        in: query
        name: startfrom
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Export'
                type: array
          description: List of exports
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of exports
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of exports
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of exports
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of associations
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/exports/"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.startfrom: method.request.querystring.startfrom
          integration.request.querystring.count: method.request.querystring.count
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: ExportCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportCreate'
        description: An export object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessJobResponse'
          description: Export create job was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create export
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/exports/"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /exports/{export}:
    delete:
      operationId: ExportDelete
      parameters:
      - explode: false
        in: path
        name: export
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessJobResponse'
          description: Export was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete an export
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/exports/{export}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.export: method.request.path.export
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: ExportModify
      parameters:
      - explode: false
        in: path
        name: export
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportModify'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessJobResponse'
          description: Export modify job was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error modifying export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error modifying export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error modifying export
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify an export
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/exports/{export}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.export: method.request.path.export
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /autoprovisionvolumes:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: AutoProvisionVolumes
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoProvisionVolume'
        description: Auto Provision Volume object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Auto provision volume has been created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new volume
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new auto provisioned volume
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/autoprovisionvolumes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /snapshots:
    get:
      operationId: SnapshotsListAll
      parameters:
      - explode: true
        in: query
        name: capacity
        required: false
        schema:
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Snapshot'
                type: array
          description: List of all snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all snapshots
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of all snapshots
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/snapshots"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.capacity: method.request.querystring.capacity
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /attachments:
    get:
      operationId: AttachmentsListAll
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: List of all attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of all attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of all attachments
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/attachments"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /volumes/{volume}/attachments:
    get:
      operationId: AttachmentsListForVolume
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: List of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of attachments for a given volume
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/attachments"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /volumes/{volume}/snapshots/{snapshot}/attachments:
    get:
      operationId: AttachmentsList
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: List of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of attachments
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of attachments for a given volume and snapshot
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/attachments"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: AttachmentCreate
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: An Attachment object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New attachment was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new attachment
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/attachments"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /volumes/{volume}/snapshots/{snapshot}/attachments/{node}:
    delete:
      operationId: AttachmentDelete
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: true
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: An attachment was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete an attachment
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/attachments/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: AttachmentGet
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: Properties of an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of an attachment
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/attachments/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: AttachmentModify
      parameters:
      - explode: false
        in: path
        name: volume
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: snapshot
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: An Attachment object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: An attachment was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating an attachment
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify an attachment
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/volumes/{volume}/snapshots/{snapshot}/attachments/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.volume: method.request.path.volume
          integration.request.path.snapshot: method.request.path.snapshot
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /nodes:
    get:
      operationId: NodesList
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
          description: List of nodes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of nodes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of nodes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of nodes
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of nodes
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/nodes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /nodes/tags/{node}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: NodeSetTags
      parameters:
      - description: Name of node to return
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
        description: user defined tags
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A node set tags was successful
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error setting tags for node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error setting tags for node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error setting tags for node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Set the tags of a node
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/tags/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: tags
  /nodes/{node}:
    delete:
      operationId: NodeDelete
      parameters:
      - description: ' node to delete'
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: false
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - allowEmptyValue: false
        explode: true
        in: query
        name: delayDelete
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A node delete job was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a node
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.querystring.delayDelete: method.request.querystring.delayDelete
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: NodeGet
      parameters:
      - description: Name of node to return
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Properties of a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a node
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /nodes/{node}/drain:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NodeDrain
      parameters:
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: cleanup
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Node drain
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/{node}/drain"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.cleanup: method.request.querystring.cleanup
          integration.request.header.X-Request-ID: context.requestId
  /nodes/{node}/describe:
    get:
      operationId: NodeDescribe
      parameters:
      - explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDescribeResponse'
          description: Description of a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting description of the node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting description of the node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting description of the node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Node describe
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/{node}/describe"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /nodes/logs/{node}/{tenant}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NodeCollectLogs
      parameters:
      - description: Name of node
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant ID
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Node collect logs job  was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'Error trying to create node collect logs job '
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'Error trying to create node collect logs job '
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'Error trying to create node collect logs job '
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Node collect logs
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/logs/{node}/{tenant}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.path.tenant: method.request.path.tenant
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /nodes/repair/{node}/{tenant}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NodeRepair
      parameters:
      - description: Name of node
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant ID
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepairCmds'
        description: A repair node object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Node Repair job was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to create node repair job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to create node repair job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to create node repair job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Execute commands on node for repair
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/repair/{node}/{tenant}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.path.tenant: method.request.path.tenant
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /nodes/upgrade/{node}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NodeUpgrade
      parameters:
      - description: Name of node to upgrade
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeVersion'
        description: Connector Version
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Node upgrade started successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: performing node version upgrade
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/upgrade/{node}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /nodes/upgrade/{node}/tenant/{tenant}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NodeUpgradeForSupport
      parameters:
      - description: Name of tenant to upgrade
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - description: Name of node to upgrade
        explode: false
        in: path
        name: node
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeVersion'
        description: Connector Version
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Node upgrade started successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error trying to upgrade node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: performing node version upgrade
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/nodes/upgrade/{node}/tenant/{tenant}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.node: method.request.path.node
          integration.request.path.tenant: method.request.path.tenant
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /policies:
    get:
      operationId: PoliciesList
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Policy'
                type: array
          description: List of policies
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of policies
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of policies
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of policies
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of policies
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/policies"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: PolicyCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        description: A Policy object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New policy was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new policy
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/policies"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /policies/{policy}:
    delete:
      operationId: PolicyDelete
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A policy was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a policy
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/policies/{policy}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.policy: method.request.path.policy
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: PolicyGet
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
          description: Properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a policy
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/policies/{policy}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.policy: method.request.path.policy
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: PolicyModify
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
        description: A Policy object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A policy was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a policy
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/policies/{policy}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.policy: method.request.path.policy
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /policies/{policy}/volumes:
    get:
      operationId: PolicyGetVolumes
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Volume'
                type: array
          description: "List of volumes, using given policy"
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a policy
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a policy
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/policies/{policy}/volumes"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.policy: method.request.path.policy
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /policies/{policy}/size/{size}/zone/{zone}:
    get:
      operationId: PolicyPlan
      parameters:
      - explode: false
        in: path
        name: policy
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: size
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: zone
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: capacity_group
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
          description: Policy volume group plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting policy volume group plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting policy volume group plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting policy volume group plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Show policy volume create plan
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/policies/{policy}/size/{size}/zone/{zone}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.policy: method.request.path.policy
          integration.request.path.size: method.request.path.size
          integration.request.path.zone: method.request.path.zone
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.capacity_group: method.request.querystring.capacity_group
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /networks:
    get:
      operationId: NetworksList
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
          description: List of networks
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of networks
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of networks
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of networks
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of networks
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/networks"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: NetworkCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
        description: A Network object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New network was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new network
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/networks"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /networks/{network}:
    delete:
      operationId: NetworkDelete
      parameters:
      - explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A network was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a network
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/networks/{network}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.network: method.request.path.network
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: NetworkGet
      parameters:
      - explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: Properties of a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a network
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/networks/{network}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.network: method.request.path.network
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: NetworkModify
      parameters:
      - explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Network'
        description: A Network object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A network was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a network
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a network
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/networks/{network}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.network: method.request.path.network
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /jobs:
    get:
      operationId: JobsList
      parameters:
      - explode: true
        in: query
        name: internal
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Job'
                type: array
          description: List of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of jobs
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of jobs
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/jobs"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.internal: method.request.querystring.internal
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.count: method.request.querystring.count
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /jobs/{job}:
    delete:
      operationId: JobDelete
      parameters:
      - explode: false
        in: path
        name: job
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A job was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a job
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/jobs/{job}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.job: method.request.path.job
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: JobGet
      parameters:
      - explode: false
        in: path
        name: job
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Properties of a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a job
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/jobs/{job}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.job: method.request.path.job
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /jobs/{job}/resume_suspend/{state}:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: JobResumeSuspend
      parameters:
      - explode: false
        in: path
        name: job
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: state
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error resuming or suspending job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error resuming or suspending job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error resuming or suspending job
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Resume or Suspend a job
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/jobs/{job}/resume_suspend/{state}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.job: method.request.path.job
          integration.request.path.state: method.request.path.state
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /media:
    get:
      operationId: MediaList
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Media'
                type: array
          description: List of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of media
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/media"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /media/{media}:
    delete:
      operationId: MediaDelete
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - allowEmptyValue: false
        explode: true
        in: query
        name: force
        required: false
        schema:
          default: false
          nullable: false
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A node delete job was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a node
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a media
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.force: method.request.querystring.force
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: MediaGet
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
          description: Properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a media
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: MediaModify
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaModify'
        description: A Media Modify Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Properties of a media to patch
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error patching properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error patching properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error patching properties of a media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: modify a media properties
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /media/{media}/assign:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: MediaAssign
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - description: Profile media even if it was already profiled
        explode: true
        in: query
        name: capacity_group
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: reprofile
        required: false
        schema:
          type: boolean
        style: form
      - description: LBA size for media format
        explode: true
        in: query
        name: block_size
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Assign media
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}/assign"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.capacity_group: method.request.querystring.capacity_group
          integration.request.querystring.reprofile: method.request.querystring.reprofile
          integration.request.querystring.block_size: method.request.querystring.block_size
          integration.request.header.X-Request-ID: context.requestId
  /media/{media}/unassign:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: MediaUnassign
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error completing the operation
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Unassign media
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}/unassign"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /media/{media}/profile:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: MediaProfileModify
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaProfile'
        description: A Media Profile object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A media profile was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a media profile
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a media profile
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a media profile
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a media profile
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}/profile"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /media/{media}/drain:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: MediaDrain
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error draining media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Media drain
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}/drain"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /media/{media}/{tenant}/diagnose:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: MediaDiagnose
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - description: Tenant ID
        explode: false
        in: path
        name: tenant
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Operation completed successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error diagnosing media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error diagnosing media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error diagnosing media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Media diagnose
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/media/{media}/{tenant}/diagnose"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.path.tenant: method.request.path.tenant
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /virtualmedia:
    get:
      operationId: VirtualMediaList
      parameters:
      - explode: true
        in: query
        name: startfrom
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VirtualMedia'
                type: array
          description: List of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of virtual media
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/virtualmedia"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.startfrom: method.request.querystring.startfrom
          integration.request.querystring.count: method.request.querystring.count
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: VirtualMediaCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualMediaCreate'
        description: Virtual media creation parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessJobResponse'
          description: Virtual media has been created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create (virtual) media
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/virtualmedia"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /virtualmedia/{media}:
    delete:
      operationId: VirtualMediaDelete
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Virtual media was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting virtual media
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete virtual media
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/virtualmedia/{media}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.media: method.request.path.media
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: path
        name: media
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /connectivities:
    get:
      operationId: ConnectivitiesList
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Connectivity'
                type: array
          description: List of connectivities
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of connectivities
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of connectivities
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of connectivities
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of connectivities
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/connectivities"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: ConnectivityCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connectivity'
        description: A Connectivity object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New connectivity was created successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating new connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Create a new connectivity
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/connectivities"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /connectivities/{connectivity}:
    delete:
      operationId: ConnectivityDelete
      parameters:
      - explode: false
        in: path
        name: connectivity
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A connectivity was deleted successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Delete a connectivity
      x-amazon-apigateway-integration:
        httpMethod: delete
        uri: "http://${sio-public-dns}:8000/api/v1/connectivities/{connectivity}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.connectivity: method.request.path.connectivity
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: ConnectivityGet
      parameters:
      - explode: false
        in: path
        name: connectivity
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connectivity'
          description: Properties of a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting properties of a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get the properties of a connectivity
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/connectivities/{connectivity}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.connectivity: method.request.path.connectivity
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    patch:
      operationId: ConnectivityModify
      parameters:
      - explode: false
        in: path
        name: connectivity
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connectivity'
        description: A Connectivity object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: A connectivity was updated successfully
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error updating a connectivity
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Modify a connectivity
      x-amazon-apigateway-integration:
        httpMethod: patch
        uri: "http://${sio-public-dns}:8000/api/v1/connectivities/{connectivity}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.connectivity: method.request.path.connectivity
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
      x-codegen-request-body-name: body
  /capacitygroups:
    get:
      operationId: capacityGroupGet
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CapacityGroup'
                type: array
          description: capacity groups
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting capacity groups
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting capacity groups
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting capacity groups
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get available capacity groups
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/capacitygroups"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /version:
    get:
      operationId: versionGet
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
          description: Version of sio
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting version of sio
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting version of sio
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting version of sio
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get version of sio
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/version"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /alerts:
    get:
      operationId: AlertsList
      parameters:
      - explode: true
        in: query
        name: capacity
        required: false
        schema:
          type: boolean
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Alert'
                type: array
          description: List of alerts
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of alerts
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of alerts
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting a list of alerts
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Get a list of alerts
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/alerts"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.querystring.capacity: method.request.querystring.capacity
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /alerts/{alert}/acknowledge:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: AlertAcknowledge
      parameters:
      - explode: false
        in: path
        name: alert
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Alert was successfully acknowledged
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error acknowledging alert
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error acknowledging alert
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error acknowledging alert
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: Acknowledge a pending alert
      x-amazon-apigateway-integration:
        httpMethod: post
        uri: "http://${sio-public-dns}:8000/api/v1/alerts/{alert}/acknowledge"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.path.alert: method.request.path.alert
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
  /system/machineinfo:
    get:
      operationId: GetMachineInfo
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineInfo'
          description: confirmation of subscription registered
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Getting volume plan
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      summary: get system info
      x-amazon-apigateway-integration:
        httpMethod: get
        uri: "http://${sio-public-dns}:8000/api/v1/system/machineinfo"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^(400)$:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!500)(?!400)[0-9]*)$:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          ^((?!200)(?!404)(?!400)(?!202)(?!409)[0-9]*)$:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        type: http
        requestParameters:
          integration.request.header.authorization: method.request.header.authorization
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /charts:
    options:
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: object
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: object
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: object
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /charts/{proxy+}:
    options:
      parameters:
      - explode: false
        in: path
        name: proxy
        required: true
        schema:
          type: string
        style: simple
      x-amazon-apigateway-integration:
        httpMethod: ANY
        uri: "http://${sio-public-dns}:3000/{proxy}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
        passthroughBehavior: when_no_match
        type: http_proxy
    x-amazon-apigateway-any-method:
      parameters:
      - name: authorization
        in: header
        required: false
        type: string
      - name: theme
        in: query
        required: false
        type: string
      - name: kiosk
        in: query
        required: false
        type: string
      - name: orgId
        in: query
        required: false
        type: string
      - name: proxy
        in: path
        required: true
        type: string
      - name: refresh
        in: query
        required: false
        type: string
      - name: from
        in: query
        required: false
        type: string
      - name: to
        in: query
        required: false
        type: string
      responses: {}
      x-amazon-apigateway-integration:
        httpMethod: ANY
        uri: "http://${sio-public-dns}:3000/{proxy}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.querystring.from: method.request.querystring.from
          integration.request.querystring.to: method.request.querystring.to
          integration.request.querystring.theme: method.request.querystring.theme
          integration.request.path.proxy: method.request.path.proxy
          integration.request.querystring.refresh: method.request.querystring.refresh
          integration.request.querystring.kiosk: method.request.querystring.kiosk
          integration.request.querystring.orgId: method.request.querystring.orgId
        passthroughBehavior: when_no_match
        type: http_proxy
  /log/{tenantid}/{logfile}:
    get:
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: logfile
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tenantid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content: {}
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content: {}
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content: {}
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${sio-public-dns}:8000/api/v1/log/{tenantid}/{logfile}"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              text/plain: $input.path('$')
          "500":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
          "404":
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.path.logfile: method.request.path.logfile
          integration.request.header.authorization: method.request.header.authorization
          integration.request.path.tenantid: method.request.path.tenantid
        passthroughBehavior: when_no_match
        type: http
    options:
      parameters:
      - explode: false
        in: path
        name: logfile
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tenantid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant-cloud-resources/role:
    get:
      operationId: getAllRoles
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRolesResponse'
          description: Get all tenant cloud roles ok
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Get all tenant cloud roles error
      security:
      - storage.io-authorizer: []
      summary: Get All Tenant roles
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/role
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: createRole
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRoleResponse'
          description: Successfully created tenant cloud role
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The given tenant cloud role for cloud provider is not a valid
            role
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The tenant cloud role for cloud provider is already exists
            with the given cloudProviderAccountId
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Failed to create/update tenant cloud role for cloud provider
      security:
      - storage.io-authorizer: []
      summary: Create tenant cloud role
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/role
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant-cloud-resources/vm/zones:
    get:
      operationId: getVMZones
      parameters:
      - description: Cloud provider type
        explode: true
        in: query
        name: cloudProvider
        required: false
        schema:
          $ref: '#/components/schemas/CloudProviderType'
        style: form
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmRegionZonesResponse'
          description: cloud provider zones ok
        "404":
          description: The given cloudProviderAccountId isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: All tenant's cloud VM's available zones error
      security:
      - storage.io-authorizer: []
      summary: Get cloud provider zones for requested region
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/vm/zones
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.querystring.cloudProvider: method.request.querystring.cloudProvider
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant-cloud-resources/{cloudProviderAccountId}/role:
    delete:
      operationId: deleteRole
      parameters:
      - explode: false
        in: path
        name: cloudProviderAccountId
        required: true
        schema:
          $ref: '#/components/schemas/CloudProviderAccountId'
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: Successfully deleted tenant cloud role for cloud provider
        "404":
          description: The given cloudProviderAccountId isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Delete tenant cloud role error
      security:
      - storage.io-authorizer: []
      summary: Delete tenant role resource by the given cloudProviderAccountId query
        param
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: DELETE
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/{cloudProviderAccountId}/role"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.cloudProviderAccountId: method.request.path.cloudProviderAccountId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    put:
      operationId: updateRole
      parameters:
      - explode: false
        in: path
        name: cloudProviderAccountId
        required: true
        schema:
          $ref: '#/components/schemas/CloudProviderAccountId'
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
        required: true
      responses:
        "204":
          description: Successfully updated tenant role for AWS cloud provider
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The updated tenant role for AWS cloud provider is not a valid
            role
        "404":
          description: The given cloudProviderAccountId isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Failed to create/update tenant role for AWS cloud provider
      security:
      - storage.io-authorizer: []
      summary: Update tenant cloud role for the given cloudProviderAccountId
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: PUT
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/{cloudProviderAccountId}/role"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.cloudProviderAccountId: method.request.path.cloudProviderAccountId
  /tenant-cloud-resources/{cloudProviderAccountId}/vm/vpcs:
    get:
      operationId: getVMVPCs
      parameters:
      - explode: false
        in: path
        name: cloudProviderAccountId
        required: true
        schema:
          $ref: '#/components/schemas/CloudProviderAccountId'
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVMVPCsResponse'
          description: All tenant's Cloud VM's available VPCs ok
        "404":
          description: The given cloudProviderAccountId isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: All tenant's cloud VM's available VPCs error
      security:
      - storage.io-authorizer: []
      summary: Get all tenant's cloud VM's available VPCs
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/{cloudProviderAccountId}/vm/vpcs"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.cloudProviderAccountId: method.request.path.cloudProviderAccountId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant-cloud-resources/{cloudProviderAccountId}/vm/{region}/metadata/{nodeId}:
    get:
      operationId: getVMMetadataByRegion
      parameters:
      - explode: false
        in: path
        name: cloudProviderAccountId
        required: true
        schema:
          $ref: '#/components/schemas/CloudProviderAccountId'
        style: simple
      - explode: false
        in: path
        name: region
        required: true
        schema:
          $ref: '#/components/schemas/Region'
        style: simple
      - explode: false
        in: path
        name: nodeId
        required: true
        schema:
          $ref: '#/components/schemas/NodeId'
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVMMetadataResponse'
          description: Tenant's Cloud VM's metadata ok
        "404":
          description: The given cloudProviderAccountId/region/instanceId isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Tenant's cloud VM's metadata error
      security:
      - storage.io-authorizer: []
      summary: Get tenant's cloud VM' metadata by region
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/{cloudProviderAccountId}/vm/{region}/metadata/{nodeId}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.cloudProviderAccountId: method.request.path.cloudProviderAccountId
          integration.request.path.region: method.request.path.region
          integration.request.path.nodeId: method.request.path.nodeId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant-cloud-resources/{cloudProviderAccountId}/vm/{region}/vpcs:
    get:
      operationId: getVMVPCsByRegion
      parameters:
      - explode: false
        in: path
        name: cloudProviderAccountId
        required: true
        schema:
          $ref: '#/components/schemas/CloudProviderAccountId'
        style: simple
      - explode: false
        in: path
        name: region
        required: true
        schema:
          $ref: '#/components/schemas/Region'
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVMVPCsResponse'
          description: Tenant's Cloud VM's available VPCs ok
        "404":
          description: The given cloudProviderAccountId/region isn't exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Tenant's cloud VM's available VPCs error
      security:
      - storage.io-authorizer: []
      summary: Get tenant's cloud VM's available VPCs by region
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-cloud-resources/{cloudProviderAccountId}/vm/{region}/vpcs"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.cloudProviderAccountId: method.request.path.cloudProviderAccountId
          integration.request.path.region: method.request.path.region
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /infra-planner/create-infra-plan:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: createInfraPlan
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      - description: validate the given resources
        explode: true
        in: query
        name: shouldValidate
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInfraPlanRequest'
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Infra plan request is not valid
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not found policy/role
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Create infra plan is failed
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInfraPlanResponse'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - storage.io-authorizer: []
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/infra-planner/create-infra-plan
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.querystring.shouldValidate: method.request.querystring.shouldValidate
  /infra-planner/create-infra-plan/public:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: createPublicInfraPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInfraPlanRequest'
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Infra plan request is not valid
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Create infra plan is failed
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInfraPlanResponse'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/infra-planner/create-infra-plan/public
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /infra-planner/provider-pricing-info:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: ProviderPricingInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderPricingInfoRequest'
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Infra plan request is not valid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Create infra plan is failed
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderPricingInfoResponse'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/infra-planner/provider-pricing-info
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /signup:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: SignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        description: A user signup object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
          description: Sign up was successful
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 401 Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error signing up
      summary: Create Tenant's first user
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/signup
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /signout:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: signOut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignOutRequest'
        description: Access Token
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Sign out was successful
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 401 Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error signing out
      summary: Signs out user from all devices
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/signout
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /signin:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
        description: A signin object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
          description: signin successful
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error signing
      summary: User SignIn
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/signin
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/user:
    get:
      operationId: getTenantUser
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantUserResponse'
          description: Got Tenant's User successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting user
      security:
      - storage.io-authorizer: []
      summary: Get user details
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: TenantUserCreate
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAddTenantUserRequest'
        description: new tenant's user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New user was created successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error adding user to exist tenant
      security:
      - storage.io-authorizer: []
      summary: Create Tenant's additional user
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/user/requestchangepassword:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: requestChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestChangePassword'
        description: new user password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Request for password change done successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error changing password
      summary: Request change client password
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user/requestchangepassword
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/user/changepassword:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: approveChangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordApproveRequest'
        description: new user password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New password changed successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error changing password
      summary: Change client password
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user/changepassword
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/user/changepasswordloggedin:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: ChangePasswordLoggedIn
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequestLoggedIn'
        description: new user password when logged in
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: New password changed successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error changing password while login
      security:
      - storage.io-authorizer: []
      summary: Change clients password when user is logged in
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user/changepasswordloggedin
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/user/confirmation:
    get:
      operationId: userConfirm
      parameters:
      - description: Cognito Client ID
        explode: true
        in: query
        name: client_id
        required: false
        schema:
          type: string
        style: form
      - description: Cognito User Name
        explode: true
        in: query
        name: user_name
        required: false
        schema:
          type: string
        style: form
      - description: Cognito Signup Confirmation Code
        explode: true
        in: query
        name: confirmation_code
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: user has successfully confirmed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Confirm user signup
      summary: Confirm user signup
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/user/confirmation
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.querystring.user_name: method.request.querystring.user_name
          integration.request.querystring.confirmation_code: method.request.querystring.confirmation_code
          integration.request.querystring.client_id: method.request.querystring.client_id
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /add-user:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
        description: New user attributes to add in Cognito
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: Tenant Groups users retrieved successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error Add user to tenant group users
      summary: Add user to tenant group users
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/add-user
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /disable-user/{email}:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: disableUser
      parameters:
      - description: User email to disable
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: User disabled successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error disable user
      security:
      - storage.io-authorizer: []
      summary: disable user
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/disable-user/{email}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.email: method.request.path.email
  /enable-user/{email}:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: enableUser
      parameters:
      - description: User email to enable
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: User enabled successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error enable user
      security:
      - storage.io-authorizer: []
      summary: enable user
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/enable-user/{email}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.email: method.request.path.email
  /invite-user/{email}:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: inviteUser
      parameters:
      - description: User email to invite
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteUserResponse'
          description: User invited successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error invite a user to join tenant
      security:
      - storage.io-authorizer: []
      summary: invite a user to join tenant (send add user signup email
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/invite-user/{email}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.email: method.request.path.email
  /users/{tenantId}:
    get:
      operationId: TenantUsers
      parameters:
      - description: Tenant Id to get all users for
        explode: false
        in: path
        name: tenantId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TenantUser'
                type: array
          description: get tenant users ok
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error List all tenant group users
      security:
      - storage.io-authorizer: []
      summary: List all tenant group users
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/users/{tenantId}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.tenantId: method.request.path.tenantId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /azuremarketplace/subscription:
    get:
      operationId: GetSubscription
      parameters:
      - explode: true
        in: query
        name: token
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegularResponse'
          description: confirmation of subscription registered
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Subscription not available
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error get subscription
      summary: get subscription
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/azuremarketplace/subscription
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.querystring.token: method.request.querystring.token
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/refreshtoken:
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: getTenantRefreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTenantRefreshTokenRequest'
        required: true
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/refreshtoken
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant/token:
    get:
      operationId: getTenantAccessToken
      parameters:
      - description: Tenant token authorization
        explode: false
        in: header
        name: authorization
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantTokenResponse'
          description: 200 response
      security:
      - storage.io-authorizer: []
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/token
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/tenantid:
    get:
      operationId: GetTenantIDFromTenantToken
      parameters:
      - explode: false
        in: header
        name: tenanttoken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantIDResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantIDResponse'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/tenantid
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/{tenantID}/tenanthosts/{tenantHost}:
    delete:
      operationId: deleteTenantHost
      parameters:
      - explode: false
        in: header
        name: authorization
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tenantHost
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: tenantID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantHostDeleteResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantHostDeleteResponse'
          description: 200 response
      security:
      - storage.io-authorizer: []
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: DELETE
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/{tenantID}/tenanthosts/{tenantHost}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.tenantID: method.request.path.tenantID
          integration.request.path.tenantHost: method.request.path.tenantHost
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/tenanthost/credentials:
    get:
      operationId: TenantHostAccessCredentials
      parameters:
      - explode: false
        in: header
        name: refreshtoken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/tenanthost/credentials
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/tenanthost:
    get:
      operationId: getTenantHost
      parameters:
      - explode: false
        in: header
        name: tenanthosttoken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantHostResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantHostResponse'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/tenanthost
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant/apiaccess/credentials/refresh:
    get:
      operationId: RefreshTenantAPIAccessCredentials
      parameters:
      - explode: false
        in: header
        name: refreshtoken
        required: true
        schema:
          type: string
        style: simple
      responses:
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
          description: 200 response
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/tenant/apiaccess/credentials/refresh
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /sso/azure/mapping:
    delete:
      operationId: deleteAzureSSOMapping
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Azure SSO mapping deleted successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error deleting Azure SSO mapping
      security:
      - storage.io-authorizer: []
      summary: Delete Azure SSO Mapping
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: DELETE
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/sso/azure/mapping
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    get:
      operationId: getAzureSSOMapping
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAzureSSOMappingResponse'
          description: Azure SSO mapping for tenant retrieved successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error getting Azure SSO mapping for tenant
      security:
      - storage.io-authorizer: []
      summary: Get Azure SSO Mapping
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/sso/azure/mapping
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    put:
      operationId: putAzureSSOMapping
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAzureSSOMappingRequest'
        description: Put Azure SSO Mapping for tenant
        required: true
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
          description: Azure SSO mapping for tenant created/updated successfully
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error creating/updating Azure SSO mapping for tenant
      security:
      - storage.io-authorizer: []
      summary: Put Azure SSO Mapping
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: PUT
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/sso/azure/mapping
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /sso/callback/{userPoolID}/{applicationClientId}:
    get:
      description: Handle SSO callback
      operationId: handleSSOCallback
      parameters:
      - description: User Pool ID
        explode: false
        in: path
        name: userPoolID
        required: true
        schema:
          type: string
        style: simple
      - description: Application Client ID
        explode: false
        in: path
        name: applicationClientId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: code
        required: true
        schema:
          type: string
        style: form
      responses:
        "302":
          description: Redirect with cookies
          headers:
            Set-Cookie:
              explode: false
              schema:
                type: string
              style: simple
            Location:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Origin:
              example:
              - https://dev.volumez.com
              - https://volumez.com
              explode: false
              schema:
                example: "[\"https://dev.volumez.com\",\"https://volumez.com\"]"
                type: string
              style: simple
            Access-Control-Allow-Methods:
              example: "GET, POST, OPTIONS"
              explode: false
              schema:
                example: "GET, POST, OPTIONS"
                type: string
              style: simple
            Access-Control-Allow-Headers:
              example: "Content-Type, Authorization"
              explode: false
              schema:
                example: "Content-Type, Authorization"
                type: string
              style: simple
            Access-Control-Allow-Credentials:
              example: "true"
              explode: false
              schema:
                example: "true"
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error handling SSO callback
      summary: Handle SSO callback
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: "http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/user/sso/callback/{userPoolID}/{applicationClientId}"
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
          integration.request.path.userPoolID: method.request.path.userPoolID
          integration.request.path.applicationClientId: method.request.path.applicationClientId
          integration.request.querystring.code: method.request.querystring.code
    options:
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
  /tenant-settings:
    get:
      operationId: getTenantSettings
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTenantSettingsResponse'
          description: get tenant settings ok
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: get tenant settings failed
      security:
      - storage.io-authorizer: []
      summary: Get tenant settings
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: GET
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-settings
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
    options:
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    put:
      operationId: modifyTenantSettings
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTenantSettingsRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyTenantSettingsResponse'
          description: update tenant settings ok
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: too many update tenant settings requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: update tenant settings failed
      security:
      - storage.io-authorizer: []
      summary: Modify tenant settings
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: PUT
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-settings
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
  /tenant-settings/reset:
    options:
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 404 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 202 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 409 response
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: when_no_match
        type: mock
    post:
      operationId: resetTenantSettings
      parameters:
      - explode: false
        in: header
        name: authorization
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetTenantSettingsRequest'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetTenantSettingsResponse'
          description: reset tenant settings ok
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: too many update tenant settings requests
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: reset tenant settings failed
      security:
      - storage.io-authorizer: []
      summary: Reset tenant settings
      x-amazon-apigateway-integration:
        connectionId: ulkw93
        httpMethod: POST
        uri: http://prod-ms-nlb-db256a8f6657f3bb.elb.us-east-1.amazonaws.com:8974/api/v1/tenant-settings/reset
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        type: http_proxy
        timeoutInMillis: 12000
        requestParameters:
          integration.request.header.X-Request-ID: context.requestId
components:
  schemas:
    DateTime:
      format: date-time
      type: string
      x-go-type:
        type: Time
        import:
          package: time
        embedded: true
    AutoProvisionVolume:
      example:
        volume:
          replicationvolumegroupname: replicationvolumegroupname
          type: file
          throttlingscheme: throttlingscheme
          zone: zone
          volumerecoveryjob: volumerecoveryjob
          capacitygroup: capacitygroup
          state: state
          zonereplica: zonereplica
          consistencygroup: consistencygroup
          policy: policy
          contentsnapshot: contentsnapshot
          contentvolume: contentvolume
          volumegroupid: volumegroupid
          replicationnode: replicationnode
          flavor: regular
          node: node
          size: 83973
          volumegroupname: volumegroupname
          replicationvolumegroupid: replicationvolumegroupid
          name: name
          volumeid: volumeid
          progress: 1
          maxsize: 6
          status: status
          allowdatamovement: false
        accountId: accountId
        sshKeyName: sshKeyName
        imageId: imageId
        cloudProvider: cloudProvider
        osType: Linux
        infraPlan:
          instanceCount: 1
          price: 1
          instanceType: instanceType
          osType: Linux
          availabilityZones:
          - availabilityZones
          - availabilityZones
        availabilityZones:
        - availabilityZones
        - availabilityZones
        subnets:
        - subnets
        - subnets
        region: region
      properties:
        volume:
          $ref: '#/components/schemas/Volume'
        infraPlan:
          $ref: '#/components/schemas/AutoProvisionInfraPlan'
        cloudProvider:
          minLength: 1
          title: cloud provider name
          type: string
        accountId:
          minLength: 1
          title: the customers provider account id
          type: string
        sshKeyName:
          minLength: 1
          title: ssh key name
          type: string
        imageId:
          minLength: 1
          title: os image id
          type: string
        region:
          minLength: 1
          title: Region to create teh volume in
          type: string
        availabilityZones:
          items:
            type: string
          minItems: 1
          type: array
        subnets:
          items:
            type: string
          minItems: 1
          type: array
        osType:
          enum:
          - Linux
          - Rhel
          - Ubuntu
          type: string
      required:
      - accountId
      - availabilityZones
      - cloudProvider
      - osType
      - region
      - subnets
      - volume
      type: object
    AutoProvisionInfraPlan:
      example:
        instanceCount: 1
        price: 1
        instanceType: instanceType
        osType: Linux
        availabilityZones:
        - availabilityZones
        - availabilityZones
      properties:
        instanceType:
          minLength: 1
          title: instance type
          type: string
        instanceCount:
          minimum: 1
          title: Number of instance to provision
          type: integer
        availabilityZones:
          items:
            type: string
          minItems: 1
          type: array
        osType:
          enum:
          - Linux
          - Rhel
          - Ubuntu
          type: string
        price:
          format: float
          minimum: 1
          title: Number of instance to provision
          type: integer
      type: object
    Volume:
      example:
        replicationvolumegroupname: replicationvolumegroupname
        type: file
        throttlingscheme: throttlingscheme
        zone: zone
        volumerecoveryjob: volumerecoveryjob
        capacitygroup: capacitygroup
        state: state
        zonereplica: zonereplica
        consistencygroup: consistencygroup
        policy: policy
        contentsnapshot: contentsnapshot
        contentvolume: contentvolume
        volumegroupid: volumegroupid
        replicationnode: replicationnode
        flavor: regular
        node: node
        size: 83973
        volumegroupname: volumegroupname
        replicationvolumegroupid: replicationvolumegroupid
        name: name
        volumeid: volumeid
        progress: 1
        maxsize: 6
        status: status
        allowdatamovement: false
      properties:
        name:
          minLength: 1
          title: Volume name
          type: string
        volumeid:
          minLength: 1
          readOnly: true
          title: Volume ID
          type: string
        type:
          enum:
          - file
          - block
          type: string
        contentvolume:
          type: string
        contentsnapshot:
          type: string
        size:
          maximum: 1048576
          minimum: 1
          title: "Size, GiB"
          type: integer
        maxsize:
          readOnly: true
          title: "Upper limit size, GiB"
          type: integer
        policy:
          minLength: 1
          type: string
        consistencygroup:
          type: string
        node:
          readOnly: true
          type: string
        zone:
          minLength: 1
          type: string
        zonereplica:
          type: string
        volumegroupname:
          minLength: 1
          title: Volume Group name
          type: string
        volumegroupid:
          minLength: 1
          readOnly: true
          title: Volume ID
          type: string
        replicationnode:
          type: string
        replicationvolumegroupname:
          minLength: 1
          title: Replication Volume Group name
          type: string
        replicationvolumegroupid:
          minLength: 1
          readOnly: true
          title: Replication Volume ID
          type: string
        volumerecoveryjob:
          minLength: 1
          readOnly: true
          title: Volume Recovery Job ID
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        capacitygroup:
          minLength: 1
          title: Capacity group from which the volume is allocated
          type: string
        throttlingscheme:
          minLength: 1
          title: Throttling Scheme for the volume
          type: string
        allowdatamovement:
          default: false
          title: Allow movement of the volume
          type: boolean
        flavor:
          enum:
          - regular
          - filedirect
          type: string
      required:
      - name
      - policy
      - size
      - type
      type: object
    Node:
      example:
        cloudprovider: cloudprovider
        accountID: accountID
        nodecluster: nodecluster
        credential: credential
        zone: zone
        instancetype: instancetype
        state: state
        kversion: kversion
        ResiliencyDomain: ResiliencyDomain
        ResourceNamespace: ResourceNamespace
        os: os
        FaultDomain: FaultDomain
        offlinetime: offlinetime
        PhysicalProximityGroup: PhysicalProximityGroup
        label: label
        tags: "{}"
        connectorversion: connectorversion
        instanceid: instanceid
        controladdress: controladdress
        autoprovisionInfraUUID: autoprovisionInfraUUID
        name: name
        progress: 0
        osversion: osversion
        region: region
        status: status
      properties:
        instanceid:
          type: string
        name:
          minLength: 1
          type: string
        os:
          type: string
        osversion:
          type: string
        kversion:
          type: string
        controladdress:
          type: string
        credential:
          type: string
        accountID:
          type: string
        region:
          type: string
        zone:
          type: string
        ResourceNamespace:
          description: global namespace for resources in account empty if not aviliable/supported
            on cloud provider/node
          type: string
        PhysicalProximityGroup:
          description: identifier of the physical location of the node empty if not
            aviliable/supported on on cloud provider/node
          type: string
        ResiliencyDomain:
          description: virtual domain for the node fault domains if aviliable/supported
            on on cloud provider/node
          type: string
        FaultDomain:
          description: identifier for node in FaultDomain
          type: string
        offlinetime:
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        connectorversion:
          readOnly: true
          type: string
        label:
          type: string
        tags:
          type: object
        cloudprovider:
          type: string
        nodecluster:
          type: string
        autoprovisionInfraUUID:
          readOnly: true
          type: string
        instancetype:
          type: string
      required:
      - name
      - os
      type: object
    NodeVersion:
      example:
        version: version
      properties:
        version:
          type: string
      type: object
    NodeDescribeResponse:
      example:
        volumesMap:
          key:
            replicationvolumegroupname: replicationvolumegroupname
            type: file
            throttlingscheme: throttlingscheme
            zone: zone
            volumerecoveryjob: volumerecoveryjob
            capacitygroup: capacitygroup
            state: state
            zonereplica: zonereplica
            consistencygroup: consistencygroup
            policy: policy
            contentsnapshot: contentsnapshot
            contentvolume: contentvolume
            volumegroupid: volumegroupid
            replicationnode: replicationnode
            flavor: regular
            node: node
            size: 83973
            volumegroupname: volumegroupname
            replicationvolumegroupid: replicationvolumegroupid
            name: name
            volumeid: volumeid
            progress: 1
            maxsize: 6
            status: status
            allowdatamovement: false
      properties:
        volumesMap:
          additionalProperties:
            $ref: '#/components/schemas/Volume'
          description: Map of volume IDs to volume objects
          type: object
      type: object
    RefreshToken:
      example:
        token: token
      properties:
        token:
          type: string
      type: object
    GetTenantRefreshTokenRequest:
      example:
        hostname: hostname
        accesstoken: accesstoken
      properties:
        accesstoken:
          type: string
        hostname:
          type: string
      required:
      - accesstoken
      - hostname
      type: object
    Policy:
      example:
        replicationrpo: 368
        capacityoptimization: capacity
        latencywrite: 0
        resiliencynode: 0
        snapshotkeep: 6
        snapshotminute: 4
        integrity: true
        sed: true
        encryption: true
        failureperformance: true
        updatebyUseremail: updatebyUseremail
        latencyreadcold: 0
        bandwidthwrite: 0
        resiliencymedia: 0
        resiliencyzone: 0
        localzoneread: true
        replicationbandwidth: 1
        iopsread: 0
        resiliencyregion: 0
        snapshotfrequency: snapshotfrequency
        snapshotday: 7
        snapshothour: 1
        colddata: 93
        createdbyuserName: createdbyuserName
        createdtime: createdtime
        bandwidthread: 0
        capacityreservation: 180
        latencyread: 0
        createdbyuseremail: createdbyuseremail
        name: name
        iopswrite: 0
        updatetime: updatetime
        updatebyusername: updatebyusername
      properties:
        name:
          description: A name for the policy. The name can be any non-empty string
            that does not contain a white space.
          minLength: 1
          type: string
        iopswrite:
          description: "Enter the maximum write IOPS that a volume is expected to\
            \ sustain (assuming 8K writes). Write IOPS should be a positive integer\
            \ number. Volumez will guarantee to provide this performance, regardless\
            \ of the volume size or other volumes."
          minimum: 0
          type: integer
        iopsread:
          description: "Enter the maximum read IOPS that a volume is expected to sustain\
            \ (assuming 8K reads). Read IOPS should be a positive integer number.\
            \ Volumez will guarantee to provide this performance, regardless of the\
            \ volume size or other volumes."
          minimum: 0
          type: integer
        bandwidthwrite:
          description: "Enter the maximum write bandwidth that a volume is expected\
            \ to sustain. Write Bandwidth should be a positive integer number. Volumez\
            \ will guarantee to provide this performance, regardless of the volume\
            \ size or other volumes."
          minimum: 0
          type: integer
        bandwidthread:
          description: "Enter the maximum read bandwidth that a volume is expected\
            \ to sustain. Read Bandwidth should be a positive integer number. Volumez\
            \ will guarantee to provide this performance, regardless of the volume\
            \ size or other volumes."
          minimum: 0
          type: integer
        latencywrite:
          description: "Enter the maximum latency that a volume is expected to sustain.\
            \ Write latency should be a positive integer number. Volumez will guarantee\
            \ to provide this performance, regardless of the volume size or other\
            \ volumes."
          minimum: 0
          type: integer
        latencyread:
          description: "Enter the maximum read IOPS that a volume is expected to sustain.\
            \ Read latency should be a positive integer number. Volumez will guarantee\
            \ to provide this performance, regardless of the volume size or other\
            \ volumes."
          minimum: 0
          type: integer
        latencyreadcold:
          description: " If not all the reads are hot (i.e., Percentage of Cold Reads\
            \ is >0) – Enter the more relaxed constraints for read latencies of cold\
            \ data.  Valid values: non-negative integer number, that is larger than\
            \ “Read Latency”."
          minimum: 0
          readOnly: true
          type: integer
        colddata:
          description: "Enter the percentage of the volume’s capacity that is expected\
            \ to be “cold” (i.e. expected to only have infrequent reads). Default\
            \ is 0%. Values that are greater than 0 give Volumez the option to use\
            \ more economic media with more relaxed read performance requirements.\
            \ Valid values: Integers in the range of 0..100."
          maximum: 100
          minimum: 0
          readOnly: true
          type: integer
        localzoneread:
          description: "Setting this value to “Yes” directs Volumez to prefer volume\
            \ configurations where reads are usually happening from disks that are\
            \ in the same zone as the application. This saves east-west network traffic\
            \ across zones, however more media per zone will be required to achieve\
            \ read-IOPs requirements. Set this value to “Yes” if you have network\
            \ constraints (bandwidth or cost) across your zones; otherwise set it\
            \ to “No”."
          type: boolean
        failureperformance:
          description: "Setting this value to “Yes” directs Volumez to over-provision\
            \ volumes in a way that even after having a failure, the volumes will\
            \ have the desired performance. Setting this value to “No” directs Volumez\
            \ to provision volumes according to the desired performance, however in\
            \ a case of failure – performance may be impacted. The default value is\
            \ “No”."
          type: boolean
        capacityoptimization:
          description: "Choosing “Capacity” directs Volumez to prefer using capacity-saving\
            \ methods (such as compression, deduplication, erasure coding and thin\
            \ provisioning) where relevant, in order to consume the minimum amount\
            \ of raw media. Using such methods might take some CPU cycles, and might\
            \ reduce the performance of your volumes (it will still be within the\
            \ range you specified). Choosing “Balanced” directs Volumez to prefer\
            \ using some capacity-saving methods where relevant, in order to use less\
            \ raw media, while consuming a small amount of CPU cycles. “Performance\
            \ Optimized” directs Volumez to avoid using capacity-saving any methods\
            \ (such as compression and deduplication) that reduce media consumption.\
            \ This way applications can get the optimal performance from their media,\
            \ however more raw media might be consumed to provision Performance-Optimized\
            \ volumes."
          enum:
          - capacity
          - balanced
          - performance
          type: string
        capacityreservation:
          description: "Enter how much logical capacity is reserved up-front for the\
            \ applications to use. If more capacity is needed for the volume, it will\
            \ be allocated based on availability of media. Capacities that are reserved\
            \ can be used for the volume itself and for its snapshots. For example\
            \ – Use 0% for thin-provisioned volumes, 130% for thick-provisioned volumes\
            \ with estimated 30% of space for snapshots. Valid values are 0%-500%,\
            \ default is 20%."
          maximum: 500
          minimum: 0
          type: integer
        resiliencymedia:
          description: " Enter how many media failures (e.g. disk, memory card) the\
            \ system is required to sustain, and still serve volumes of this policy.\
            \ A value of “0” means any disk failure will result data unavailability\
            \ and loss. Valid values are 0..3, default value is 2."
          maximum: 2
          minimum: 0
          type: integer
        resiliencynode:
          description: "Enter how many Volumez node (e.g. EC2 instance, server) failures\
            \ the system is required to sustain, and still serve volumes of this policy.\
            \ This is different than “Media failures” because sometimes multiple media\
            \ copies may end on a single node. A value of “0” means any node failure\
            \ will result data unavailability and loss. Valid values are 0..3, default\
            \ value is 1."
          maximum: 2
          minimum: 0
          type: integer
        resiliencyzone:
          description: "Enter how many zones (e.g. AWS availability zones, DataCenters\
            \ Buildings) failures the system is required to sustain, and still serve\
            \ volumes of this policy. Note: zones are assumed to be within the same\
            \ metro distance, and resiliency to zone failures means cross-zone network\
            \ traffic. Valid values are 0..2, default value is 1."
          minimum: 0
          type: integer
        resiliencyregion:
          description: "Enter how many regions (e.g. AWS regions zones, DataCenters\
            \ across continents) failures the system is required to sustain, and still\
            \ serve volumes of this policy. Note: regions are assumed to reside across\
            \ WAN distance, with some bandwidth limitations. Valid values are 0 and\
            \ 1, default value is 0."
          maximum: 1
          minimum: 0
          type: integer
        replicationrpo:
          description: "Enter how many seconds are allowed for the replica to stay\
            \ behind the primary storage. 0 means synchronous replication. Valid values\
            \ are 0..3600, default value is 0. Max value: 3600. (1 hour)."
          maximum: 3600
          minimum: 0
          type: integer
        replicationbandwidth:
          description: Specifies the maximum bandwidth that Volumez is allowed to
            consume for replication of this volume (MB/s). 0 means no bandwidth limitation.
          type: integer
        encryption:
          description: "Enter “YES” to encrypt the data in server where the application\
            \ is running. Note: No change is needed in the applications themselves,\
            \ however encryption will consume some CPU cycles on the application server.\
            \ Default value NO."
          type: boolean
        sed:
          description: "Enter “YES” to direct Volumez to only use media with disk\
            \ encryption capabilities. Note that specifying “NO” can still use such\
            \ media, however it is not a must to use it. Default value: NO."
          type: boolean
        integrity:
          description: "Enter “YES” to direct Volumez to activate the “Device Mapper\
            \ integrity” protection for the volume. This capability provides strong\
            \ integrity checking. Note: No change is needed in the applications themselves,\
            \ however Data Integrity will consume non-negligible CPU cycles on the\
            \ application server. Default value: NO."
          type: boolean
        snapshotkeep:
          type: integer
        snapshotfrequency:
          type: string
        snapshotday:
          type: integer
        snapshothour:
          type: integer
        snapshotminute:
          type: integer
        createdbyuserName:
          type: string
        createdbyuseremail:
          type: string
        createdtime:
          type: string
        updatebyusername:
          type: string
        updatebyUseremail:
          type: string
        updatetime:
          type: string
      required:
      - capacityoptimization
      - name
      type: object
    VolumeGroup:
      example:
        cachemediasize: 1
        attachments:
        - node: node
          allocated_resources: 50
          snapshotid: snapshotid
          volumename: volumename
          readonly: true
          volumeid: volumeid
          progress: 1
          snapshotname: snapshotname
          state: state
          status: status
          mountpoint: mountpoint
        - node: node
          allocated_resources: 50
          snapshotid: snapshotid
          volumename: volumename
          readonly: true
          volumeid: volumeid
          progress: 1
          snapshotname: snapshotname
          state: state
          status: status
          mountpoint: mountpoint
        cachemediabandwidthwrite: 1
        writecache: true
        mediasize: 5
        Volumegroupname: Volumegroupname
        targetsecret: targetsecret
        deduplication: true
        media:
        - media
        - media
        cachesize: 2
        cachemediaiopsread: 7
        encryption: true
        cachemedia:
        - cachemedia
        - cachemedia
        redundancy: 0
        raidcolumns: 5
        allocatedsize: 1
        cachemediabandwidthread: 1
        mediaiopswrite: 9
        cacheraidcolumns: 7
        allocation: allocation
        cacheredundancy: 4
        cacheresiliency: cacheresiliency
        resiliency: resiliency
        mediabandwidthwrite: 2
        mediabandwidthread: 7
        size: 6
        cachemediaiopswrite: 6
        mediaiopsread: 3
        compression: true
        Integrity: true
      properties:
        Volumegroupname:
          readOnly: true
          type: string
        encryption:
          type: boolean
        Integrity:
          type: boolean
        allocation:
          type: string
        compression:
          type: boolean
        deduplication:
          type: boolean
        writecache:
          type: boolean
        redundancy:
          type: integer
        size:
          type: integer
        targetsecret:
          minLength: 1
          title: Target connect secret
          type: string
        allocatedsize:
          type: integer
        resiliency:
          type: string
        raidcolumns:
          type: integer
        mediasize:
          type: integer
        mediabandwidthwrite:
          type: integer
        mediabandwidthread:
          type: integer
        mediaiopswrite:
          type: integer
        mediaiopsread:
          type: integer
        media:
          items:
            type: string
          type: array
        cachesize:
          type: integer
        cacheresiliency:
          type: string
        cacheredundancy:
          type: integer
        cacheraidcolumns:
          type: integer
        cachemediasize:
          type: integer
        cachemediabandwidthwrite:
          type: integer
        cachemediabandwidthread:
          type: integer
        cachemediaiopswrite:
          type: integer
        cachemediaiopsread:
          type: integer
        cachemedia:
          items:
            type: string
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
      type: object
    TenantCreateAdminUserRequest:
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 8
          type: string
        name:
          maxLength: 50
          minLength: 1
          type: string
        cloudprovider:
          minLength: 1
          type: string
        markettoken:
          minLength: 1
          type: string
      required:
      - email
      - name
      - password
      type: object
    TenantCreateUserRequest:
      properties:
        email:
          minLength: 1
          type: string
          x-isnullable: false
          x-omitempty: false
        password:
          minLength: 8
          type: string
          x-isnullable: false
          x-omitempty: false
        name:
          maxLength: 50
          minLength: 1
          type: string
          x-isnullable: false
          x-omitempty: false
      required:
      - email
      - name
      - password
      type: object
    SignIn:
      properties:
        email:
          minLength: 1
          type: string
        password:
          minLength: 8
          type: string
      required:
      - email
      - password
      type: object
    SignoutRequest:
      properties:
        AccessToken:
          minLength: 1
          type: string
      required:
      - AccessToken
      type: object
    SignInResponse:
      example:
        IdToken: IdToken
        ExpiresIn: 0
        TokenType: TokenType
        RefreshToken: RefreshToken
        AccessToken: AccessToken
      properties:
        AccessToken:
          type: string
          x-omitempty: false
          x-isnullable: false
        IdToken:
          type: string
          x-omitempty: false
          x-isnullable: false
        RefreshToken:
          type: string
          x-omitempty: false
          x-isnullable: false
        ExpiresIn:
          type: integer
          x-omitempty: false
          x-isnullable: false
        TokenType:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - AccessToken
      - ExpiresIn
      - IdToken
      - RefreshToken
      - TokenType
      type: object
    ErrorResponse:
      example:
        Message: Message
        message: message
      properties:
        Message:
          type: string
          x-omitempty: false
          x-isnullable: false
        message:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    RegularResponse:
      example:
        Message: Message
      properties:
        Message:
          type: string
      type: object
    VolumePlanOutput:
      example:
        Plans:
        - volumegroup:
            cachemediasize: 1
            attachments:
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            cachemediabandwidthwrite: 1
            writecache: true
            mediasize: 5
            Volumegroupname: Volumegroupname
            targetsecret: targetsecret
            deduplication: true
            media:
            - media
            - media
            cachesize: 2
            cachemediaiopsread: 7
            encryption: true
            cachemedia:
            - cachemedia
            - cachemedia
            redundancy: 0
            raidcolumns: 5
            allocatedsize: 1
            cachemediabandwidthread: 1
            mediaiopswrite: 9
            cacheraidcolumns: 7
            allocation: allocation
            cacheredundancy: 4
            cacheresiliency: cacheresiliency
            resiliency: resiliency
            mediabandwidthwrite: 2
            mediabandwidthread: 7
            size: 6
            cachemediaiopswrite: 6
            mediaiopsread: 3
            compression: true
            Integrity: true
          replicationvolumegroup:
            cachemediasize: 1
            attachments:
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            cachemediabandwidthwrite: 1
            writecache: true
            mediasize: 5
            Volumegroupname: Volumegroupname
            targetsecret: targetsecret
            deduplication: true
            media:
            - media
            - media
            cachesize: 2
            cachemediaiopsread: 7
            encryption: true
            cachemedia:
            - cachemedia
            - cachemedia
            redundancy: 0
            raidcolumns: 5
            allocatedsize: 1
            cachemediabandwidthread: 1
            mediaiopswrite: 9
            cacheraidcolumns: 7
            allocation: allocation
            cacheredundancy: 4
            cacheresiliency: cacheresiliency
            resiliency: resiliency
            mediabandwidthwrite: 2
            mediabandwidthread: 7
            size: 6
            cachemediaiopswrite: 6
            mediaiopsread: 3
            compression: true
            Integrity: true
        - volumegroup:
            cachemediasize: 1
            attachments:
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            cachemediabandwidthwrite: 1
            writecache: true
            mediasize: 5
            Volumegroupname: Volumegroupname
            targetsecret: targetsecret
            deduplication: true
            media:
            - media
            - media
            cachesize: 2
            cachemediaiopsread: 7
            encryption: true
            cachemedia:
            - cachemedia
            - cachemedia
            redundancy: 0
            raidcolumns: 5
            allocatedsize: 1
            cachemediabandwidthread: 1
            mediaiopswrite: 9
            cacheraidcolumns: 7
            allocation: allocation
            cacheredundancy: 4
            cacheresiliency: cacheresiliency
            resiliency: resiliency
            mediabandwidthwrite: 2
            mediabandwidthread: 7
            size: 6
            cachemediaiopswrite: 6
            mediaiopsread: 3
            compression: true
            Integrity: true
          replicationvolumegroup:
            cachemediasize: 1
            attachments:
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            - node: node
              allocated_resources: 50
              snapshotid: snapshotid
              volumename: volumename
              readonly: true
              volumeid: volumeid
              progress: 1
              snapshotname: snapshotname
              state: state
              status: status
              mountpoint: mountpoint
            cachemediabandwidthwrite: 1
            writecache: true
            mediasize: 5
            Volumegroupname: Volumegroupname
            targetsecret: targetsecret
            deduplication: true
            media:
            - media
            - media
            cachesize: 2
            cachemediaiopsread: 7
            encryption: true
            cachemedia:
            - cachemedia
            - cachemedia
            redundancy: 0
            raidcolumns: 5
            allocatedsize: 1
            cachemediabandwidthread: 1
            mediaiopswrite: 9
            cacheraidcolumns: 7
            allocation: allocation
            cacheredundancy: 4
            cacheresiliency: cacheresiliency
            resiliency: resiliency
            mediabandwidthwrite: 2
            mediabandwidthread: 7
            size: 6
            cachemediaiopswrite: 6
            mediaiopsread: 3
            compression: true
            Integrity: true
        Message: Message
        Success: true
      properties:
        Message:
          type: string
        Success:
          type: boolean
        Plans:
          items:
            $ref: '#/components/schemas/Plan'
          type: array
      type: object
    SuccessJobResponse:
      example:
        Message: Message
        ObjectID: ObjectID
        JobID: JobID
      properties:
        Message:
          type: string
        JobID:
          type: string
        ObjectID:
          type: string
      type: object
    ChangePasswordRequest:
      properties:
        password:
          type: string
        name:
          type: string
        guid:
          type: string
      type: object
    ChangePasswordRequestLoggedIn:
      example:
        oldPassword: oldPassword
        oldpassword: oldpassword
        newPassword: newPassword
        newpassword: newpassword
        email: email
      properties:
        oldpassword:
          type: string
        email:
          type: string
          x-omitempty: false
          x-isnullable: false
        newpassword:
          type: string
        oldPassword:
          type: string
          x-omitempty: false
          x-isnullable: false
        newPassword:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    RequestChangePasswordRequest:
      properties:
        email:
          type: string
      type: object
    CapacityGroup:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    VersionResponse:
      example:
        componentName: componentName
        version: version
      properties:
        version:
          type: string
        componentName:
          type: string
      type: object
    SignUpResponse:
      example:
        message: message
        status: 0
      properties:
        status:
          type: integer
        message:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - message
      type: object
    TenantTokenResponse:
      example:
        TokenType: TokenType
        ExpiresIn: 0
        AccessToken: AccessToken
      properties:
        AccessToken:
          type: string
        TokenType:
          type: string
        ExpiresIn:
          type: integer
      required:
      - AccessToken
      - ExpiresIn
      - TokenType
      type: object
    RefreshTokenResponse:
      example:
        IdToken: IdToken
        TokenType: TokenType
        AccessToken: AccessToken
        AccessTokenExpiration: AccessTokenExpiration
        IdTokenExpiration: IdTokenExpiration
      properties:
        AccessToken:
          type: string
        IdToken:
          type: string
        AccessTokenExpiration:
          type: string
        IdTokenExpiration:
          type: string
        TokenType:
          type: string
      type: object
    TenantHostDeleteResponse:
      example:
        Message: Message
        StatusCode: 0
      properties:
        StatusCode:
          format: int32
          type: integer
        Message:
          type: string
      required:
      - StatusCode
      type: object
    Network:
      example:
        zone: zone
        name: name
        ipend: ipend
        type: management
        ipstart: ipstart
      properties:
        name:
          minLength: 1
          type: string
        zone:
          minLength: 1
          type: string
        type:
          enum:
          - management
          - storage
          type: string
        ipstart:
          pattern: "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\
            .){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\
            .){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
          type: string
        ipend:
          pattern: "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\
            .){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\\
            .){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
          type: string
      required:
      - ipend
      - ipstart
      - name
      - type
      type: object
    Tags:
      additionalProperties:
        type: string
      type: object
    Job:
      example:
        args: "{}"
        progress: 6
        endtime: endtime
        id: 0
        state: state
        starttime: starttime
        type: type
        object: object
        status: status
        username: username
        useremail: useremail
      properties:
        id:
          type: integer
        type:
          type: string
        object:
          type: string
        args:
          type: object
        state:
          type: string
        status:
          type: string
        progress:
          type: integer
        starttime:
          type: string
        endtime:
          type: string
        username:
          type: string
        useremail:
          type: string
      type: object
    Snapshot:
      example:
        snapshotid: snapshotid
        volumename: volumename
        targetsecret: targetsecret
        used: 6
        consistency: crash
        volumeid: volumeid
        volumesize: 0
        name: name
        progress: 1
        time: time
        state: state
        consistencygroup: true
        numberofattachments: 5
        policy: true
        consistencygroupname: consistencygroupname
        status: status
      properties:
        volumename:
          title: Volume name
          type: string
        volumeid:
          minLength: 1
          readOnly: true
          title: Volume ID
          type: string
        volumesize:
          readOnly: true
          type: integer
        name:
          minLength: 1
          title: Snapshot name
          type: string
        snapshotid:
          minLength: 1
          readOnly: true
          title: Snapshot ID
          type: string
        targetsecret:
          minLength: 1
          title: Target connect secret
          type: string
        consistency:
          enum:
          - crash
          - application
          type: string
        time:
          type: string
        policy:
          type: boolean
        consistencygroup:
          type: boolean
        consistencygroupname:
          type: string
        used:
          type: integer
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        numberofattachments:
          readOnly: true
          type: integer
      required:
      - consistency
      - name
      type: object
    Attachment:
      example:
        node: node
        allocated_resources: 50
        snapshotid: snapshotid
        volumename: volumename
        readonly: true
        volumeid: volumeid
        progress: 1
        snapshotname: snapshotname
        state: state
        status: status
        mountpoint: mountpoint
      properties:
        volumename:
          title: Volume name
          type: string
        volumeid:
          readOnly: true
          title: Volume ID
          type: string
        snapshotname:
          title: Snapshot Name
          type: string
        snapshotid:
          readOnly: true
          title: Snapshot ID
          type: string
        node:
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        mountpoint:
          title: Mount point
          type: string
        readonly:
          title: Read Only
          type: boolean
        allocated_resources:
          maximum: 100
          minimum: 1
          title: Allocated performance resources
          type: integer
      required:
      - node
      type: object
    Media:
      example:
        bus: bus
        latencywrite: 3
        freebandwidthread: 1
        media: media
        lbaformats:
        - lbaformats
        - lbaformats
        cloudprovider: cloudprovider
        accountID: accountID
        sed: true
        zone: zone
        capacitygroup: capacitygroup
        model: model
        freeiopsread: 4
        freeiopswrite: 7
        state: state
        firmware: firmware
        ResiliencyDomain: ResiliencyDomain
        bandwidthwrite: 2
        ResourceNamespace: ResourceNamespace
        assignment: assignment
        FaultDomain: FaultDomain
        iopsread: 1
        offlinetime: offlinetime
        PhysicalProximityGroup: PhysicalProximityGroup
        freebandwidthwrite: 1
        mediaid: mediaid
        sectorsize: 6
        bandwidthread: 5
        node: node
        freesize: 2
        size: 0
        latencyread: 9
        BandwidthReserved: 7
        progress: 6
        location: location
        iopswrite: 5
        region: region
        volumescount: 1
        status: status
      properties:
        mediaid:
          type: string
        size:
          type: integer
        model:
          type: string
        media:
          type: string
        bus:
          type: string
        location:
          type: string
        sed:
          type: boolean
        node:
          type: string
        cloudprovider:
          type: string
        accountID:
          description: the media node ResourceNamespace
          type: string
        region:
          type: string
        zone:
          type: string
        ResourceNamespace:
          description: the media node ResourceNamespace
          type: string
        PhysicalProximityGroup:
          description: the media node PhysicalProximityGroup
          type: string
        ResiliencyDomain:
          description: the media node ResiliencyDomain
          type: string
        FaultDomain:
          description: the media node FaultDomain
          type: string
        firmware:
          type: string
        sectorsize:
          type: integer
        iopsread:
          type: integer
        iopswrite:
          type: integer
        bandwidthread:
          type: integer
        bandwidthwrite:
          type: integer
        BandwidthReserved:
          type: integer
        latencyread:
          type: integer
        latencywrite:
          type: integer
        offlinetime:
          type: string
        freesize:
          type: integer
        freeiopsread:
          type: integer
        freeiopswrite:
          type: integer
        freebandwidthread:
          type: integer
        freebandwidthwrite:
          type: integer
        volumescount:
          description: count of how many volumes are using the media
          readOnly: true
          type: integer
        assignment:
          readOnly: true
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        capacitygroup:
          description: the capacity group this media belongs to
          readOnly: true
          type: string
        lbaformats:
          description: Available LBA formats for the media — ensure the block size
            specified in the media assignment matches one of these formats
          items:
            type: string
          type: array
      type: object
    MediaModify:
      example:
        offlinetime: offlinetime
      properties:
        offlinetime:
          type: string
      type: object
    MediaProfile:
      example:
        bandwidthwrite: 5
        latencywrite: 2
        freebandwidthread: 3
        latencyread: 5
        iopsread: 0
        iopswrite: 6
        freeiopsread: 7
        freeiopswrite: 9
        freebandwidthwrite: 2
        bandwidthread: 1
      properties:
        iopsread:
          type: integer
        iopswrite:
          type: integer
        bandwidthread:
          type: integer
        bandwidthwrite:
          type: integer
        latencyread:
          type: integer
        latencywrite:
          type: integer
        freeiopsread:
          type: integer
        freeiopswrite:
          type: integer
        freebandwidthread:
          type: integer
        freebandwidthwrite:
          type: integer
      type: object
    VirtualMediaCreate:
      example:
        flavor: stripped
        selector: selector
      properties:
        selector:
          minLength: 1
          type: string
        flavor:
          enum:
          - stripped
          - raid1
          - split
          type: string
      type: object
    VirtualMedia:
      example:
        flavor: stripped
        members:
        - members
        - members
        media:
          bus: bus
          latencywrite: 3
          freebandwidthread: 1
          media: media
          lbaformats:
          - lbaformats
          - lbaformats
          cloudprovider: cloudprovider
          accountID: accountID
          sed: true
          zone: zone
          capacitygroup: capacitygroup
          model: model
          freeiopsread: 4
          freeiopswrite: 7
          state: state
          firmware: firmware
          ResiliencyDomain: ResiliencyDomain
          bandwidthwrite: 2
          ResourceNamespace: ResourceNamespace
          assignment: assignment
          FaultDomain: FaultDomain
          iopsread: 1
          offlinetime: offlinetime
          PhysicalProximityGroup: PhysicalProximityGroup
          freebandwidthwrite: 1
          mediaid: mediaid
          sectorsize: 6
          bandwidthread: 5
          node: node
          freesize: 2
          size: 0
          latencyread: 9
          BandwidthReserved: 7
          progress: 6
          location: location
          iopswrite: 5
          region: region
          volumescount: 1
          status: status
      properties:
        media:
          $ref: '#/components/schemas/Media'
        flavor:
          enum:
          - stripped
          - raid1
          type: string
        members:
          items:
            type: string
          type: array
      type: object
    Plan:
      example:
        volumegroup:
          cachemediasize: 1
          attachments:
          - node: node
            allocated_resources: 50
            snapshotid: snapshotid
            volumename: volumename
            readonly: true
            volumeid: volumeid
            progress: 1
            snapshotname: snapshotname
            state: state
            status: status
            mountpoint: mountpoint
          - node: node
            allocated_resources: 50
            snapshotid: snapshotid
            volumename: volumename
            readonly: true
            volumeid: volumeid
            progress: 1
            snapshotname: snapshotname
            state: state
            status: status
            mountpoint: mountpoint
          cachemediabandwidthwrite: 1
          writecache: true
          mediasize: 5
          Volumegroupname: Volumegroupname
          targetsecret: targetsecret
          deduplication: true
          media:
          - media
          - media
          cachesize: 2
          cachemediaiopsread: 7
          encryption: true
          cachemedia:
          - cachemedia
          - cachemedia
          redundancy: 0
          raidcolumns: 5
          allocatedsize: 1
          cachemediabandwidthread: 1
          mediaiopswrite: 9
          cacheraidcolumns: 7
          allocation: allocation
          cacheredundancy: 4
          cacheresiliency: cacheresiliency
          resiliency: resiliency
          mediabandwidthwrite: 2
          mediabandwidthread: 7
          size: 6
          cachemediaiopswrite: 6
          mediaiopsread: 3
          compression: true
          Integrity: true
        replicationvolumegroup:
          cachemediasize: 1
          attachments:
          - node: node
            allocated_resources: 50
            snapshotid: snapshotid
            volumename: volumename
            readonly: true
            volumeid: volumeid
            progress: 1
            snapshotname: snapshotname
            state: state
            status: status
            mountpoint: mountpoint
          - node: node
            allocated_resources: 50
            snapshotid: snapshotid
            volumename: volumename
            readonly: true
            volumeid: volumeid
            progress: 1
            snapshotname: snapshotname
            state: state
            status: status
            mountpoint: mountpoint
          cachemediabandwidthwrite: 1
          writecache: true
          mediasize: 5
          Volumegroupname: Volumegroupname
          targetsecret: targetsecret
          deduplication: true
          media:
          - media
          - media
          cachesize: 2
          cachemediaiopsread: 7
          encryption: true
          cachemedia:
          - cachemedia
          - cachemedia
          redundancy: 0
          raidcolumns: 5
          allocatedsize: 1
          cachemediabandwidthread: 1
          mediaiopswrite: 9
          cacheraidcolumns: 7
          allocation: allocation
          cacheredundancy: 4
          cacheresiliency: cacheresiliency
          resiliency: resiliency
          mediabandwidthwrite: 2
          mediabandwidthread: 7
          size: 6
          cachemediaiopswrite: 6
          mediaiopsread: 3
          compression: true
          Integrity: true
      properties:
        volumegroup:
          $ref: '#/components/schemas/VolumeGroup'
        replicationvolumegroup:
          $ref: '#/components/schemas/VolumeGroup'
      required:
      - volumegroup
      type: object
    Connectivity:
      example:
        mediaprotocol: mediaprotocol
        replicationbandwidth: 0
        zones1: zones1
        systemtypes1: systemtypes1
        zones2: zones2
        name: name
        systemtypes2: systemtypes2
        replicationprotocol: replicationprotocol
      properties:
        name:
          type: string
        zones1:
          type: string
        systemtypes1:
          pattern: "^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$"
          type: string
        zones2:
          type: string
        systemtypes2:
          pattern: "^(?:(?:rhel|sles|amzn|ubuntu)[, ])*(?:rhel|sles|amzn|ubuntu)$"
          type: string
        mediaprotocol:
          type: string
        replicationprotocol:
          type: string
        replicationbandwidth:
          minimum: 0
          type: integer
      required:
      - mediaprotocol
      - name
      - replicationprotocol
      - systemtypes1
      - systemtypes2
      - zones1
      - zones2
      type: object
    RepairCmds:
      example:
        cmds:
        - cmds
        - cmds
        checksum: checksum
        message: message
      properties:
        cmds:
          items:
            type: string
          minItems: 1
          type: array
        checksum:
          minLength: 1
          type: string
        message:
          type: string
      required:
      - checksum
      - cmds
      type: object
    Alert:
      example:
        severity: Info
        cleartime: cleartime
        lastsendtime: lastsendtime
        details: details
        alertid: alertid
        state: Active
        creationtime: creationtime
        type: StateChange
        objecttype: Media
        objectid: objectid
      properties:
        alertid:
          minLength: 1
          readOnly: true
          title: Alert ID
          type: string
        type:
          enum:
          - StateChange
          - ProcessFailed
          - ThresholdReached
          minLength: 1
          readOnly: true
          title: Alert Type
          type: string
        state:
          enum:
          - Active
          - Acknowledged
          - Cleared
          minLength: 1
          readOnly: true
          title: Alert State
          type: string
        severity:
          enum:
          - Info
          - Warning
          - Critical
          - Fatal
          minLength: 1
          readOnly: true
          title: Alert Severity
          type: string
        objecttype:
          enum:
          - Media
          - Node
          - Volume
          - Snapshot
          - Attachment
          minLength: 1
          readOnly: true
          title: Alert Underlying Object Type
          type: string
        objectid:
          minLength: 1
          readOnly: true
          title: Alert Underlying Object ID
          type: string
        creationtime:
          minLength: 1
          readOnly: true
          title: Alert Creation Time
          type: string
        lastsendtime:
          minLength: 1
          readOnly: true
          title: Alert Last Send Time
          type: string
        cleartime:
          minLength: 1
          readOnly: true
          title: Alert Clear Time
          type: string
        details:
          minLength: 1
          readOnly: true
          title: Alert Details (according to alert type)
          type: string
      type: object
    GetTenantIDResponse:
      example:
        TenantID: TenantID
        Message: Message
        StatusCode: 0
      properties:
        StatusCode:
          type: integer
        Message:
          type: string
        TenantID:
          type: string
      required:
      - StatusCode
      type: object
    GetTenantHostResponse:
      example:
        TenantHost: TenantHost
        TenantID: TenantID
        Message: Message
        StatusCode: 0
      properties:
        StatusCode:
          format: int32
          type: integer
        Message:
          type: string
        TenantHost:
          type: string
        TenantID:
          type: string
      required:
      - StatusCode
      type: object
    GetTenanUserResponse:
      properties:
        StatusCode:
          type: integer
        Message:
          type: string
        Email:
          type: string
        Name:
          type: string
        TenantID:
          type: string
      type: object
    AssociationCreate:
      example:
        volume: volume
        name: name
        selector: selector
        snapshot: snapshot
        mountpoint: mountpoint
      properties:
        name:
          title: name
          type: string
        volume:
          title: Volume
          type: string
        snapshot:
          minLength: 1
          title: Snapshot
          type: string
        mountpoint:
          title: Mount point
          type: string
        selector:
          minLength: 1
          type: string
      type: object
    AssociationModify:
      example:
        name: name
        selector: selector
        snapshot: snapshot
      properties:
        name:
          title: name
          type: string
        snapshot:
          minLength: 1
          title: Snapshot
          type: string
        selector:
          minLength: 1
          type: string
      type: object
    Association:
      example:
        snapshotid: snapshotid
        volumename: volumename
        name: name
        volumeid: volumeid
        snapshotname: snapshotname
        id: id
        state: state
        status: status
      properties:
        name:
          title: name
          type: string
        id:
          title: id
          type: string
        volumename:
          title: Volume name
          type: string
        volumeid:
          minLength: 1
          readOnly: true
          title: Volume ID
          type: string
        snapshotname:
          minLength: 1
          title: Snapshot name
          type: string
        snapshotid:
          minLength: 1
          title: Snapshot ID
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
      type: object
    ExportCreate:
      example:
        protocol: protocol
        snapshotid: snapshotid
        nodes:
        - node: node
          role: role
        - node: node
          role: role
        target_name: target_name
        volumeid: volumeid
        allowed_hosts:
        - allowed_hosts
        - allowed_hosts
        authentication:
          method: method
          chap:
            password: password
            user: user
      properties:
        target_name:
          title: name
          type: string
        protocol:
          title: protocol
          type: string
        authentication:
          $ref: '#/components/schemas/Authentication'
        volumeid:
          title: Volume ID
          type: string
        snapshotid:
          title: Snapshot ID
          type: string
        allowed_hosts:
          items:
            type: string
          minItems: 1
          type: array
        nodes:
          items:
            $ref: '#/components/schemas/ExportCreate_nodes_inner'
          minItems: 1
          type: array
      type: object
    ExportModify:
      example:
        nodes:
        - node: node
          role: role
        - node: node
          role: role
        allowed_hosts:
        - allowed_hosts
        - allowed_hosts
      properties:
        allowed_hosts:
          items:
            type: string
          minItems: 1
          type: array
        nodes:
          items:
            $ref: '#/components/schemas/ExportCreate_nodes_inner'
          minItems: 1
          type: array
      type: object
    Export:
      example:
        volumename: volumename
        xqn: xqn
        progress: 0
        snapshotname: snapshotname
        id: id
        state: state
        params:
          protocol: protocol
          snapshotid: snapshotid
          nodes:
          - node: node
            role: role
          - node: node
            role: role
          target_name: target_name
          volumeid: volumeid
          allowed_hosts:
          - allowed_hosts
          - allowed_hosts
          authentication:
            method: method
            chap:
              password: password
              user: user
        ports:
        - address: address
          port: port
        - address: address
          port: port
        status: status
        wwn: wwn
      properties:
        id:
          title: Export ID
          type: string
        params:
          $ref: '#/components/schemas/ExportCreate'
        volumename:
          title: Volume name
          type: string
        snapshotname:
          title: Snapshot Name
          type: string
        state:
          readOnly: true
          type: string
        status:
          readOnly: true
          type: string
        progress:
          readOnly: true
          type: integer
        xqn:
          readOnly: true
          type: string
        wwn:
          readOnly: true
          type: string
        ports:
          items:
            $ref: '#/components/schemas/StoragePort'
          type: array
      type: object
    Authentication:
      example:
        method: method
        chap:
          password: password
          user: user
      properties:
        method:
          title: method
          type: string
        chap:
          $ref: '#/components/schemas/Authentication_chap'
      type: object
    StoragePort:
      example:
        address: address
        port: port
      properties:
        address:
          title: Address
          type: string
        port:
          title: Port
          type: string
      type: object
    MachineInfo:
      example:
        instanceid: instanceid
        imageid: imageid
        zone: zone
        controladdress: controladdress
        instancetype: instancetype
        sha: sha
      properties:
        instanceid:
          type: string
        instancetype:
          title: instance type
          type: string
        controladdress:
          type: string
        imageid:
          type: string
        zone:
          type: string
        sha:
          type: string
      type: object
    CloudProviderType:
      enum:
      - aws
      - azure
      type: string
    Region:
      type: string
    NodeId:
      type: string
    CreateAwsRoleRequest:
      example:
        externalId: externalId
        arn: arn
      properties:
        arn:
          type: string
          x-omitempty: false
          x-isnullable: false
        externalId:
          type: string
          x-omitempty: true
          x-isnullable: true
    CreateAzureRoleRequest:
      example:
        activeDirectoryId: activeDirectoryId
        secret:
          id: id
          value: value
        applicationId: applicationId
        subscriptionId: subscriptionId
      properties:
        activeDirectoryId:
          type: string
          x-omitempty: false
          x-isnullable: false
        applicationId:
          type: string
          x-omitempty: false
          x-isnullable: false
        subscriptionId:
          type: string
          x-omitempty: false
          x-isnullable: false
        secret:
          $ref: '#/components/schemas/AzureSecret'
    CreateRoleRequest:
      example:
        azureRole:
          activeDirectoryId: activeDirectoryId
          secret:
            id: id
            value: value
          applicationId: applicationId
          subscriptionId: subscriptionId
        cloudProvider: aws
        awsRole:
          externalId: externalId
          arn: arn
      properties:
        cloudProvider:
          $ref: '#/components/schemas/CloudProviderType'
        awsRole:
          $ref: '#/components/schemas/CreateAwsRoleRequest'
        azureRole:
          $ref: '#/components/schemas/CreateAzureRoleRequest'
      type: object
    UpdateAwsRoleRequest:
      example:
        externalId: externalId
        arn: arn
      properties:
        arn:
          type: string
          x-omitempty: true
          x-isnullable: true
        externalId:
          type: string
          x-omitempty: true
          x-isnullable: true
      type: object
    UpdateAzureRoleRequest:
      example:
        activeDirectoryId: activeDirectoryId
        secret:
          id: id
          value: value
        applicationId: applicationId
      properties:
        applicationId:
          type: string
          x-omitempty: false
          x-isnullable: false
        activeDirectoryId:
          type: string
          x-omitempty: true
          x-isnullable: true
        secret:
          $ref: '#/components/schemas/AzureSecret'
      type: object
    UpdateRoleRequest:
      example:
        azureRole:
          activeDirectoryId: activeDirectoryId
          secret:
            id: id
            value: value
          applicationId: applicationId
        cloudProvider: aws
        awsRole:
          externalId: externalId
          arn: arn
      properties:
        cloudProvider:
          $ref: '#/components/schemas/CloudProviderType'
        awsRole:
          $ref: '#/components/schemas/UpdateAwsRoleRequest'
        azureRole:
          $ref: '#/components/schemas/UpdateAzureRoleRequest'
      type: object
    EmptyResponse:
      type: object
      x-isnullable: false
      x-omitempty: false
    HealthCheckResponse:
      example:
        message: Message
      properties:
        message:
          type: string
          x-omitempty: false
          x-isnullable: false
        StatusCode:
          type: integer
          x-omitempty: false
          x-isnullable: false
        Message:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - StatusCode
      type: object
    CreateRoleResponse:
      $ref: '#/components/schemas/EmptyResponse'
    UpdateRoleResponse:
      $ref: '#/components/schemas/EmptyResponse'
    GetRolesResponse:
      example:
        roles:
        - azureRole:
            activeDirectoryId: activeDirectoryId
            secretId: secretId
            applicationId: applicationId
          cloudProvider:
            accountID: accountID
            type: aws
          awsRole:
            externalId: externalId
            arn: arn
        - azureRole:
            activeDirectoryId: activeDirectoryId
            secretId: secretId
            applicationId: applicationId
          cloudProvider:
            accountID: accountID
            type: aws
          awsRole:
            externalId: externalId
            arn: arn
      properties:
        roles:
          items:
            $ref: '#/components/schemas/GetRolesResponse_roles_inner'
          type: array
      required:
      - roles
      type: object
    CloudProvider:
      example:
        accountID: accountID
        type: aws
      properties:
        type:
          $ref: '#/components/schemas/CloudProviderType'
        accountID:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - accountID
      - type
      type: object
    CloudProviderAccountId:
      type: string
    AWSRoleItem:
      example:
        externalId: externalId
        arn: arn
      nullable: true
      properties:
        arn:
          type: string
          x-omitempty: false
          x-isnullable: false
        externalId:
          type: string
          x-omitempty: true
          x-isnullable: false
      required:
      - arn
      type: object
      x-omitempty: true
      x-isnullable: true
    AzureRoleItem:
      example:
        activeDirectoryId: activeDirectoryId
        secretId: secretId
        applicationId: applicationId
      nullable: true
      properties:
        activeDirectoryId:
          type: string
          x-omitempty: false
          x-isnullable: false
        applicationId:
          type: string
          x-omitempty: false
          x-isnullable: false
        secretId:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - activeDirectoryId
      - applicationId
      - secretId
      type: object
      x-omitempty: true
      x-isnullable: true
    AvailableVPCItem:
      example:
        subnetId: subnetId
        resourceGroup: resourceGroup
        isDefault: true
        name: name
        id: id
        subnetName: subnetName
      properties:
        id:
          type: string
        name:
          type: string
        subnetId:
          type: string
        subnetName:
          type: string
        isDefault:
          type: boolean
        resourceGroup:
          type: string
      required:
      - id
      - name
      - subnetId
      type: object
    GetVMVPCsResponse:
      additionalProperties:
        items:
          $ref: '#/components/schemas/AvailableVPCItem'
        type: array
      example:
      - Zone1:
        - id: VpcId1
          subnetId: VpcSubnetId1
        - Id: VpcId2
          SubnetId: VpcSubnetId2
        Zone2:
          id: VpcId3
          subnetId: VpcSubnetId3
      type: object
    VMRegionZones:
      additionalProperties:
        items:
          type: string
        type: array
      example:
      - Region1:
        - Zone1
        - Zone2
        - Zone3
        Region2:
        - Zone4
        - Zone5
      type: object
    AzureVMRegionZones:
      additionalProperties:
        $ref: '#/components/schemas/AzureVMRegion'
      type: object
    AzureVMRegion:
      example:
        regionDisplayName: regionDisplayName
        zones:
        - zones
        - zones
      properties:
        regionDisplayName:
          type: string
          x-omitempty: false
          x-isnullable: false
        zones:
          items:
            type: string
          type: array
      type: object
    GetVmRegionZonesResponse:
      example:
        aws:
        - Region1:
          - Zone1
          - Zone2
          - Zone3
          Region2:
          - Zone4
          - Zone5
        azure:
          key:
            regionDisplayName: regionDisplayName
            zones:
            - zones
            - zones
      properties:
        aws:
          additionalProperties:
            items:
              type: string
            type: array
          example:
          - Region1:
            - Zone1
            - Zone2
            - Zone3
            Region2:
            - Zone4
            - Zone5
          type: object
        azure:
          additionalProperties:
            $ref: '#/components/schemas/AzureVMRegion'
          type: object
      type: object
    AzureSecret:
      example:
        id: id
        value: value
      properties:
        id:
          type: string
          x-omitempty: false
          x-isnullable: false
        value:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    GetVMMetadataResponse:
      example:
        vpc:
          subnetId: subnetId
          resourceGroup: resourceGroup
          isDefault: true
          name: name
          id: id
          subnetName: subnetName
      properties:
        vpc:
          $ref: '#/components/schemas/AvailableVPCItem'
      type: object
    OSType:
      enum:
      - ubuntu
      - rhel
      type: string
    ProviderPriceItem:
      example:
        storageType: storageType
        volumeBasePrice: 0.8008282
        volumeTotalPrice: 6.0274563
      properties:
        storageType:
          type: string
          x-omitempty: false
          x-isnullable: false
        volumeBasePrice:
          format: float
          type: number
          x-omitempty: false
          x-isnullable: false
        volumeTotalPrice:
          format: float
          type: number
          x-omitempty: false
          x-isnullable: false
      required:
      - storageType
      - volumeBasePrice
      - volumeTotalPrice
      type: object
    CreateInfraPlanRequest:
      example:
        accountId: accountId
        size: 5
        cloudProvider: aws
        osType: ubuntu
        region: region
        zones:
        - zones
        - zones
        policy:
          settings:
            bandwidthWrite: 0
            resiliencyMedia: 0
            latencyReadCold: 0
            snapshotDay: 7
            integrity: true
            sed: true
            encryption: true
            capacityReservation: 180
            resiliencyZone: 0
            snapshotMinute: 4
            iopsRead: 0
            resiliencyNode: 0
            iopsWrite: 0
            snapshotKeep: 6
            failurePerformance: true
            snapshotFrequency: snapshotFrequency
            latencyRead: 0
            resiliencyRegion: 0
            latencyWrite: 0
            replicationRpo: 368
            capacityOptimization: capacity
            localZoneRead: true
            coldData: 93
            snapshotHour: 1
            replicationBandwidth: 1
            bandwidthRead: 0
          name: name
        subnetIds:
        - subnetIds
        - subnetIds
      properties:
        cloudProvider:
          $ref: '#/components/schemas/CloudProviderType'
        policy:
          $ref: '#/components/schemas/CreateInfraPlanRequest_policy'
        osType:
          $ref: '#/components/schemas/OSType'
        size:
          format: integer
          type: integer
          x-omitempty: false
          x-isnullable: false
        region:
          type: string
          x-omitempty: true
          x-isnullable: true
        zones:
          items:
            type: string
          type: array
          x-omitempty: true
          x-isnullable: true
        subnetIds:
          items:
            type: string
          type: array
          x-omitempty: true
          x-isnullable: true
        accountId:
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - cloudProvider
      - policy
      - size
      type: object
    CreateInfraPlanResponse:
      example:
        mediaIOPSRead: 5
        totalPrice: 6.027456183070403
        volumezPrice: 1.4658129805029452
        instanceType: instanceType
        instancesCount: 0
        mediaIOPSWrite: 5
        zones:
        - zones
        - zones
        mediaBandwidthWrite: 2
        providerInstanceType: providerInstanceType
        mediaSize: 9
        encryption: true
        raidColumns: 3
        raidResiliency: raidResiliency
        osType: ubuntu
        redundancy: 2
        mediaBandwidthRead: 7
        subnetIds:
        - subnetIds
        - subnetIds
      properties:
        instancesCount:
          type: integer
          x-omitempty: false
          x-isnullable: false
        instanceType:
          type: string
          x-omitempty: false
          x-isnullable: false
        providerInstanceType:
          type: string
          x-omitempty: false
          x-isnullable: false
        totalPrice:
          format: double
          type: number
          x-omitempty: false
          x-isnullable: false
        volumezPrice:
          format: double
          type: number
          x-omitempty: false
          x-isnullable: false
        mediaIOPSRead:
          type: integer
          x-omitempty: false
          x-isnullable: false
        mediaIOPSWrite:
          type: integer
          x-omitempty: false
          x-isnullable: false
        mediaBandwidthWrite:
          type: integer
          x-omitempty: false
          x-isnullable: false
        mediaBandwidthRead:
          type: integer
          x-omitempty: false
          x-isnullable: false
        raidResiliency:
          type: string
          x-omitempty: false
          x-isnullable: false
        zones:
          items:
            type: string
          type: array
        subnetIds:
          items:
            type: string
          type: array
        osType:
          $ref: '#/components/schemas/OSType'
        encryption:
          type: boolean
          x-omitempty: false
          x-isnullable: false
        mediaSize:
          format: integer
          type: integer
          x-omitempty: false
          x-isnullable: false
        raidColumns:
          type: integer
          x-omitempty: false
          x-isnullable: false
        redundancy:
          type: integer
          x-omitempty: false
          x-isnullable: false
      required:
      - encryption
      - instanceType
      - instancesCount
      - mediaBandwidthRead
      - mediaBandwidthWrite
      - mediaIOPSRead
      - mediaIOPSWrite
      - mediaSize
      - osType
      - raidColumns
      - raidResiliency
      - redundancy
      - subnetIds
      - totalPrice
      - volumezPrice
      - zones
      type: object
    ProviderPricingInfoErrorResponse:
      properties:
        message:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    ProviderPricingInfoRequest:
      example:
        size: 6
        cloudProvider: aws
        iops: 0
        throughput: 1
      properties:
        cloudProvider:
          $ref: '#/components/schemas/CloudProviderType'
        iops:
          format: integer
          type: integer
          x-omitempty: false
          x-isnullable: false
        size:
          format: integer
          type: integer
          x-omitempty: false
          x-isnullable: false
        throughput:
          format: integer
          type: integer
          x-omitempty: false
          x-isnullable: false
      required:
      - cloudProvider
      - iops
      - size
      type: object
    ProviderPricingInfoResponse:
      example:
        totalPriceList:
        - storageType: storageType
          volumeBasePrice: 0.8008282
          volumeTotalPrice: 6.0274563
        - storageType: storageType
          volumeBasePrice: 0.8008282
          volumeTotalPrice: 6.0274563
      properties:
        totalPriceList:
          items:
            $ref: '#/components/schemas/ProviderPriceItem'
          type: array
      required:
      - totalPriceList
      type: object
    SignUpRequest:
      example:
        password: password
        cloudProvider: cloudProvider
        name: name
        marketToken: marketToken
        email: email
      properties:
        email:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        password:
          minLength: 8
          type: string
          x-omitempty: false
          x-isnullable: false
        name:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        cloudProvider:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: true
        marketToken:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: true
      required:
      - email
      - name
      - password
      type: object
    SignInRequest:
      example:
        password: password
        email: email
      properties:
        email:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        password:
          minLength: 8
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - email
      - password
      type: object
    SignOutRequest:
      example:
        AccessToken: AccessToken
      properties:
        AccessToken:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - AccessToken
      type: object
    RequestChangePassword:
      example:
        email: email
      properties:
        email:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    ChangePasswordApproveRequest:
      example:
        password: password
        name: name
        guid: guid
      properties:
        password:
          type: string
          x-omitempty: false
          x-isnullable: false
        name:
          type: string
          x-omitempty: false
          x-isnullable: false
        guid:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    CreateAddTenantUserRequest:
      example:
        password: password
        name: name
        tenantId: tenantId
        email: email
      properties:
        email:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        password:
          minLength: 8
          type: string
          x-omitempty: false
          x-isnullable: false
        name:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        tenantId:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - email
      - name
      - password
      - tenantId
      type: object
    GetTenantUserResponse:
      example:
        TenantID: TenantID
        Email: Email
        Message: Message
        StatusCode: 0
        Name: Name
      properties:
        StatusCode:
          type: integer
          x-omitempty: false
          x-isnullable: false
        Message:
          type: string
          x-omitempty: false
          x-isnullable: false
        Email:
          type: string
          x-omitempty: false
          x-isnullable: false
        Name:
          type: string
          x-omitempty: false
          x-isnullable: false
        TenantID:
          type: string
          x-omitempty: false
          x-isnullable: false
      type: object
    AddUserRequest:
      example:
        password: password
        name: name
        invitedUserToken: invitedUserToken
        email: email
      properties:
        email:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        password:
          minLength: 8
          type: string
          x-omitempty: false
          x-isnullable: false
        name:
          maxLength: 50
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        invitedUserToken:
          maxLength: 300
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
      required:
      - email
      - invitedUserToken
      - name
      - password
      type: object
    TenantUser:
      example:
        Email: Email
        UserName: UserName
        CreatedDate: CreatedDate
        Enabled: true
        StatusCode: 0
        Name: Name
      properties:
        Email:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        StatusCode:
          type: integer
        UserName:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        Name:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        CreatedDate:
          minLength: 1
          type: string
          x-omitempty: false
          x-isnullable: false
        Enabled:
          type: boolean
          x-omitempty: false
          x-isnullable: false
      required:
      - CreatedDate
      - Email
      - Enabled
      - Name
      - UserName
      type: object
    InviteUserResponse:
      example:
        Status: Status
        Message: Message
        ExpiresAt: 0
        InviteeMail: InviteeMail
      properties:
        Message:
          type: string
        InviteeMail:
          type: string
        Status:
          type: string
        ExpiresAt:
          type: integer
      required:
      - ExpiresAt
      - InviteeMail
      - Message
      - Status
      type: object
    GetAzureSSOMappingResponse:
      example:
        SecurityGroupID: SecurityGroupID
      properties:
        SecurityGroupID:
          minimum: 1
          type: string
      required:
      - SecurityGroupID
    PutAzureSSOMappingRequest:
      example:
        SecurityGroupID: SecurityGroupID
      properties:
        SecurityGroupID:
          minimum: 1
          type: string
      required:
      - SecurityGroupID
    GetTenantSettingsResponse:
      example:
        throttle:
          selectedScheme: selectedScheme
          application:
            percentForSnapshots: 14
          attachment:
            enableSliceThrottling: true
            enableMultipathThrottling: true
            enableRaidThrottling: true
            minReservedForTop: 5
            defaultSnapshotResources: 5
            enableCagThrottling: true
          media:
            allowThrottleTargetSlices: true
        declarative:
          faultDomainCount: 3
        pricing:
          priceUnit: 0.8008281904610115
      properties:
        pricing:
          $ref: '#/components/schemas/GetTenantSettingsResponse_pricing'
        declarative:
          $ref: '#/components/schemas/GetTenantSettingsResponse_declarative'
        throttle:
          $ref: '#/components/schemas/GetTenantSettingsResponse_throttle'
      type: object
    ModifyTenantSettingsRequest:
      example:
        settingsToModify:
          throttle:
            selectedScheme: selectedScheme
            application:
              percentForSnapshots: 14
            attachment:
              enableSliceThrottling: true
              enableMultipathThrottling: true
              enableRaidThrottling: true
              minReservedForTop: 5
              defaultSnapshotResources: 5
              enableCagThrottling: true
            media:
              allowThrottleTargetSlices: true
          declarative:
            faultDomainCount: 3
      properties:
        settingsToModify:
          $ref: '#/components/schemas/ModifyTenantSettingsRequest_settingsToModify'
      type: object
    ModifyTenantSettingsResponse:
      $ref: '#/components/schemas/EmptyResponse'
    ResetTenantSettingsRequest:
      example:
        settingsToReset:
          throttle: true
          declarative: true
      properties:
        settingsToReset:
          $ref: '#/components/schemas/ResetTenantSettingsRequest_settingsToReset'
      required:
      - settingsToReset
      type: object
    ResetTenantSettingsResponse:
      $ref: '#/components/schemas/EmptyResponse'
    BatchVolumesPlan_request_Volumes_inner:
      properties:
        Policy:
          description: policy name for the planned volume
          type: string
        Size:
          description: volume size in GiB
          example: 10
          title: volume size
          type: integer
          x-omitempty: false
          x-go-name: Size
          x-isnullable: false
        Zone:
          example: us-east-1a
          type: string
      required:
      - Size
      type: object
      x-go-name: VolumePlanInput
    BatchVolumesPlan_request:
      properties:
        Volumes:
          items:
            $ref: '#/components/schemas/BatchVolumesPlan_request_Volumes_inner'
          minItems: 1
          type: array
          x-go-name: Volumes
        CapacityGroup:
          description: capacity groups to create the volume from (optional)
          type: string
          x-go-name: CapacityGroup
        DefaultZone:
          description: zone parameter for all volumes that dont have zone parameter
          type: string
          x-omitempty: true
          x-go-name: Zone
          x-isnullable: false
        DefaultPolicy:
          description: policy parameter for all volumes that dont have policy parameter
            defined in their input
          type: string
          x-omitempty: true
          x-go-name: Policy
          x-isnullable: false
      type: object
    ConsistencyGroupSnapshotCreate_request:
      properties:
        name:
          type: string
          x-omitempty: true
          x-isnullable: true
        consistency:
          enum:
          - crash
          - application
          type: string
          x-omitempty: true
          x-go-name: Consistency
          x-isnullable: true
        group_name:
          type: string
          x-omitempty: false
          x-isnullable: false
        volumes:
          items:
            type: string
          type: array
          x-omitempty: false
          x-isnullable: false
      type: object
    ExportCreate_nodes_inner:
      example:
        node: node
        role: role
      properties:
        node:
          title: node
          type: string
        role:
          title: role
          type: string
      type: object
    Authentication_chap:
      example:
        password: password
        user: user
      properties:
        user:
          title: user
          type: string
        password:
          title: password
          type: string
      type: object
    GetRolesResponse_roles_inner:
      example:
        azureRole:
          activeDirectoryId: activeDirectoryId
          secretId: secretId
          applicationId: applicationId
        cloudProvider:
          accountID: accountID
          type: aws
        awsRole:
          externalId: externalId
          arn: arn
      properties:
        cloudProvider:
          $ref: '#/components/schemas/CloudProvider'
        awsRole:
          $ref: '#/components/schemas/AWSRoleItem'
        azureRole:
          $ref: '#/components/schemas/AzureRoleItem'
      required:
      - cloudProvider
      type: object
    CreateInfraPlanRequest_policy_settings:
      example:
        bandwidthWrite: 0
        resiliencyMedia: 0
        latencyReadCold: 0
        snapshotDay: 7
        integrity: true
        sed: true
        encryption: true
        capacityReservation: 180
        resiliencyZone: 0
        snapshotMinute: 4
        iopsRead: 0
        resiliencyNode: 0
        iopsWrite: 0
        snapshotKeep: 6
        failurePerformance: true
        snapshotFrequency: snapshotFrequency
        latencyRead: 0
        resiliencyRegion: 0
        latencyWrite: 0
        replicationRpo: 368
        capacityOptimization: capacity
        localZoneRead: true
        coldData: 93
        snapshotHour: 1
        replicationBandwidth: 1
        bandwidthRead: 0
      nullable: true
      properties:
        iopsWrite:
          description: "Enter the maximum write IOPS that a volume is expected to\
            \ sustain (assuming 8K writes). Write IOPS should be a positive integer\
            \ number. Volumez will guarantee to provide this performance, regardless\
            \ of the volume size or other volumes."
          minimum: 0
          type: integer
        iopsRead:
          description: "Enter the maximum read IOPS that a volume is expected to sustain\
            \ (assuming 8K reads). Read IOPS should be a positive integer number.\
            \ Volumez will guarantee to provide this performance, regardless of the\
            \ volume size or other volumes."
          minimum: 0
          type: integer
        bandwidthWrite:
          description: "Enter the maximum write bandwidth that a volume is expected\
            \ to sustain. Write Bandwidth should be a positive integer number. Volumez\
            \ will guarantee to provide this performance, regardless of the volume\
            \ size or other volumes."
          minimum: 0
          type: integer
        bandwidthRead:
          description: "Enter the maximum read bandwidth that a volume is expected\
            \ to sustain. Read Bandwidth should be a positive integer number. Volumez\
            \ will guarantee to provide this performance, regardless of the volume\
            \ size or other volumes."
          minimum: 0
          type: integer
        latencyWrite:
          description: "Enter the maximum latency that a volume is expected to sustain.\
            \ Write latency should be a positive integer number. Volumez will guarantee\
            \ to provide this performance, regardless of the volume size or other\
            \ volumes."
          minimum: 0
          type: integer
        latencyRead:
          description: "Enter the maximum read IOPS that a volume is expected to sustain.\
            \ Read latency should be a positive integer number. Volumez will guarantee\
            \ to provide this performance, regardless of the volume size or other\
            \ volumes."
          minimum: 0
          type: integer
        latencyReadCold:
          description: " If not all the reads are hot (i.e., Percentage of Cold Reads\
            \ is >0) Enter the more relaxed constraints for read latencies of cold\
            \ data.  Valid values: non-negative integer number, that is larger than\
            \ “Read Latency”."
          minimum: 0
          type: integer
        coldData:
          description: "Enter the percentage of the volumes capacity that is expected\
            \ to be cold (i.e. expected to only have infrequent reads). Default is\
            \ 0%. Values that are greater than 0 give Volumez the option to use more\
            \ economic media with more relaxed read performance requirements. Valid\
            \ values: Integers in the range of 0..100."
          maximum: 100
          minimum: 0
          type: integer
        localZoneRead:
          description: "Setting this value to Yes directs Volumez to prefer volume\
            \ configurations where reads are usually happening from disks that are\
            \ in the same zone as the application. This saves east-west network traffic\
            \ across zones, however more media per zone will be required to achieve\
            \ read-IOPs requirements. Set this value to Yes if you have network constraints\
            \ (bandwidth or cost) across your zones; otherwise set it to No"
          type: boolean
        failurePerformance:
          description: "Setting this value to Yes directs Volumez to over-provision\
            \ volumes in a way that even after having a failure, the volumes will\
            \ have the desired performance. Setting this value to No directs Volumez\
            \ to provision volumes according to the desired performance, however in\
            \ a case of failure performance may be impacted. The default value is\
            \ No."
          type: boolean
        capacityOptimization:
          description: "Choosing Capacity directs Volumez to prefer using capacity-saving\
            \ methods (such as compression, deduplication, erasure coding and thin\
            \ provisioning) where relevant, in order to consume the minimum amount\
            \ of raw media. Using such methods might take some CPU cycles, and might\
            \ reduce the performance of your volumes (it will still be within the\
            \ range you specified). Choosing Balanced directs Volumez to prefer using\
            \ some capacity-saving methods where relevant, in order to use less raw\
            \ media, while consuming a small amount of CPU cycles. “Performance Optimized”\
            \ directs Volumez to avoid using capacity-saving any methods (such as\
            \ compression and deduplication) that reduce media consumption. This way\
            \ applications can get the optimal performance from their media, however\
            \ more raw media might be consumed to provision Performance-Optimized\
            \ volumes."
          enum:
          - capacity
          - balanced
          - performance
          type: string
        capacityReservation:
          description: "Enter how much logical capacity is reserved up-front for the\
            \ applications to use. If more capacity is needed for the volume, it will\
            \ be allocated based on availability of media. Capacities that are reserved\
            \ can be used for the volume itself and for its snapshots. For example\
            \ – Use 0% for thin-provisioned volumes, 130% for thick-provisioned volumes\
            \ with estimated 30% of space for snapshots. Valid values are 0%-500%,\
            \ default is 20%."
          maximum: 500
          minimum: 0
          type: integer
        resiliencyMedia:
          description: " Enter how many media failures (e.g. disk, memory card) the\
            \ system is required to sustain, and still serve volumes of this policy.\
            \ A value of “0” means any disk failure will result data unavailability\
            \ and loss. Valid values are 0..3, default value is 2."
          maximum: 2
          minimum: 0
          type: integer
        resiliencyNode:
          description: "Enter how many Volumez node (e.g. EC2 instance, server) failures\
            \ the system is required to sustain, and still serve volumes of this policy.\
            \ This is different than “Media failures” because sometimes multiple media\
            \ copies may end on a single node. A value of “0” means any node failure\
            \ will result data unavailability and loss. Valid values are 0..3, default\
            \ value is 1."
          maximum: 2
          minimum: 0
          type: integer
        resiliencyZone:
          description: "Enter how many zones (e.g. AWS availability zones, DataCenters\
            \ Buildings) failures the system is required to sustain, and still serve\
            \ volumes of this policy. Note: zones are assumed to be within the same\
            \ metro distance, and resiliency to zone failures means cross-zone network\
            \ traffic. Valid values are 0..2, default value is 1."
          minimum: 0
          type: integer
        resiliencyRegion:
          description: "Enter how many regions (e.g. AWS regions zones, DataCenters\
            \ across continents) failures the system is required to sustain, and still\
            \ serve volumes of this policy. Note: regions are assumed to reside across\
            \ WAN distance, with some bandwidth limitations. Valid values are 0 and\
            \ 1, default value is 0."
          maximum: 1
          minimum: 0
          type: integer
        replicationRpo:
          description: "Enter how many seconds are allowed for the replica to stay\
            \ behind the primary storage. 0 means synchronous replication. Valid values\
            \ are 0..3600, default value is 0. Max value: 3600. (1 hour)."
          maximum: 3600
          minimum: 0
          type: integer
        replicationBandwidth:
          description: Specifies the maximum bandwidth that Volumez is allowed to
            consume for replication of this volume (MB/s). 0 means no bandwidth limitation.
          type: integer
        encryption:
          description: "Enter YESto encrypt the data in server where the application\
            \ is running. Note: No change is needed in the applications themselves,\
            \ however encryption will consume some CPU cycles on the application server.\
            \ Default value NO."
          type: boolean
        sed:
          description: "Enter YES to direct Volumez to only use media with disk encryption\
            \ capabilities. Note that specifying NO can still use such media, however\
            \ it is not a must to use it. Default value: NO."
          type: boolean
        integrity:
          description: "Enter YES to direct Volumez to activate the Device Mapper\
            \ integrity protection for the volume. This capability provides strong\
            \ integrity checking. Note: No change is needed in the applications themselves,\
            \ however Data Integrity will consume non-negligible CPU cycles on the\
            \ application server. Default value: NO."
          type: boolean
        snapshotKeep:
          type: integer
        snapshotFrequency:
          type: string
        snapshotDay:
          type: integer
        snapshotHour:
          type: integer
        snapshotMinute:
          type: integer
      type: object
      x-omitempty: true
      x-isnullable: true
    CreateInfraPlanRequest_policy:
      example:
        settings:
          bandwidthWrite: 0
          resiliencyMedia: 0
          latencyReadCold: 0
          snapshotDay: 7
          integrity: true
          sed: true
          encryption: true
          capacityReservation: 180
          resiliencyZone: 0
          snapshotMinute: 4
          iopsRead: 0
          resiliencyNode: 0
          iopsWrite: 0
          snapshotKeep: 6
          failurePerformance: true
          snapshotFrequency: snapshotFrequency
          latencyRead: 0
          resiliencyRegion: 0
          latencyWrite: 0
          replicationRpo: 368
          capacityOptimization: capacity
          localZoneRead: true
          coldData: 93
          snapshotHour: 1
          replicationBandwidth: 1
          bandwidthRead: 0
        name: name
      properties:
        name:
          nullable: true
          type: string
          x-omitempty: true
          x-isnullable: true
        settings:
          $ref: '#/components/schemas/CreateInfraPlanRequest_policy_settings'
      type: object
    GetTenantSettingsResponse_pricing:
      example:
        priceUnit: 0.8008281904610115
      nullable: true
      properties:
        priceUnit:
          format: double
          nullable: true
          type: number
      type: object
      x-omitempty: true
      x-isnullable: true
    GetTenantSettingsResponse_declarative:
      example:
        faultDomainCount: 3
      nullable: true
      properties:
        faultDomainCount:
          format: int32
          maximum: 5
          minimum: 1
          nullable: true
          type: integer
      type: object
      x-omitempty: true
      x-isnullable: true
    GetTenantSettingsResponse_throttle_application:
      example:
        percentForSnapshots: 14
      nullable: true
      properties:
        percentForSnapshots:
          format: int32
          maximum: 100
          minimum: 0
          nullable: true
          type: integer
      type: object
    GetTenantSettingsResponse_throttle_media:
      example:
        allowThrottleTargetSlices: true
      nullable: true
      properties:
        allowThrottleTargetSlices:
          nullable: true
          type: boolean
      type: object
    GetTenantSettingsResponse_throttle_attachment:
      example:
        enableSliceThrottling: true
        enableMultipathThrottling: true
        enableRaidThrottling: true
        minReservedForTop: 5
        defaultSnapshotResources: 5
        enableCagThrottling: true
      nullable: true
      properties:
        defaultSnapshotResources:
          format: int32
          nullable: true
          type: integer
        minReservedForTop:
          format: int32
          nullable: true
          type: integer
        enableCagThrottling:
          nullable: true
          type: boolean
        enableRaidThrottling:
          nullable: true
          type: boolean
        enableSliceThrottling:
          nullable: true
          type: boolean
        enableMultipathThrottling:
          nullable: true
          type: boolean
      type: object
    GetTenantSettingsResponse_throttle:
      example:
        selectedScheme: selectedScheme
        application:
          percentForSnapshots: 14
        attachment:
          enableSliceThrottling: true
          enableMultipathThrottling: true
          enableRaidThrottling: true
          minReservedForTop: 5
          defaultSnapshotResources: 5
          enableCagThrottling: true
        media:
          allowThrottleTargetSlices: true
      nullable: true
      properties:
        selectedScheme:
          nullable: true
          type: string
        application:
          $ref: '#/components/schemas/GetTenantSettingsResponse_throttle_application'
        media:
          $ref: '#/components/schemas/GetTenantSettingsResponse_throttle_media'
        attachment:
          $ref: '#/components/schemas/GetTenantSettingsResponse_throttle_attachment'
      type: object
      x-omitempty: true
      x-isnullable: true
    ModifyTenantSettingsRequest_settingsToModify:
      example:
        throttle:
          selectedScheme: selectedScheme
          application:
            percentForSnapshots: 14
          attachment:
            enableSliceThrottling: true
            enableMultipathThrottling: true
            enableRaidThrottling: true
            minReservedForTop: 5
            defaultSnapshotResources: 5
            enableCagThrottling: true
          media:
            allowThrottleTargetSlices: true
        declarative:
          faultDomainCount: 3
      properties:
        declarative:
          $ref: '#/components/schemas/GetTenantSettingsResponse_declarative'
        throttle:
          $ref: '#/components/schemas/GetTenantSettingsResponse_throttle'
      type: object
    ResetTenantSettingsRequest_settingsToReset:
      example:
        throttle: true
        declarative: true
      properties:
        declarative:
          type: boolean
          x-omitempty: true
          x-isnullable: true
        throttle:
          type: boolean
          x-omitempty: true
          x-isnullable: true
      type: object
  securitySchemes:
    storage.io-authorizer:
      in: header
      name: authorization
      type: apiKey
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
        - arn:aws:cognito-idp:us-east-1:225810133168:userpool/us-east-1_j38QatKuM
        type: cognito_user_pools
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  UNAUTHORIZED:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  ACCESS_DENIED:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  RESOURCE_NOT_FOUND:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  THROTTLED:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  AUTHORIZER_FAILURE:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  AUTHORIZER_CONFIGURATION_ERROR:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  INVALID_API_KEY:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  BAD_REQUEST_PARAMETERS:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  BAD_REQUEST_BODY:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  REQUEST_TOO_LARGE:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  UNSUPPORTED_MEDIA_TYPE:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  API_CONFIGURATION_ERROR:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
  QUOTA_EXCEEDED:
    responseParameters:
      gatewayresponse.header.access-control-allow-origin: '''*'''
    responseTemplates:
      application/json: "{\"Message\":$context.error.messageString}"
x-original-swagger-version: "2.0"
