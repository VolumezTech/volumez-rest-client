/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRolesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRolesResponse{}

// GetRolesResponse struct for GetRolesResponse
type GetRolesResponse struct {
	Roles    []GetRolesResponseRolesInner `json:"roles"`
	RoleId   *string                      `json:"RoleId,omitempty"`
	RoleName NullableString               `json:"RoleName,omitempty"`
	Policies []string                     `json:"Policies,omitempty"`
}

type _GetRolesResponse GetRolesResponse

// NewGetRolesResponse instantiates a new GetRolesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRolesResponse(roles []GetRolesResponseRolesInner) *GetRolesResponse {
	this := GetRolesResponse{}
	this.Roles = roles
	return &this
}

// NewGetRolesResponseWithDefaults instantiates a new GetRolesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRolesResponseWithDefaults() *GetRolesResponse {
	this := GetRolesResponse{}
	return &this
}

// GetRoles returns the Roles field value
func (o *GetRolesResponse) GetRoles() []GetRolesResponseRolesInner {
	if o == nil {
		var ret []GetRolesResponseRolesInner
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *GetRolesResponse) GetRolesOk() ([]GetRolesResponseRolesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *GetRolesResponse) SetRoles(v []GetRolesResponseRolesInner) {
	o.Roles = v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *GetRolesResponse) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRolesResponse) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *GetRolesResponse) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *GetRolesResponse) SetRoleId(v string) {
	o.RoleId = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetRolesResponse) GetRoleName() string {
	if o == nil || IsNil(o.RoleName.Get()) {
		var ret string
		return ret
	}
	return *o.RoleName.Get()
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetRolesResponse) GetRoleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleName.Get(), o.RoleName.IsSet()
}

// HasRoleName returns a boolean if a field has been set.
func (o *GetRolesResponse) HasRoleName() bool {
	if o != nil && o.RoleName.IsSet() {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given NullableString and assigns it to the RoleName field.
func (o *GetRolesResponse) SetRoleName(v string) {
	o.RoleName.Set(&v)
}

// SetRoleNameNil sets the value for RoleName to be an explicit nil
func (o *GetRolesResponse) SetRoleNameNil() {
	o.RoleName.Set(nil)
}

// UnsetRoleName ensures that no value is present for RoleName, not even an explicit nil
func (o *GetRolesResponse) UnsetRoleName() {
	o.RoleName.Unset()
}

// GetPolicies returns the Policies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetRolesResponse) GetPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetRolesResponse) GetPoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *GetRolesResponse) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []string and assigns it to the Policies field.
func (o *GetRolesResponse) SetPolicies(v []string) {
	o.Policies = v
}

func (o GetRolesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRolesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roles"] = o.Roles
	if !IsNil(o.RoleId) {
		toSerialize["RoleId"] = o.RoleId
	}
	if o.RoleName.IsSet() {
		toSerialize["RoleName"] = o.RoleName.Get()
	}
	if o.Policies != nil {
		toSerialize["Policies"] = o.Policies
	}
	return toSerialize, nil
}

func (o *GetRolesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRolesResponse := _GetRolesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRolesResponse)

	if err != nil {
		return err
	}

	*o = GetRolesResponse(varGetRolesResponse)

	return err
}

type NullableGetRolesResponse struct {
	value *GetRolesResponse
	isSet bool
}

func (v NullableGetRolesResponse) Get() *GetRolesResponse {
	return v.value
}

func (v *NullableGetRolesResponse) Set(val *GetRolesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRolesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRolesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRolesResponse(val *GetRolesResponse) *NullableGetRolesResponse {
	return &NullableGetRolesResponse{value: val, isSet: true}
}

func (v NullableGetRolesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRolesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
