// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewNodeDrainParams creates a new NodeDrainParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNodeDrainParams() *NodeDrainParams {
	return &NodeDrainParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNodeDrainParamsWithTimeout creates a new NodeDrainParams object
// with the ability to set a timeout on a request.
func NewNodeDrainParamsWithTimeout(timeout time.Duration) *NodeDrainParams {
	return &NodeDrainParams{
		timeout: timeout,
	}
}

// NewNodeDrainParamsWithContext creates a new NodeDrainParams object
// with the ability to set a context for a request.
func NewNodeDrainParamsWithContext(ctx context.Context) *NodeDrainParams {
	return &NodeDrainParams{
		Context: ctx,
	}
}

// NewNodeDrainParamsWithHTTPClient creates a new NodeDrainParams object
// with the ability to set a custom HTTPClient for a request.
func NewNodeDrainParamsWithHTTPClient(client *http.Client) *NodeDrainParams {
	return &NodeDrainParams{
		HTTPClient: client,
	}
}

/* NodeDrainParams contains all the parameters to send to the API endpoint
   for the node drain operation.

   Typically these are written to a http.Request.
*/
type NodeDrainParams struct {

	// Authorization.
	Authorization *string

	// Cleanup.
	Cleanup *bool

	// Node.
	Node string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the node drain params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeDrainParams) WithDefaults() *NodeDrainParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the node drain params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NodeDrainParams) SetDefaults() {
	var (
		cleanupDefault = bool(false)
	)

	val := NodeDrainParams{
		Cleanup: &cleanupDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the node drain params
func (o *NodeDrainParams) WithTimeout(timeout time.Duration) *NodeDrainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the node drain params
func (o *NodeDrainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the node drain params
func (o *NodeDrainParams) WithContext(ctx context.Context) *NodeDrainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the node drain params
func (o *NodeDrainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the node drain params
func (o *NodeDrainParams) WithHTTPClient(client *http.Client) *NodeDrainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the node drain params
func (o *NodeDrainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the node drain params
func (o *NodeDrainParams) WithAuthorization(authorization *string) *NodeDrainParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the node drain params
func (o *NodeDrainParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithCleanup adds the cleanup to the node drain params
func (o *NodeDrainParams) WithCleanup(cleanup *bool) *NodeDrainParams {
	o.SetCleanup(cleanup)
	return o
}

// SetCleanup adds the cleanup to the node drain params
func (o *NodeDrainParams) SetCleanup(cleanup *bool) {
	o.Cleanup = cleanup
}

// WithNode adds the node to the node drain params
func (o *NodeDrainParams) WithNode(node string) *NodeDrainParams {
	o.SetNode(node)
	return o
}

// SetNode adds the node to the node drain params
func (o *NodeDrainParams) SetNode(node string) {
	o.Node = node
}

// WriteToRequest writes these params to a swagger request
func (o *NodeDrainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param authorization
		if err := r.SetHeaderParam("authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.Cleanup != nil {

		// query param cleanup
		var qrCleanup bool

		if o.Cleanup != nil {
			qrCleanup = *o.Cleanup
		}
		qCleanup := swag.FormatBool(qrCleanup)
		if qCleanup != "" {

			if err := r.SetQueryParam("cleanup", qCleanup); err != nil {
				return err
			}
		}
	}

	// path param node
	if err := r.SetPathParam("node", o.Node); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
