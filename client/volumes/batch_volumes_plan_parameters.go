// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewBatchVolumesPlanParams creates a new BatchVolumesPlanParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBatchVolumesPlanParams() *BatchVolumesPlanParams {
	return &BatchVolumesPlanParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBatchVolumesPlanParamsWithTimeout creates a new BatchVolumesPlanParams object
// with the ability to set a timeout on a request.
func NewBatchVolumesPlanParamsWithTimeout(timeout time.Duration) *BatchVolumesPlanParams {
	return &BatchVolumesPlanParams{
		timeout: timeout,
	}
}

// NewBatchVolumesPlanParamsWithContext creates a new BatchVolumesPlanParams object
// with the ability to set a context for a request.
func NewBatchVolumesPlanParamsWithContext(ctx context.Context) *BatchVolumesPlanParams {
	return &BatchVolumesPlanParams{
		Context: ctx,
	}
}

// NewBatchVolumesPlanParamsWithHTTPClient creates a new BatchVolumesPlanParams object
// with the ability to set a custom HTTPClient for a request.
func NewBatchVolumesPlanParamsWithHTTPClient(client *http.Client) *BatchVolumesPlanParams {
	return &BatchVolumesPlanParams{
		HTTPClient: client,
	}
}

/*
BatchVolumesPlanParams contains all the parameters to send to the API endpoint

	for the batch volumes plan operation.

	Typically these are written to a http.Request.
*/
type BatchVolumesPlanParams struct {

	// Authorization.
	Authorization *string

	// Body.
	Body BatchVolumesPlanBody

	/* Verbose.

	   if true will return the volume plan if false will omit the plan from the response

	   Default: true
	*/
	Verbose *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the batch volumes plan params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BatchVolumesPlanParams) WithDefaults() *BatchVolumesPlanParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the batch volumes plan params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BatchVolumesPlanParams) SetDefaults() {
	var (
		verboseDefault = bool(true)
	)

	val := BatchVolumesPlanParams{
		Verbose: &verboseDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithTimeout(timeout time.Duration) *BatchVolumesPlanParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithContext(ctx context.Context) *BatchVolumesPlanParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithHTTPClient(client *http.Client) *BatchVolumesPlanParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithAuthorization(authorization *string) *BatchVolumesPlanParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithBody adds the body to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithBody(body BatchVolumesPlanBody) *BatchVolumesPlanParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetBody(body BatchVolumesPlanBody) {
	o.Body = body
}

// WithVerbose adds the verbose to the batch volumes plan params
func (o *BatchVolumesPlanParams) WithVerbose(verbose *bool) *BatchVolumesPlanParams {
	o.SetVerbose(verbose)
	return o
}

// SetVerbose adds the verbose to the batch volumes plan params
func (o *BatchVolumesPlanParams) SetVerbose(verbose *bool) {
	o.Verbose = verbose
}

// WriteToRequest writes these params to a swagger request
func (o *BatchVolumesPlanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param authorization
		if err := r.SetHeaderParam("authorization", *o.Authorization); err != nil {
			return err
		}
	}
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Verbose != nil {

		// query param verbose
		var qrVerbose bool

		if o.Verbose != nil {
			qrVerbose = *o.Verbose
		}
		qVerbose := swag.FormatBool(qrVerbose)
		if qVerbose != "" {

			if err := r.SetQueryParam("verbose", qVerbose); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
