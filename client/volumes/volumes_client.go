// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volumes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volumes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	VolumeCreate(params *VolumeCreateParams, opts ...ClientOption) (*VolumeCreateOK, *VolumeCreateAccepted, error)

	VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteOK, error)

	VolumeDescribe(params *VolumeDescribeParams, opts ...ClientOption) (*VolumeDescribeOK, error)

	VolumeGet(params *VolumeGetParams, opts ...ClientOption) (*VolumeGetOK, error)

	VolumeModify(params *VolumeModifyParams, opts ...ClientOption) (*VolumeModifyOK, error)

	VolumeRecoverInitiate(params *VolumeRecoverInitiateParams, opts ...ClientOption) (*VolumeRecoverInitiateOK, error)

	VolumesList(params *VolumesListParams, opts ...ClientOption) (*VolumesListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  VolumeCreate creates a new volume
*/
func (a *Client) VolumeCreate(params *VolumeCreateParams, opts ...ClientOption) (*VolumeCreateOK, *VolumeCreateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeCreate",
		Method:             "POST",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *VolumeCreateOK:
		return value, nil, nil
	case *VolumeCreateAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeCreateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumeDelete deletes a volume
*/
func (a *Client) VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeDelete",
		Method:             "DELETE",
		PathPattern:        "/volumes/{volume}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumeDescribe describes existing volume
*/
func (a *Client) VolumeDescribe(params *VolumeDescribeParams, opts ...ClientOption) (*VolumeDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeDescribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeDescribe",
		Method:             "GET",
		PathPattern:        "/volumes/{volume}/describe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeDescribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeDescribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeDescribeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumeGet gets the properties of a volume
*/
func (a *Client) VolumeGet(params *VolumeGetParams, opts ...ClientOption) (*VolumeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeGet",
		Method:             "GET",
		PathPattern:        "/volumes/{volume}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumeModify modifies a volume
*/
func (a *Client) VolumeModify(params *VolumeModifyParams, opts ...ClientOption) (*VolumeModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeModify",
		Method:             "PATCH",
		PathPattern:        "/volumes/{volume}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeModifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumeRecoverInitiate initiates recover on volume
*/
func (a *Client) VolumeRecoverInitiate(params *VolumeRecoverInitiateParams, opts ...ClientOption) (*VolumeRecoverInitiateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeRecoverInitiateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeRecoverInitiate",
		Method:             "POST",
		PathPattern:        "/volumes/{volume}/recover",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumeRecoverInitiateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeRecoverInitiateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeRecoverInitiateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VolumesList gets a list of volumes
*/
func (a *Client) VolumesList(params *VolumesListParams, opts ...ClientOption) (*VolumesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumesList",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VolumesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
