// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PoliciesList(params *PoliciesListParams, opts ...ClientOption) (*PoliciesListOK, error)

	PolicyCreate(params *PolicyCreateParams, opts ...ClientOption) (*PolicyCreateOK, error)

	PolicyDelete(params *PolicyDeleteParams, opts ...ClientOption) (*PolicyDeleteOK, error)

	PolicyGet(params *PolicyGetParams, opts ...ClientOption) (*PolicyGetOK, error)

	PolicyGetVolumes(params *PolicyGetVolumesParams, opts ...ClientOption) (*PolicyGetVolumesOK, error)

	PolicyModify(params *PolicyModifyParams, opts ...ClientOption) (*PolicyModifyOK, error)

	PolicyPlan(params *PolicyPlanParams, opts ...ClientOption) (*PolicyPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PoliciesList gets a list of policies
*/
func (a *Client) PoliciesList(params *PoliciesListParams, opts ...ClientOption) (*PoliciesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoliciesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PoliciesList",
		Method:             "GET",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoliciesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoliciesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PoliciesListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyCreate creates a new policy
*/
func (a *Client) PolicyCreate(params *PolicyCreateParams, opts ...ClientOption) (*PolicyCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyCreate",
		Method:             "POST",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyDelete deletes a policy
*/
func (a *Client) PolicyDelete(params *PolicyDeleteParams, opts ...ClientOption) (*PolicyDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyDelete",
		Method:             "DELETE",
		PathPattern:        "/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyGet gets the properties of a policy
*/
func (a *Client) PolicyGet(params *PolicyGetParams, opts ...ClientOption) (*PolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyGet",
		Method:             "GET",
		PathPattern:        "/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyGetVolumes gets the properties of a policy
*/
func (a *Client) PolicyGetVolumes(params *PolicyGetVolumesParams, opts ...ClientOption) (*PolicyGetVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyGetVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyGetVolumes",
		Method:             "GET",
		PathPattern:        "/policies/{policy}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyGetVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyGetVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyGetVolumesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyModify modifies a policy
*/
func (a *Client) PolicyModify(params *PolicyModifyParams, opts ...ClientOption) (*PolicyModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyModify",
		Method:             "PATCH",
		PathPattern:        "/policies/{policy}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyModifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PolicyPlan shows policy volume create plan
*/
func (a *Client) PolicyPlan(params *PolicyPlanParams, opts ...ClientOption) (*PolicyPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyPlan",
		Method:             "GET",
		PathPattern:        "/policies/{policy}/size/{size}/zone/{zone}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
