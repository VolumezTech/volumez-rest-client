// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NetworkCreate(params *NetworkCreateParams, opts ...ClientOption) (*NetworkCreateOK, error)

	NetworkDelete(params *NetworkDeleteParams, opts ...ClientOption) (*NetworkDeleteOK, error)

	NetworkGet(params *NetworkGetParams, opts ...ClientOption) (*NetworkGetOK, error)

	NetworkModify(params *NetworkModifyParams, opts ...ClientOption) (*NetworkModifyOK, error)

	NetworksList(params *NetworksListParams, opts ...ClientOption) (*NetworksListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NetworkCreate creates a new network
*/
func (a *Client) NetworkCreate(params *NetworkCreateParams, opts ...ClientOption) (*NetworkCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkCreate",
		Method:             "POST",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkDelete deletes a network
*/
func (a *Client) NetworkDelete(params *NetworkDeleteParams, opts ...ClientOption) (*NetworkDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkDelete",
		Method:             "DELETE",
		PathPattern:        "/networks/{network}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkGet gets the properties of a network
*/
func (a *Client) NetworkGet(params *NetworkGetParams, opts ...ClientOption) (*NetworkGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkGet",
		Method:             "GET",
		PathPattern:        "/networks/{network}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworkModify modifies a network
*/
func (a *Client) NetworkModify(params *NetworkModifyParams, opts ...ClientOption) (*NetworkModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworkModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworkModify",
		Method:             "PATCH",
		PathPattern:        "/networks/{network}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworkModifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworkModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworkModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NetworksList gets a list of networks
*/
func (a *Client) NetworksList(params *NetworksListParams, opts ...ClientOption) (*NetworksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNetworksListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NetworksList",
		Method:             "GET",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NetworksListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NetworksListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NetworksListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
