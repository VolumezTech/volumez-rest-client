// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new media API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for media API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MediaAssign(params *MediaAssignParams, opts ...ClientOption) (*MediaAssignOK, error)

	MediaAssignLegacy(params *MediaAssignLegacyParams, opts ...ClientOption) (*MediaAssignLegacyOK, error)

	MediaCleanup(params *MediaCleanupParams, opts ...ClientOption) (*MediaCleanupOK, error)

	MediaCleanupVolume(params *MediaCleanupVolumeParams, opts ...ClientOption) (*MediaCleanupVolumeOK, error)

	MediaDelete(params *MediaDeleteParams, opts ...ClientOption) (*MediaDeleteOK, error)

	MediaDiagnose(params *MediaDiagnoseParams, opts ...ClientOption) (*MediaDiagnoseOK, error)

	MediaDrain(params *MediaDrainParams, opts ...ClientOption) (*MediaDrainOK, error)

	MediaGet(params *MediaGetParams, opts ...ClientOption) (*MediaGetOK, error)

	MediaList(params *MediaListParams, opts ...ClientOption) (*MediaListOK, error)

	MediaModify(params *MediaModifyParams, opts ...ClientOption) (*MediaModifyOK, error)

	MediaProfileModify(params *MediaProfileModifyParams, opts ...ClientOption) (*MediaProfileModifyOK, error)

	MediaUnassign(params *MediaUnassignParams, opts ...ClientOption) (*MediaUnassignOK, error)

	MediaUnassignLegacy(params *MediaUnassignLegacyParams, opts ...ClientOption) (*MediaUnassignLegacyOK, error)

	VirtualMediaCreate(params *VirtualMediaCreateParams, opts ...ClientOption) (*VirtualMediaCreateOK, error)

	VirtualMediaDelete(params *VirtualMediaDeleteParams, opts ...ClientOption) (*VirtualMediaDeleteOK, error)

	VirtualMediaList(params *VirtualMediaListParams, opts ...ClientOption) (*VirtualMediaListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MediaAssign assigns media
*/
func (a *Client) MediaAssign(params *MediaAssignParams, opts ...ClientOption) (*MediaAssignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaAssignParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaAssign",
		Method:             "PATCH",
		PathPattern:        "/media/{media}/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaAssignReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaAssignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaAssignDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaAssignLegacy assigns media
*/
func (a *Client) MediaAssignLegacy(params *MediaAssignLegacyParams, opts ...ClientOption) (*MediaAssignLegacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaAssignLegacyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaAssignLegacy",
		Method:             "GET",
		PathPattern:        "/media/{media}/assign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaAssignLegacyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaAssignLegacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaAssignLegacyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaCleanup media cleanup
*/
func (a *Client) MediaCleanup(params *MediaCleanupParams, opts ...ClientOption) (*MediaCleanupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaCleanupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaCleanup",
		Method:             "POST",
		PathPattern:        "/media/{media}/cleanup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaCleanupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaCleanupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaCleanupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaCleanupVolume media cleanup
*/
func (a *Client) MediaCleanupVolume(params *MediaCleanupVolumeParams, opts ...ClientOption) (*MediaCleanupVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaCleanupVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaCleanupVolume",
		Method:             "POST",
		PathPattern:        "/media/{media}/cleanup/{volume}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaCleanupVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaCleanupVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaCleanupVolumeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaDelete deletes a media
*/
func (a *Client) MediaDelete(params *MediaDeleteParams, opts ...ClientOption) (*MediaDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaDelete",
		Method:             "DELETE",
		PathPattern:        "/media/{media}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaDiagnose media diagnose
*/
func (a *Client) MediaDiagnose(params *MediaDiagnoseParams, opts ...ClientOption) (*MediaDiagnoseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaDiagnoseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaDiagnose",
		Method:             "POST",
		PathPattern:        "/media/{media}/diagnose",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaDiagnoseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaDiagnoseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaDiagnoseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaDrain media drain
*/
func (a *Client) MediaDrain(params *MediaDrainParams, opts ...ClientOption) (*MediaDrainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaDrainParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaDrain",
		Method:             "POST",
		PathPattern:        "/media/{media}/drain",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaDrainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaDrainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaDrainDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaGet gets the properties of a media
*/
func (a *Client) MediaGet(params *MediaGetParams, opts ...ClientOption) (*MediaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaGet",
		Method:             "GET",
		PathPattern:        "/media/{media}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaList gets a list of media
*/
func (a *Client) MediaList(params *MediaListParams, opts ...ClientOption) (*MediaListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaList",
		Method:             "GET",
		PathPattern:        "/media",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaModify modifies a media properties
*/
func (a *Client) MediaModify(params *MediaModifyParams, opts ...ClientOption) (*MediaModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaModify",
		Method:             "PATCH",
		PathPattern:        "/media/{media}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaModifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaProfileModify modifies a media profile
*/
func (a *Client) MediaProfileModify(params *MediaProfileModifyParams, opts ...ClientOption) (*MediaProfileModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaProfileModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaProfileModify",
		Method:             "PATCH",
		PathPattern:        "/media/{media}/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaProfileModifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaProfileModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaProfileModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaUnassign unassigns media
*/
func (a *Client) MediaUnassign(params *MediaUnassignParams, opts ...ClientOption) (*MediaUnassignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaUnassignParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaUnassign",
		Method:             "PATCH",
		PathPattern:        "/media/{media}/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaUnassignReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaUnassignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaUnassignDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MediaUnassignLegacy unassigns media
*/
func (a *Client) MediaUnassignLegacy(params *MediaUnassignLegacyParams, opts ...ClientOption) (*MediaUnassignLegacyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMediaUnassignLegacyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MediaUnassignLegacy",
		Method:             "GET",
		PathPattern:        "/media/{media}/unassign",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MediaUnassignLegacyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MediaUnassignLegacyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MediaUnassignLegacyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VirtualMediaCreate creates virtual media
*/
func (a *Client) VirtualMediaCreate(params *VirtualMediaCreateParams, opts ...ClientOption) (*VirtualMediaCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMediaCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VirtualMediaCreate",
		Method:             "POST",
		PathPattern:        "/virtualmedia",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualMediaCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualMediaCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VirtualMediaCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VirtualMediaDelete deletes virtual media
*/
func (a *Client) VirtualMediaDelete(params *VirtualMediaDeleteParams, opts ...ClientOption) (*VirtualMediaDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMediaDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VirtualMediaDelete",
		Method:             "DELETE",
		PathPattern:        "/virtualmedia/{media}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualMediaDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualMediaDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VirtualMediaDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VirtualMediaList gets a list of virtual media
*/
func (a *Client) VirtualMediaList(params *VirtualMediaListParams, opts ...ClientOption) (*VirtualMediaListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMediaListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VirtualMediaList",
		Method:             "GET",
		PathPattern:        "/virtualmedia",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualMediaListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualMediaListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VirtualMediaListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
