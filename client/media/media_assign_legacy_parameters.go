// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMediaAssignLegacyParams creates a new MediaAssignLegacyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMediaAssignLegacyParams() *MediaAssignLegacyParams {
	return &MediaAssignLegacyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMediaAssignLegacyParamsWithTimeout creates a new MediaAssignLegacyParams object
// with the ability to set a timeout on a request.
func NewMediaAssignLegacyParamsWithTimeout(timeout time.Duration) *MediaAssignLegacyParams {
	return &MediaAssignLegacyParams{
		timeout: timeout,
	}
}

// NewMediaAssignLegacyParamsWithContext creates a new MediaAssignLegacyParams object
// with the ability to set a context for a request.
func NewMediaAssignLegacyParamsWithContext(ctx context.Context) *MediaAssignLegacyParams {
	return &MediaAssignLegacyParams{
		Context: ctx,
	}
}

// NewMediaAssignLegacyParamsWithHTTPClient creates a new MediaAssignLegacyParams object
// with the ability to set a custom HTTPClient for a request.
func NewMediaAssignLegacyParamsWithHTTPClient(client *http.Client) *MediaAssignLegacyParams {
	return &MediaAssignLegacyParams{
		HTTPClient: client,
	}
}

/*
MediaAssignLegacyParams contains all the parameters to send to the API endpoint

	for the media assign legacy operation.

	Typically these are written to a http.Request.
*/
type MediaAssignLegacyParams struct {

	// Authorization.
	Authorization *string

	// CapacityGroup.
	CapacityGroup *string

	// Media.
	Media string

	// Reprofile.
	Reprofile *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the media assign legacy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MediaAssignLegacyParams) WithDefaults() *MediaAssignLegacyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the media assign legacy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MediaAssignLegacyParams) SetDefaults() {
	var (
		reprofileDefault = bool(false)
	)

	val := MediaAssignLegacyParams{
		Reprofile: &reprofileDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the media assign legacy params
func (o *MediaAssignLegacyParams) WithTimeout(timeout time.Duration) *MediaAssignLegacyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the media assign legacy params
func (o *MediaAssignLegacyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the media assign legacy params
func (o *MediaAssignLegacyParams) WithContext(ctx context.Context) *MediaAssignLegacyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the media assign legacy params
func (o *MediaAssignLegacyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the media assign legacy params
func (o *MediaAssignLegacyParams) WithHTTPClient(client *http.Client) *MediaAssignLegacyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the media assign legacy params
func (o *MediaAssignLegacyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the media assign legacy params
func (o *MediaAssignLegacyParams) WithAuthorization(authorization *string) *MediaAssignLegacyParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the media assign legacy params
func (o *MediaAssignLegacyParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithCapacityGroup adds the capacityGroup to the media assign legacy params
func (o *MediaAssignLegacyParams) WithCapacityGroup(capacityGroup *string) *MediaAssignLegacyParams {
	o.SetCapacityGroup(capacityGroup)
	return o
}

// SetCapacityGroup adds the capacityGroup to the media assign legacy params
func (o *MediaAssignLegacyParams) SetCapacityGroup(capacityGroup *string) {
	o.CapacityGroup = capacityGroup
}

// WithMedia adds the media to the media assign legacy params
func (o *MediaAssignLegacyParams) WithMedia(media string) *MediaAssignLegacyParams {
	o.SetMedia(media)
	return o
}

// SetMedia adds the media to the media assign legacy params
func (o *MediaAssignLegacyParams) SetMedia(media string) {
	o.Media = media
}

// WithReprofile adds the reprofile to the media assign legacy params
func (o *MediaAssignLegacyParams) WithReprofile(reprofile *bool) *MediaAssignLegacyParams {
	o.SetReprofile(reprofile)
	return o
}

// SetReprofile adds the reprofile to the media assign legacy params
func (o *MediaAssignLegacyParams) SetReprofile(reprofile *bool) {
	o.Reprofile = reprofile
}

// WriteToRequest writes these params to a swagger request
func (o *MediaAssignLegacyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param authorization
		if err := r.SetHeaderParam("authorization", *o.Authorization); err != nil {
			return err
		}
	}

	if o.CapacityGroup != nil {

		// query param capacity_group
		var qrCapacityGroup string

		if o.CapacityGroup != nil {
			qrCapacityGroup = *o.CapacityGroup
		}
		qCapacityGroup := qrCapacityGroup
		if qCapacityGroup != "" {

			if err := r.SetQueryParam("capacity_group", qCapacityGroup); err != nil {
				return err
			}
		}
	}

	// path param media
	if err := r.SetPathParam("media", o.Media); err != nil {
		return err
	}

	if o.Reprofile != nil {

		// query param reprofile
		var qrReprofile bool

		if o.Reprofile != nil {
			qrReprofile = *o.Reprofile
		}
		qReprofile := swag.FormatBool(qrReprofile)
		if qReprofile != "" {

			if err := r.SetQueryParam("reprofile", qReprofile); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
