// Code generated by go-swagger; DO NOT EDIT.

package user_confirm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/VolumezTech/volumez-rest-client/restapi/models"
)

// UserConfirmReader is a Reader for the UserConfirm structure.
type UserConfirmReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserConfirmReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserConfirmOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewUserConfirmInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUserConfirmDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUserConfirmOK creates a UserConfirmOK with default headers values
func NewUserConfirmOK() *UserConfirmOK {
	return &UserConfirmOK{}
}

/*
UserConfirmOK describes a response with status code 200, with default header values.

User has successfully confirmed
*/
type UserConfirmOK struct {
	Payload *models.RegularResponse
}

func (o *UserConfirmOK) Error() string {
	return fmt.Sprintf("[GET /tenant/user/confirmation][%d] userConfirmOK  %+v", 200, o.Payload)
}
func (o *UserConfirmOK) GetPayload() *models.RegularResponse {
	return o.Payload
}

func (o *UserConfirmOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegularResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserConfirmInternalServerError creates a UserConfirmInternalServerError with default headers values
func NewUserConfirmInternalServerError() *UserConfirmInternalServerError {
	return &UserConfirmInternalServerError{}
}

/*
UserConfirmInternalServerError describes a response with status code 500, with default header values.

Error confirming user
*/
type UserConfirmInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *UserConfirmInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tenant/user/confirmation][%d] userConfirmInternalServerError  %+v", 500, o.Payload)
}
func (o *UserConfirmInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UserConfirmInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserConfirmDefault creates a UserConfirmDefault with default headers values
func NewUserConfirmDefault(code int) *UserConfirmDefault {
	return &UserConfirmDefault{
		_statusCode: code,
	}
}

/*
UserConfirmDefault describes a response with status code -1, with default header values.

User confirmation error
*/
type UserConfirmDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the user confirm default response
func (o *UserConfirmDefault) Code() int {
	return o._statusCode
}

func (o *UserConfirmDefault) Error() string {
	return fmt.Sprintf("[GET /tenant/user/confirmation][%d] UserConfirm default  %+v", o._statusCode, o.Payload)
}
func (o *UserConfirmDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *UserConfirmDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
