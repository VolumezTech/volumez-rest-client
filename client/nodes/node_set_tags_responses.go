// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/VolumezTech/volumez-rest-client/restapi/models"
)

// NodeSetTagsReader is a Reader for the NodeSetTags structure.
type NodeSetTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeSetTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeSetTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNodeSetTagsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNodeSetTagsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewNodeSetTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNodeSetTagsOK creates a NodeSetTagsOK with default headers values
func NewNodeSetTagsOK() *NodeSetTagsOK {
	return &NodeSetTagsOK{}
}

/* NodeSetTagsOK describes a response with status code 200, with default header values.

A node set tags was successful
*/
type NodeSetTagsOK struct {
	Payload *models.RegularResponse
}

func (o *NodeSetTagsOK) Error() string {
	return fmt.Sprintf("[PATCH /nodes/tags/{node}][%d] nodeSetTagsOK  %+v", 200, o.Payload)
}
func (o *NodeSetTagsOK) GetPayload() *models.RegularResponse {
	return o.Payload
}

func (o *NodeSetTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegularResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeSetTagsBadRequest creates a NodeSetTagsBadRequest with default headers values
func NewNodeSetTagsBadRequest() *NodeSetTagsBadRequest {
	return &NodeSetTagsBadRequest{}
}

/* NodeSetTagsBadRequest describes a response with status code 400, with default header values.

Invalid node name supplied
*/
type NodeSetTagsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *NodeSetTagsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /nodes/tags/{node}][%d] nodeSetTagsBadRequest  %+v", 400, o.Payload)
}
func (o *NodeSetTagsBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeSetTagsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeSetTagsNotFound creates a NodeSetTagsNotFound with default headers values
func NewNodeSetTagsNotFound() *NodeSetTagsNotFound {
	return &NodeSetTagsNotFound{}
}

/* NodeSetTagsNotFound describes a response with status code 404, with default header values.

Node not found
*/
type NodeSetTagsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *NodeSetTagsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /nodes/tags/{node}][%d] nodeSetTagsNotFound  %+v", 404, o.Payload)
}
func (o *NodeSetTagsNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeSetTagsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeSetTagsDefault creates a NodeSetTagsDefault with default headers values
func NewNodeSetTagsDefault(code int) *NodeSetTagsDefault {
	return &NodeSetTagsDefault{
		_statusCode: code,
	}
}

/* NodeSetTagsDefault describes a response with status code -1, with default header values.

Error setting tags for node
*/
type NodeSetTagsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the node set tags default response
func (o *NodeSetTagsDefault) Code() int {
	return o._statusCode
}

func (o *NodeSetTagsDefault) Error() string {
	return fmt.Sprintf("[PATCH /nodes/tags/{node}][%d] NodeSetTags default  %+v", o._statusCode, o.Payload)
}
func (o *NodeSetTagsDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeSetTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
