// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/VolumezTech/volumez-rest-client/restapi/models"
)

// NodeRepairReader is a Reader for the NodeRepair structure.
type NodeRepairReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeRepairReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeRepairOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNodeRepairBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNodeRepairNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewNodeRepairDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNodeRepairOK creates a NodeRepairOK with default headers values
func NewNodeRepairOK() *NodeRepairOK {
	return &NodeRepairOK{}
}

/*
NodeRepairOK describes a response with status code 200, with default header values.

Node Repair job was created successfully
*/
type NodeRepairOK struct {
	Payload *models.RegularResponse
}

// IsSuccess returns true when this node repair o k response has a 2xx status code
func (o *NodeRepairOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this node repair o k response has a 3xx status code
func (o *NodeRepairOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node repair o k response has a 4xx status code
func (o *NodeRepairOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this node repair o k response has a 5xx status code
func (o *NodeRepairOK) IsServerError() bool {
	return false
}

// IsCode returns true when this node repair o k response a status code equal to that given
func (o *NodeRepairOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the node repair o k response
func (o *NodeRepairOK) Code() int {
	return 200
}

func (o *NodeRepairOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairOK %s", 200, payload)
}

func (o *NodeRepairOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairOK %s", 200, payload)
}

func (o *NodeRepairOK) GetPayload() *models.RegularResponse {
	return o.Payload
}

func (o *NodeRepairOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegularResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeRepairBadRequest creates a NodeRepairBadRequest with default headers values
func NewNodeRepairBadRequest() *NodeRepairBadRequest {
	return &NodeRepairBadRequest{}
}

/*
NodeRepairBadRequest describes a response with status code 400, with default header values.

Invalid node name supplied
*/
type NodeRepairBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node repair bad request response has a 2xx status code
func (o *NodeRepairBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node repair bad request response has a 3xx status code
func (o *NodeRepairBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node repair bad request response has a 4xx status code
func (o *NodeRepairBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this node repair bad request response has a 5xx status code
func (o *NodeRepairBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this node repair bad request response a status code equal to that given
func (o *NodeRepairBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the node repair bad request response
func (o *NodeRepairBadRequest) Code() int {
	return 400
}

func (o *NodeRepairBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairBadRequest %s", 400, payload)
}

func (o *NodeRepairBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairBadRequest %s", 400, payload)
}

func (o *NodeRepairBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeRepairBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeRepairNotFound creates a NodeRepairNotFound with default headers values
func NewNodeRepairNotFound() *NodeRepairNotFound {
	return &NodeRepairNotFound{}
}

/*
NodeRepairNotFound describes a response with status code 404, with default header values.

Node not found
*/
type NodeRepairNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node repair not found response has a 2xx status code
func (o *NodeRepairNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node repair not found response has a 3xx status code
func (o *NodeRepairNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node repair not found response has a 4xx status code
func (o *NodeRepairNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this node repair not found response has a 5xx status code
func (o *NodeRepairNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this node repair not found response a status code equal to that given
func (o *NodeRepairNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the node repair not found response
func (o *NodeRepairNotFound) Code() int {
	return 404
}

func (o *NodeRepairNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairNotFound %s", 404, payload)
}

func (o *NodeRepairNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] nodeRepairNotFound %s", 404, payload)
}

func (o *NodeRepairNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeRepairNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeRepairDefault creates a NodeRepairDefault with default headers values
func NewNodeRepairDefault(code int) *NodeRepairDefault {
	return &NodeRepairDefault{
		_statusCode: code,
	}
}

/*
NodeRepairDefault describes a response with status code -1, with default header values.

Error trying to create node repair job
*/
type NodeRepairDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node repair default response has a 2xx status code
func (o *NodeRepairDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this node repair default response has a 3xx status code
func (o *NodeRepairDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this node repair default response has a 4xx status code
func (o *NodeRepairDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this node repair default response has a 5xx status code
func (o *NodeRepairDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this node repair default response a status code equal to that given
func (o *NodeRepairDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the node repair default response
func (o *NodeRepairDefault) Code() int {
	return o._statusCode
}

func (o *NodeRepairDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] NodeRepair default %s", o._statusCode, payload)
}

func (o *NodeRepairDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/repair/{node}/{tenant}][%d] NodeRepair default %s", o._statusCode, payload)
}

func (o *NodeRepairDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeRepairDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
