// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/VolumezTech/volumez-rest-client/restapi/models"
)

// NodeUpgradeForSupportReader is a Reader for the NodeUpgradeForSupport structure.
type NodeUpgradeForSupportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeUpgradeForSupportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeUpgradeForSupportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNodeUpgradeForSupportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNodeUpgradeForSupportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewNodeUpgradeForSupportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNodeUpgradeForSupportOK creates a NodeUpgradeForSupportOK with default headers values
func NewNodeUpgradeForSupportOK() *NodeUpgradeForSupportOK {
	return &NodeUpgradeForSupportOK{}
}

/* NodeUpgradeForSupportOK describes a response with status code 200, with default header values.

Node upgrade started successfully
*/
type NodeUpgradeForSupportOK struct {
	Payload *models.RegularResponse
}

func (o *NodeUpgradeForSupportOK) Error() string {
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportOK  %+v", 200, o.Payload)
}
func (o *NodeUpgradeForSupportOK) GetPayload() *models.RegularResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegularResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportBadRequest creates a NodeUpgradeForSupportBadRequest with default headers values
func NewNodeUpgradeForSupportBadRequest() *NodeUpgradeForSupportBadRequest {
	return &NodeUpgradeForSupportBadRequest{}
}

/* NodeUpgradeForSupportBadRequest describes a response with status code 400, with default header values.

Invalid node name supplied
*/
type NodeUpgradeForSupportBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpgradeForSupportBadRequest) Error() string {
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportBadRequest  %+v", 400, o.Payload)
}
func (o *NodeUpgradeForSupportBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportNotFound creates a NodeUpgradeForSupportNotFound with default headers values
func NewNodeUpgradeForSupportNotFound() *NodeUpgradeForSupportNotFound {
	return &NodeUpgradeForSupportNotFound{}
}

/* NodeUpgradeForSupportNotFound describes a response with status code 404, with default header values.

Node not found
*/
type NodeUpgradeForSupportNotFound struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpgradeForSupportNotFound) Error() string {
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportNotFound  %+v", 404, o.Payload)
}
func (o *NodeUpgradeForSupportNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportDefault creates a NodeUpgradeForSupportDefault with default headers values
func NewNodeUpgradeForSupportDefault(code int) *NodeUpgradeForSupportDefault {
	return &NodeUpgradeForSupportDefault{
		_statusCode: code,
	}
}

/* NodeUpgradeForSupportDefault describes a response with status code -1, with default header values.

Error trying to upgrade node
*/
type NodeUpgradeForSupportDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the node upgrade for support default response
func (o *NodeUpgradeForSupportDefault) Code() int {
	return o._statusCode
}

func (o *NodeUpgradeForSupportDefault) Error() string {
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] NodeUpgradeForSupport default  %+v", o._statusCode, o.Payload)
}
func (o *NodeUpgradeForSupportDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
