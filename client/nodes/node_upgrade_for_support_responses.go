// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/VolumezTech/volumez-rest-client/restapi/models"
)

// NodeUpgradeForSupportReader is a Reader for the NodeUpgradeForSupport structure.
type NodeUpgradeForSupportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeUpgradeForSupportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewNodeUpgradeForSupportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNodeUpgradeForSupportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNodeUpgradeForSupportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewNodeUpgradeForSupportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewNodeUpgradeForSupportOK creates a NodeUpgradeForSupportOK with default headers values
func NewNodeUpgradeForSupportOK() *NodeUpgradeForSupportOK {
	return &NodeUpgradeForSupportOK{}
}

/*
NodeUpgradeForSupportOK describes a response with status code 200, with default header values.

Node upgrade started successfully
*/
type NodeUpgradeForSupportOK struct {
	Payload *models.RegularResponse
}

// IsSuccess returns true when this node upgrade for support o k response has a 2xx status code
func (o *NodeUpgradeForSupportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this node upgrade for support o k response has a 3xx status code
func (o *NodeUpgradeForSupportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node upgrade for support o k response has a 4xx status code
func (o *NodeUpgradeForSupportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this node upgrade for support o k response has a 5xx status code
func (o *NodeUpgradeForSupportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this node upgrade for support o k response a status code equal to that given
func (o *NodeUpgradeForSupportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the node upgrade for support o k response
func (o *NodeUpgradeForSupportOK) Code() int {
	return 200
}

func (o *NodeUpgradeForSupportOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportOK %s", 200, payload)
}

func (o *NodeUpgradeForSupportOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportOK %s", 200, payload)
}

func (o *NodeUpgradeForSupportOK) GetPayload() *models.RegularResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegularResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportBadRequest creates a NodeUpgradeForSupportBadRequest with default headers values
func NewNodeUpgradeForSupportBadRequest() *NodeUpgradeForSupportBadRequest {
	return &NodeUpgradeForSupportBadRequest{}
}

/*
NodeUpgradeForSupportBadRequest describes a response with status code 400, with default header values.

Invalid node name supplied
*/
type NodeUpgradeForSupportBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node upgrade for support bad request response has a 2xx status code
func (o *NodeUpgradeForSupportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node upgrade for support bad request response has a 3xx status code
func (o *NodeUpgradeForSupportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node upgrade for support bad request response has a 4xx status code
func (o *NodeUpgradeForSupportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this node upgrade for support bad request response has a 5xx status code
func (o *NodeUpgradeForSupportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this node upgrade for support bad request response a status code equal to that given
func (o *NodeUpgradeForSupportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the node upgrade for support bad request response
func (o *NodeUpgradeForSupportBadRequest) Code() int {
	return 400
}

func (o *NodeUpgradeForSupportBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportBadRequest %s", 400, payload)
}

func (o *NodeUpgradeForSupportBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportBadRequest %s", 400, payload)
}

func (o *NodeUpgradeForSupportBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportNotFound creates a NodeUpgradeForSupportNotFound with default headers values
func NewNodeUpgradeForSupportNotFound() *NodeUpgradeForSupportNotFound {
	return &NodeUpgradeForSupportNotFound{}
}

/*
NodeUpgradeForSupportNotFound describes a response with status code 404, with default header values.

Node not found
*/
type NodeUpgradeForSupportNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node upgrade for support not found response has a 2xx status code
func (o *NodeUpgradeForSupportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this node upgrade for support not found response has a 3xx status code
func (o *NodeUpgradeForSupportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this node upgrade for support not found response has a 4xx status code
func (o *NodeUpgradeForSupportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this node upgrade for support not found response has a 5xx status code
func (o *NodeUpgradeForSupportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this node upgrade for support not found response a status code equal to that given
func (o *NodeUpgradeForSupportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the node upgrade for support not found response
func (o *NodeUpgradeForSupportNotFound) Code() int {
	return 404
}

func (o *NodeUpgradeForSupportNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportNotFound %s", 404, payload)
}

func (o *NodeUpgradeForSupportNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] nodeUpgradeForSupportNotFound %s", 404, payload)
}

func (o *NodeUpgradeForSupportNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpgradeForSupportDefault creates a NodeUpgradeForSupportDefault with default headers values
func NewNodeUpgradeForSupportDefault(code int) *NodeUpgradeForSupportDefault {
	return &NodeUpgradeForSupportDefault{
		_statusCode: code,
	}
}

/*
NodeUpgradeForSupportDefault describes a response with status code -1, with default header values.

Error trying to upgrade node
*/
type NodeUpgradeForSupportDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this node upgrade for support default response has a 2xx status code
func (o *NodeUpgradeForSupportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this node upgrade for support default response has a 3xx status code
func (o *NodeUpgradeForSupportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this node upgrade for support default response has a 4xx status code
func (o *NodeUpgradeForSupportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this node upgrade for support default response has a 5xx status code
func (o *NodeUpgradeForSupportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this node upgrade for support default response a status code equal to that given
func (o *NodeUpgradeForSupportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the node upgrade for support default response
func (o *NodeUpgradeForSupportDefault) Code() int {
	return o._statusCode
}

func (o *NodeUpgradeForSupportDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] NodeUpgradeForSupport default %s", o._statusCode, payload)
}

func (o *NodeUpgradeForSupportDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /nodes/upgrade/{node}/tenant/{tenant}][%d] NodeUpgradeForSupport default %s", o._statusCode, payload)
}

func (o *NodeUpgradeForSupportDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *NodeUpgradeForSupportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
