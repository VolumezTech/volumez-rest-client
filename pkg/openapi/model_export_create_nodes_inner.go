/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCreateNodesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCreateNodesInner{}

// ExportCreateNodesInner struct for ExportCreateNodesInner
type ExportCreateNodesInner struct {
	Node *string `json:"node,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewExportCreateNodesInner instantiates a new ExportCreateNodesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCreateNodesInner() *ExportCreateNodesInner {
	this := ExportCreateNodesInner{}
	return &this
}

// NewExportCreateNodesInnerWithDefaults instantiates a new ExportCreateNodesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCreateNodesInnerWithDefaults() *ExportCreateNodesInner {
	this := ExportCreateNodesInner{}
	return &this
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *ExportCreateNodesInner) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateNodesInner) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *ExportCreateNodesInner) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *ExportCreateNodesInner) SetNode(v string) {
	o.Node = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ExportCreateNodesInner) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCreateNodesInner) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ExportCreateNodesInner) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ExportCreateNodesInner) SetRole(v string) {
	o.Role = &v
}

func (o ExportCreateNodesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCreateNodesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableExportCreateNodesInner struct {
	value *ExportCreateNodesInner
	isSet bool
}

func (v NullableExportCreateNodesInner) Get() *ExportCreateNodesInner {
	return v.value
}

func (v *NullableExportCreateNodesInner) Set(val *ExportCreateNodesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCreateNodesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCreateNodesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCreateNodesInner(val *ExportCreateNodesInner) *NullableExportCreateNodesInner {
	return &NullableExportCreateNodesInner{value: val, isSet: true}
}

func (v NullableExportCreateNodesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCreateNodesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
