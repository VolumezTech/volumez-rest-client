/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AvailableVPCItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableVPCItem{}

// AvailableVPCItem struct for AvailableVPCItem
type AvailableVPCItem struct {
	Id            string  `json:"id"`
	Name          string  `json:"name"`
	SubnetId      string  `json:"subnetId"`
	SubnetName    *string `json:"subnetName,omitempty"`
	IsDefault     *bool   `json:"isDefault,omitempty"`
	ResourceGroup *string `json:"resourceGroup,omitempty"`
}

type _AvailableVPCItem AvailableVPCItem

// NewAvailableVPCItem instantiates a new AvailableVPCItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableVPCItem(id string, name string, subnetId string) *AvailableVPCItem {
	this := AvailableVPCItem{}
	this.Id = id
	this.Name = name
	this.SubnetId = subnetId
	return &this
}

// NewAvailableVPCItemWithDefaults instantiates a new AvailableVPCItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableVPCItemWithDefaults() *AvailableVPCItem {
	this := AvailableVPCItem{}
	return &this
}

// GetId returns the Id field value
func (o *AvailableVPCItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AvailableVPCItem) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AvailableVPCItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AvailableVPCItem) SetName(v string) {
	o.Name = v
}

// GetSubnetId returns the SubnetId field value
func (o *AvailableVPCItem) GetSubnetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *AvailableVPCItem) SetSubnetId(v string) {
	o.SubnetId = v
}

// GetSubnetName returns the SubnetName field value if set, zero value otherwise.
func (o *AvailableVPCItem) GetSubnetName() string {
	if o == nil || IsNil(o.SubnetName) {
		var ret string
		return ret
	}
	return *o.SubnetName
}

// GetSubnetNameOk returns a tuple with the SubnetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetSubnetNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetName) {
		return nil, false
	}
	return o.SubnetName, true
}

// HasSubnetName returns a boolean if a field has been set.
func (o *AvailableVPCItem) HasSubnetName() bool {
	if o != nil && !IsNil(o.SubnetName) {
		return true
	}

	return false
}

// SetSubnetName gets a reference to the given string and assigns it to the SubnetName field.
func (o *AvailableVPCItem) SetSubnetName(v string) {
	o.SubnetName = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *AvailableVPCItem) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *AvailableVPCItem) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *AvailableVPCItem) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetResourceGroup returns the ResourceGroup field value if set, zero value otherwise.
func (o *AvailableVPCItem) GetResourceGroup() string {
	if o == nil || IsNil(o.ResourceGroup) {
		var ret string
		return ret
	}
	return *o.ResourceGroup
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableVPCItem) GetResourceGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceGroup) {
		return nil, false
	}
	return o.ResourceGroup, true
}

// HasResourceGroup returns a boolean if a field has been set.
func (o *AvailableVPCItem) HasResourceGroup() bool {
	if o != nil && !IsNil(o.ResourceGroup) {
		return true
	}

	return false
}

// SetResourceGroup gets a reference to the given string and assigns it to the ResourceGroup field.
func (o *AvailableVPCItem) SetResourceGroup(v string) {
	o.ResourceGroup = &v
}

func (o AvailableVPCItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableVPCItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["subnetId"] = o.SubnetId
	if !IsNil(o.SubnetName) {
		toSerialize["subnetName"] = o.SubnetName
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if !IsNil(o.ResourceGroup) {
		toSerialize["resourceGroup"] = o.ResourceGroup
	}
	return toSerialize, nil
}

func (o *AvailableVPCItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"subnetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailableVPCItem := _AvailableVPCItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailableVPCItem)

	if err != nil {
		return err
	}

	*o = AvailableVPCItem(varAvailableVPCItem)

	return err
}

type NullableAvailableVPCItem struct {
	value *AvailableVPCItem
	isSet bool
}

func (v NullableAvailableVPCItem) Get() *AvailableVPCItem {
	return v.value
}

func (v *NullableAvailableVPCItem) Set(val *AvailableVPCItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableVPCItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableVPCItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableVPCItem(val *AvailableVPCItem) *NullableAvailableVPCItem {
	return &NullableAvailableVPCItem{value: val, isSet: true}
}

func (v NullableAvailableVPCItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableVPCItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
