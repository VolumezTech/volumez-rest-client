/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VirtualMediaCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualMediaCreate{}

// VirtualMediaCreate struct for VirtualMediaCreate
type VirtualMediaCreate struct {
	Selector *string `json:"selector,omitempty"`
	Flavor   *string `json:"flavor,omitempty"`
}

// NewVirtualMediaCreate instantiates a new VirtualMediaCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualMediaCreate() *VirtualMediaCreate {
	this := VirtualMediaCreate{}
	return &this
}

// NewVirtualMediaCreateWithDefaults instantiates a new VirtualMediaCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualMediaCreateWithDefaults() *VirtualMediaCreate {
	this := VirtualMediaCreate{}
	return &this
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *VirtualMediaCreate) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMediaCreate) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *VirtualMediaCreate) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *VirtualMediaCreate) SetSelector(v string) {
	o.Selector = &v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *VirtualMediaCreate) GetFlavor() string {
	if o == nil || IsNil(o.Flavor) {
		var ret string
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMediaCreate) GetFlavorOk() (*string, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *VirtualMediaCreate) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given string and assigns it to the Flavor field.
func (o *VirtualMediaCreate) SetFlavor(v string) {
	o.Flavor = &v
}

func (o VirtualMediaCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualMediaCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	return toSerialize, nil
}

type NullableVirtualMediaCreate struct {
	value *VirtualMediaCreate
	isSet bool
}

func (v NullableVirtualMediaCreate) Get() *VirtualMediaCreate {
	return v.value
}

func (v *NullableVirtualMediaCreate) Set(val *VirtualMediaCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMediaCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMediaCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMediaCreate(val *VirtualMediaCreate) *NullableVirtualMediaCreate {
	return &NullableVirtualMediaCreate{value: val, isSet: true}
}

func (v NullableVirtualMediaCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMediaCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
