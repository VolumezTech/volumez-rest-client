/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MediaModify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaModify{}

// MediaModify struct for MediaModify
type MediaModify struct {
	Offlinetime *string `json:"offlinetime,omitempty"`
}

// NewMediaModify instantiates a new MediaModify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaModify() *MediaModify {
	this := MediaModify{}
	return &this
}

// NewMediaModifyWithDefaults instantiates a new MediaModify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaModifyWithDefaults() *MediaModify {
	this := MediaModify{}
	return &this
}

// GetOfflinetime returns the Offlinetime field value if set, zero value otherwise.
func (o *MediaModify) GetOfflinetime() string {
	if o == nil || IsNil(o.Offlinetime) {
		var ret string
		return ret
	}
	return *o.Offlinetime
}

// GetOfflinetimeOk returns a tuple with the Offlinetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaModify) GetOfflinetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Offlinetime) {
		return nil, false
	}
	return o.Offlinetime, true
}

// HasOfflinetime returns a boolean if a field has been set.
func (o *MediaModify) HasOfflinetime() bool {
	if o != nil && !IsNil(o.Offlinetime) {
		return true
	}

	return false
}

// SetOfflinetime gets a reference to the given string and assigns it to the Offlinetime field.
func (o *MediaModify) SetOfflinetime(v string) {
	o.Offlinetime = &v
}

func (o MediaModify) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaModify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offlinetime) {
		toSerialize["offlinetime"] = o.Offlinetime
	}
	return toSerialize, nil
}

type NullableMediaModify struct {
	value *MediaModify
	isSet bool
}

func (v NullableMediaModify) Get() *MediaModify {
	return v.value
}

func (v *NullableMediaModify) Set(val *MediaModify) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaModify) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaModify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaModify(val *MediaModify) *NullableMediaModify {
	return &NullableMediaModify{value: val, isSet: true}
}

func (v NullableMediaModify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaModify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
