/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Snapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snapshot{}

// Snapshot struct for Snapshot
type Snapshot struct {
	Volumename           *string `json:"volumename,omitempty"`
	Volumeid             *string `json:"volumeid,omitempty"`
	Volumesize           *int32  `json:"volumesize,omitempty"`
	Name                 string  `json:"name"`
	Snapshotid           *string `json:"snapshotid,omitempty"`
	Targetsecret         *string `json:"targetsecret,omitempty"`
	Consistency          string  `json:"consistency"`
	Time                 *string `json:"time,omitempty"`
	Policy               *bool   `json:"policy,omitempty"`
	Consistencygroup     *bool   `json:"consistencygroup,omitempty"`
	Consistencygroupname *string `json:"consistencygroupname,omitempty"`
	Used                 *int32  `json:"used,omitempty"`
	State                *string `json:"state,omitempty"`
	Status               *string `json:"status,omitempty"`
	Progress             *int32  `json:"progress,omitempty"`
	Numberofattachments  *int32  `json:"numberofattachments,omitempty"`
}

type _Snapshot Snapshot

// NewSnapshot instantiates a new Snapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshot(name string, consistency string) *Snapshot {
	this := Snapshot{}
	this.Name = name
	this.Consistency = consistency
	return &this
}

// NewSnapshotWithDefaults instantiates a new Snapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotWithDefaults() *Snapshot {
	this := Snapshot{}
	return &this
}

// GetVolumename returns the Volumename field value if set, zero value otherwise.
func (o *Snapshot) GetVolumename() string {
	if o == nil || IsNil(o.Volumename) {
		var ret string
		return ret
	}
	return *o.Volumename
}

// GetVolumenameOk returns a tuple with the Volumename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetVolumenameOk() (*string, bool) {
	if o == nil || IsNil(o.Volumename) {
		return nil, false
	}
	return o.Volumename, true
}

// HasVolumename returns a boolean if a field has been set.
func (o *Snapshot) HasVolumename() bool {
	if o != nil && !IsNil(o.Volumename) {
		return true
	}

	return false
}

// SetVolumename gets a reference to the given string and assigns it to the Volumename field.
func (o *Snapshot) SetVolumename(v string) {
	o.Volumename = &v
}

// GetVolumeid returns the Volumeid field value if set, zero value otherwise.
func (o *Snapshot) GetVolumeid() string {
	if o == nil || IsNil(o.Volumeid) {
		var ret string
		return ret
	}
	return *o.Volumeid
}

// GetVolumeidOk returns a tuple with the Volumeid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetVolumeidOk() (*string, bool) {
	if o == nil || IsNil(o.Volumeid) {
		return nil, false
	}
	return o.Volumeid, true
}

// HasVolumeid returns a boolean if a field has been set.
func (o *Snapshot) HasVolumeid() bool {
	if o != nil && !IsNil(o.Volumeid) {
		return true
	}

	return false
}

// SetVolumeid gets a reference to the given string and assigns it to the Volumeid field.
func (o *Snapshot) SetVolumeid(v string) {
	o.Volumeid = &v
}

// GetVolumesize returns the Volumesize field value if set, zero value otherwise.
func (o *Snapshot) GetVolumesize() int32 {
	if o == nil || IsNil(o.Volumesize) {
		var ret int32
		return ret
	}
	return *o.Volumesize
}

// GetVolumesizeOk returns a tuple with the Volumesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetVolumesizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Volumesize) {
		return nil, false
	}
	return o.Volumesize, true
}

// HasVolumesize returns a boolean if a field has been set.
func (o *Snapshot) HasVolumesize() bool {
	if o != nil && !IsNil(o.Volumesize) {
		return true
	}

	return false
}

// SetVolumesize gets a reference to the given int32 and assigns it to the Volumesize field.
func (o *Snapshot) SetVolumesize(v int32) {
	o.Volumesize = &v
}

// GetName returns the Name field value
func (o *Snapshot) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Snapshot) SetName(v string) {
	o.Name = v
}

// GetSnapshotid returns the Snapshotid field value if set, zero value otherwise.
func (o *Snapshot) GetSnapshotid() string {
	if o == nil || IsNil(o.Snapshotid) {
		var ret string
		return ret
	}
	return *o.Snapshotid
}

// GetSnapshotidOk returns a tuple with the Snapshotid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetSnapshotidOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshotid) {
		return nil, false
	}
	return o.Snapshotid, true
}

// HasSnapshotid returns a boolean if a field has been set.
func (o *Snapshot) HasSnapshotid() bool {
	if o != nil && !IsNil(o.Snapshotid) {
		return true
	}

	return false
}

// SetSnapshotid gets a reference to the given string and assigns it to the Snapshotid field.
func (o *Snapshot) SetSnapshotid(v string) {
	o.Snapshotid = &v
}

// GetTargetsecret returns the Targetsecret field value if set, zero value otherwise.
func (o *Snapshot) GetTargetsecret() string {
	if o == nil || IsNil(o.Targetsecret) {
		var ret string
		return ret
	}
	return *o.Targetsecret
}

// GetTargetsecretOk returns a tuple with the Targetsecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetTargetsecretOk() (*string, bool) {
	if o == nil || IsNil(o.Targetsecret) {
		return nil, false
	}
	return o.Targetsecret, true
}

// HasTargetsecret returns a boolean if a field has been set.
func (o *Snapshot) HasTargetsecret() bool {
	if o != nil && !IsNil(o.Targetsecret) {
		return true
	}

	return false
}

// SetTargetsecret gets a reference to the given string and assigns it to the Targetsecret field.
func (o *Snapshot) SetTargetsecret(v string) {
	o.Targetsecret = &v
}

// GetConsistency returns the Consistency field value
func (o *Snapshot) GetConsistency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consistency
}

// GetConsistencyOk returns a tuple with the Consistency field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetConsistencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consistency, true
}

// SetConsistency sets field value
func (o *Snapshot) SetConsistency(v string) {
	o.Consistency = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *Snapshot) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *Snapshot) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *Snapshot) SetTime(v string) {
	o.Time = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *Snapshot) GetPolicy() bool {
	if o == nil || IsNil(o.Policy) {
		var ret bool
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetPolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *Snapshot) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given bool and assigns it to the Policy field.
func (o *Snapshot) SetPolicy(v bool) {
	o.Policy = &v
}

// GetConsistencygroup returns the Consistencygroup field value if set, zero value otherwise.
func (o *Snapshot) GetConsistencygroup() bool {
	if o == nil || IsNil(o.Consistencygroup) {
		var ret bool
		return ret
	}
	return *o.Consistencygroup
}

// GetConsistencygroupOk returns a tuple with the Consistencygroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetConsistencygroupOk() (*bool, bool) {
	if o == nil || IsNil(o.Consistencygroup) {
		return nil, false
	}
	return o.Consistencygroup, true
}

// HasConsistencygroup returns a boolean if a field has been set.
func (o *Snapshot) HasConsistencygroup() bool {
	if o != nil && !IsNil(o.Consistencygroup) {
		return true
	}

	return false
}

// SetConsistencygroup gets a reference to the given bool and assigns it to the Consistencygroup field.
func (o *Snapshot) SetConsistencygroup(v bool) {
	o.Consistencygroup = &v
}

// GetConsistencygroupname returns the Consistencygroupname field value if set, zero value otherwise.
func (o *Snapshot) GetConsistencygroupname() string {
	if o == nil || IsNil(o.Consistencygroupname) {
		var ret string
		return ret
	}
	return *o.Consistencygroupname
}

// GetConsistencygroupnameOk returns a tuple with the Consistencygroupname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetConsistencygroupnameOk() (*string, bool) {
	if o == nil || IsNil(o.Consistencygroupname) {
		return nil, false
	}
	return o.Consistencygroupname, true
}

// HasConsistencygroupname returns a boolean if a field has been set.
func (o *Snapshot) HasConsistencygroupname() bool {
	if o != nil && !IsNil(o.Consistencygroupname) {
		return true
	}

	return false
}

// SetConsistencygroupname gets a reference to the given string and assigns it to the Consistencygroupname field.
func (o *Snapshot) SetConsistencygroupname(v string) {
	o.Consistencygroupname = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *Snapshot) GetUsed() int32 {
	if o == nil || IsNil(o.Used) {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *Snapshot) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *Snapshot) SetUsed(v int32) {
	o.Used = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Snapshot) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Snapshot) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Snapshot) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Snapshot) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Snapshot) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Snapshot) SetStatus(v string) {
	o.Status = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Snapshot) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Snapshot) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Snapshot) SetProgress(v int32) {
	o.Progress = &v
}

// GetNumberofattachments returns the Numberofattachments field value if set, zero value otherwise.
func (o *Snapshot) GetNumberofattachments() int32 {
	if o == nil || IsNil(o.Numberofattachments) {
		var ret int32
		return ret
	}
	return *o.Numberofattachments
}

// GetNumberofattachmentsOk returns a tuple with the Numberofattachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetNumberofattachmentsOk() (*int32, bool) {
	if o == nil || IsNil(o.Numberofattachments) {
		return nil, false
	}
	return o.Numberofattachments, true
}

// HasNumberofattachments returns a boolean if a field has been set.
func (o *Snapshot) HasNumberofattachments() bool {
	if o != nil && !IsNil(o.Numberofattachments) {
		return true
	}

	return false
}

// SetNumberofattachments gets a reference to the given int32 and assigns it to the Numberofattachments field.
func (o *Snapshot) SetNumberofattachments(v int32) {
	o.Numberofattachments = &v
}

func (o Snapshot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Volumename) {
		toSerialize["volumename"] = o.Volumename
	}
	if !IsNil(o.Volumeid) {
		toSerialize["volumeid"] = o.Volumeid
	}
	if !IsNil(o.Volumesize) {
		toSerialize["volumesize"] = o.Volumesize
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Snapshotid) {
		toSerialize["snapshotid"] = o.Snapshotid
	}
	if !IsNil(o.Targetsecret) {
		toSerialize["targetsecret"] = o.Targetsecret
	}
	toSerialize["consistency"] = o.Consistency
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Consistencygroup) {
		toSerialize["consistencygroup"] = o.Consistencygroup
	}
	if !IsNil(o.Consistencygroupname) {
		toSerialize["consistencygroupname"] = o.Consistencygroupname
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Numberofattachments) {
		toSerialize["numberofattachments"] = o.Numberofattachments
	}
	return toSerialize, nil
}

func (o *Snapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"consistency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshot := _Snapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshot)

	if err != nil {
		return err
	}

	*o = Snapshot(varSnapshot)

	return err
}

type NullableSnapshot struct {
	value *Snapshot
	isSet bool
}

func (v NullableSnapshot) Get() *Snapshot {
	return v.value
}

func (v *NullableSnapshot) Set(val *Snapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshot(val *Snapshot) *NullableSnapshot {
	return &NullableSnapshot{value: val, isSet: true}
}

func (v NullableSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
