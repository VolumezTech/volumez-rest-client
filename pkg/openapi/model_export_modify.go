/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportModify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportModify{}

// ExportModify struct for ExportModify
type ExportModify struct {
	AllowedHosts []string                 `json:"allowed_hosts,omitempty"`
	Nodes        []ExportCreateNodesInner `json:"nodes,omitempty"`
}

// NewExportModify instantiates a new ExportModify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportModify() *ExportModify {
	this := ExportModify{}
	return &this
}

// NewExportModifyWithDefaults instantiates a new ExportModify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportModifyWithDefaults() *ExportModify {
	this := ExportModify{}
	return &this
}

// GetAllowedHosts returns the AllowedHosts field value if set, zero value otherwise.
func (o *ExportModify) GetAllowedHosts() []string {
	if o == nil || IsNil(o.AllowedHosts) {
		var ret []string
		return ret
	}
	return o.AllowedHosts
}

// GetAllowedHostsOk returns a tuple with the AllowedHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportModify) GetAllowedHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedHosts) {
		return nil, false
	}
	return o.AllowedHosts, true
}

// HasAllowedHosts returns a boolean if a field has been set.
func (o *ExportModify) HasAllowedHosts() bool {
	if o != nil && !IsNil(o.AllowedHosts) {
		return true
	}

	return false
}

// SetAllowedHosts gets a reference to the given []string and assigns it to the AllowedHosts field.
func (o *ExportModify) SetAllowedHosts(v []string) {
	o.AllowedHosts = v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ExportModify) GetNodes() []ExportCreateNodesInner {
	if o == nil || IsNil(o.Nodes) {
		var ret []ExportCreateNodesInner
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportModify) GetNodesOk() ([]ExportCreateNodesInner, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ExportModify) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []ExportCreateNodesInner and assigns it to the Nodes field.
func (o *ExportModify) SetNodes(v []ExportCreateNodesInner) {
	o.Nodes = v
}

func (o ExportModify) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportModify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedHosts) {
		toSerialize["allowed_hosts"] = o.AllowedHosts
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	return toSerialize, nil
}

type NullableExportModify struct {
	value *ExportModify
	isSet bool
}

func (v NullableExportModify) Get() *ExportModify {
	return v.value
}

func (v *NullableExportModify) Set(val *ExportModify) {
	v.value = val
	v.isSet = true
}

func (v NullableExportModify) IsSet() bool {
	return v.isSet
}

func (v *NullableExportModify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportModify(val *ExportModify) *NullableExportModify {
	return &NullableExportModify{value: val, isSet: true}
}

func (v NullableExportModify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportModify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
