/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResetTenantSettingsRequestSettingsToReset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResetTenantSettingsRequestSettingsToReset{}

// ResetTenantSettingsRequestSettingsToReset struct for ResetTenantSettingsRequestSettingsToReset
type ResetTenantSettingsRequestSettingsToReset struct {
	Declarative *bool `json:"declarative,omitempty"`
	Throttle    *bool `json:"throttle,omitempty"`
}

// NewResetTenantSettingsRequestSettingsToReset instantiates a new ResetTenantSettingsRequestSettingsToReset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetTenantSettingsRequestSettingsToReset() *ResetTenantSettingsRequestSettingsToReset {
	this := ResetTenantSettingsRequestSettingsToReset{}
	return &this
}

// NewResetTenantSettingsRequestSettingsToResetWithDefaults instantiates a new ResetTenantSettingsRequestSettingsToReset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetTenantSettingsRequestSettingsToResetWithDefaults() *ResetTenantSettingsRequestSettingsToReset {
	this := ResetTenantSettingsRequestSettingsToReset{}
	return &this
}

// GetDeclarative returns the Declarative field value if set, zero value otherwise.
func (o *ResetTenantSettingsRequestSettingsToReset) GetDeclarative() bool {
	if o == nil || IsNil(o.Declarative) {
		var ret bool
		return ret
	}
	return *o.Declarative
}

// GetDeclarativeOk returns a tuple with the Declarative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetTenantSettingsRequestSettingsToReset) GetDeclarativeOk() (*bool, bool) {
	if o == nil || IsNil(o.Declarative) {
		return nil, false
	}
	return o.Declarative, true
}

// HasDeclarative returns a boolean if a field has been set.
func (o *ResetTenantSettingsRequestSettingsToReset) HasDeclarative() bool {
	if o != nil && !IsNil(o.Declarative) {
		return true
	}

	return false
}

// SetDeclarative gets a reference to the given bool and assigns it to the Declarative field.
func (o *ResetTenantSettingsRequestSettingsToReset) SetDeclarative(v bool) {
	o.Declarative = &v
}

// GetThrottle returns the Throttle field value if set, zero value otherwise.
func (o *ResetTenantSettingsRequestSettingsToReset) GetThrottle() bool {
	if o == nil || IsNil(o.Throttle) {
		var ret bool
		return ret
	}
	return *o.Throttle
}

// GetThrottleOk returns a tuple with the Throttle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetTenantSettingsRequestSettingsToReset) GetThrottleOk() (*bool, bool) {
	if o == nil || IsNil(o.Throttle) {
		return nil, false
	}
	return o.Throttle, true
}

// HasThrottle returns a boolean if a field has been set.
func (o *ResetTenantSettingsRequestSettingsToReset) HasThrottle() bool {
	if o != nil && !IsNil(o.Throttle) {
		return true
	}

	return false
}

// SetThrottle gets a reference to the given bool and assigns it to the Throttle field.
func (o *ResetTenantSettingsRequestSettingsToReset) SetThrottle(v bool) {
	o.Throttle = &v
}

func (o ResetTenantSettingsRequestSettingsToReset) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResetTenantSettingsRequestSettingsToReset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Declarative) {
		toSerialize["declarative"] = o.Declarative
	}
	if !IsNil(o.Throttle) {
		toSerialize["throttle"] = o.Throttle
	}
	return toSerialize, nil
}

type NullableResetTenantSettingsRequestSettingsToReset struct {
	value *ResetTenantSettingsRequestSettingsToReset
	isSet bool
}

func (v NullableResetTenantSettingsRequestSettingsToReset) Get() *ResetTenantSettingsRequestSettingsToReset {
	return v.value
}

func (v *NullableResetTenantSettingsRequestSettingsToReset) Set(val *ResetTenantSettingsRequestSettingsToReset) {
	v.value = val
	v.isSet = true
}

func (v NullableResetTenantSettingsRequestSettingsToReset) IsSet() bool {
	return v.isSet
}

func (v *NullableResetTenantSettingsRequestSettingsToReset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetTenantSettingsRequestSettingsToReset(val *ResetTenantSettingsRequestSettingsToReset) *NullableResetTenantSettingsRequestSettingsToReset {
	return &NullableResetTenantSettingsRequestSettingsToReset{value: val, isSet: true}
}

func (v NullableResetTenantSettingsRequestSettingsToReset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetTenantSettingsRequestSettingsToReset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
