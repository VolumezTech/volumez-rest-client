/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AWSRoleItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSRoleItem{}

// AWSRoleItem struct for AWSRoleItem
type AWSRoleItem struct {
	Arn        string  `json:"arn"`
	ExternalId *string `json:"externalId,omitempty"`
}

type _AWSRoleItem AWSRoleItem

// NewAWSRoleItem instantiates a new AWSRoleItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSRoleItem(arn string) *AWSRoleItem {
	this := AWSRoleItem{}
	this.Arn = arn
	return &this
}

// NewAWSRoleItemWithDefaults instantiates a new AWSRoleItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSRoleItemWithDefaults() *AWSRoleItem {
	this := AWSRoleItem{}
	return &this
}

// GetArn returns the Arn field value
func (o *AWSRoleItem) GetArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Arn
}

// GetArnOk returns a tuple with the Arn field value
// and a boolean to check if the value has been set.
func (o *AWSRoleItem) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arn, true
}

// SetArn sets field value
func (o *AWSRoleItem) SetArn(v string) {
	o.Arn = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *AWSRoleItem) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSRoleItem) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *AWSRoleItem) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *AWSRoleItem) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o AWSRoleItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSRoleItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arn"] = o.Arn
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	return toSerialize, nil
}

func (o *AWSRoleItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWSRoleItem := _AWSRoleItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAWSRoleItem)

	if err != nil {
		return err
	}

	*o = AWSRoleItem(varAWSRoleItem)

	return err
}

type NullableAWSRoleItem struct {
	value *AWSRoleItem
	isSet bool
}

func (v NullableAWSRoleItem) Get() *AWSRoleItem {
	return v.value
}

func (v *NullableAWSRoleItem) Set(val *AWSRoleItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSRoleItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSRoleItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSRoleItem(val *AWSRoleItem) *NullableAWSRoleItem {
	return &NullableAWSRoleItem{value: val, isSet: true}
}

func (v NullableAWSRoleItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSRoleItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
