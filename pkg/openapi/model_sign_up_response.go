/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SignUpResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignUpResponse{}

// SignUpResponse struct for SignUpResponse
type SignUpResponse struct {
	Status  *int32 `json:"status,omitempty"`
	Message string `json:"message"`
}

type _SignUpResponse SignUpResponse

// NewSignUpResponse instantiates a new SignUpResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignUpResponse(message string) *SignUpResponse {
	this := SignUpResponse{}
	this.Message = message
	return &this
}

// NewSignUpResponseWithDefaults instantiates a new SignUpResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignUpResponseWithDefaults() *SignUpResponse {
	this := SignUpResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SignUpResponse) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignUpResponse) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SignUpResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *SignUpResponse) SetStatus(v int32) {
	o.Status = &v
}

// GetMessage returns the Message field value
func (o *SignUpResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SignUpResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SignUpResponse) SetMessage(v string) {
	o.Message = v
}

func (o SignUpResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignUpResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *SignUpResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignUpResponse := _SignUpResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSignUpResponse)

	if err != nil {
		return err
	}

	*o = SignUpResponse(varSignUpResponse)

	return err
}

type NullableSignUpResponse struct {
	value *SignUpResponse
	isSet bool
}

func (v NullableSignUpResponse) Get() *SignUpResponse {
	return v.value
}

func (v *NullableSignUpResponse) Set(val *SignUpResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSignUpResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSignUpResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignUpResponse(val *SignUpResponse) *NullableSignUpResponse {
	return &NullableSignUpResponse{value: val, isSet: true}
}

func (v NullableSignUpResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignUpResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
