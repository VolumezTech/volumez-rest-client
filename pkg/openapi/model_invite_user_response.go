/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InviteUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteUserResponse{}

// InviteUserResponse struct for InviteUserResponse
type InviteUserResponse struct {
	Message     string `json:"Message"`
	InviteeMail string `json:"InviteeMail"`
	Status      string `json:"Status"`
	ExpiresAt   int32  `json:"ExpiresAt"`
}

type _InviteUserResponse InviteUserResponse

// NewInviteUserResponse instantiates a new InviteUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteUserResponse(message string, inviteeMail string, status string, expiresAt int32) *InviteUserResponse {
	this := InviteUserResponse{}
	this.Message = message
	this.InviteeMail = inviteeMail
	this.Status = status
	this.ExpiresAt = expiresAt
	return &this
}

// NewInviteUserResponseWithDefaults instantiates a new InviteUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteUserResponseWithDefaults() *InviteUserResponse {
	this := InviteUserResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *InviteUserResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *InviteUserResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *InviteUserResponse) SetMessage(v string) {
	o.Message = v
}

// GetInviteeMail returns the InviteeMail field value
func (o *InviteUserResponse) GetInviteeMail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InviteeMail
}

// GetInviteeMailOk returns a tuple with the InviteeMail field value
// and a boolean to check if the value has been set.
func (o *InviteUserResponse) GetInviteeMailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InviteeMail, true
}

// SetInviteeMail sets field value
func (o *InviteUserResponse) SetInviteeMail(v string) {
	o.InviteeMail = v
}

// GetStatus returns the Status field value
func (o *InviteUserResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InviteUserResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InviteUserResponse) SetStatus(v string) {
	o.Status = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *InviteUserResponse) GetExpiresAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *InviteUserResponse) GetExpiresAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *InviteUserResponse) SetExpiresAt(v int32) {
	o.ExpiresAt = v
}

func (o InviteUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Message"] = o.Message
	toSerialize["InviteeMail"] = o.InviteeMail
	toSerialize["Status"] = o.Status
	toSerialize["ExpiresAt"] = o.ExpiresAt
	return toSerialize, nil
}

func (o *InviteUserResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Message",
		"InviteeMail",
		"Status",
		"ExpiresAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteUserResponse := _InviteUserResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteUserResponse)

	if err != nil {
		return err
	}

	*o = InviteUserResponse(varInviteUserResponse)

	return err
}

type NullableInviteUserResponse struct {
	value *InviteUserResponse
	isSet bool
}

func (v NullableInviteUserResponse) Get() *InviteUserResponse {
	return v.value
}

func (v *NullableInviteUserResponse) Set(val *InviteUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteUserResponse(val *InviteUserResponse) *NullableInviteUserResponse {
	return &NullableInviteUserResponse{value: val, isSet: true}
}

func (v NullableInviteUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
