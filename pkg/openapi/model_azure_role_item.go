/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AzureRoleItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureRoleItem{}

// AzureRoleItem struct for AzureRoleItem
type AzureRoleItem struct {
	ActiveDirectoryId string `json:"activeDirectoryId"`
	ApplicationId     string `json:"applicationId"`
	SecretId          string `json:"secretId"`
}

type _AzureRoleItem AzureRoleItem

// NewAzureRoleItem instantiates a new AzureRoleItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureRoleItem(activeDirectoryId string, applicationId string, secretId string) *AzureRoleItem {
	this := AzureRoleItem{}
	this.ActiveDirectoryId = activeDirectoryId
	this.ApplicationId = applicationId
	this.SecretId = secretId
	return &this
}

// NewAzureRoleItemWithDefaults instantiates a new AzureRoleItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureRoleItemWithDefaults() *AzureRoleItem {
	this := AzureRoleItem{}
	return &this
}

// GetActiveDirectoryId returns the ActiveDirectoryId field value
func (o *AzureRoleItem) GetActiveDirectoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActiveDirectoryId
}

// GetActiveDirectoryIdOk returns a tuple with the ActiveDirectoryId field value
// and a boolean to check if the value has been set.
func (o *AzureRoleItem) GetActiveDirectoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveDirectoryId, true
}

// SetActiveDirectoryId sets field value
func (o *AzureRoleItem) SetActiveDirectoryId(v string) {
	o.ActiveDirectoryId = v
}

// GetApplicationId returns the ApplicationId field value
func (o *AzureRoleItem) GetApplicationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value
// and a boolean to check if the value has been set.
func (o *AzureRoleItem) GetApplicationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplicationId, true
}

// SetApplicationId sets field value
func (o *AzureRoleItem) SetApplicationId(v string) {
	o.ApplicationId = v
}

// GetSecretId returns the SecretId field value
func (o *AzureRoleItem) GetSecretId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value
// and a boolean to check if the value has been set.
func (o *AzureRoleItem) GetSecretIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretId, true
}

// SetSecretId sets field value
func (o *AzureRoleItem) SetSecretId(v string) {
	o.SecretId = v
}

func (o AzureRoleItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureRoleItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeDirectoryId"] = o.ActiveDirectoryId
	toSerialize["applicationId"] = o.ApplicationId
	toSerialize["secretId"] = o.SecretId
	return toSerialize, nil
}

func (o *AzureRoleItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activeDirectoryId",
		"applicationId",
		"secretId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureRoleItem := _AzureRoleItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureRoleItem)

	if err != nil {
		return err
	}

	*o = AzureRoleItem(varAzureRoleItem)

	return err
}

type NullableAzureRoleItem struct {
	value *AzureRoleItem
	isSet bool
}

func (v NullableAzureRoleItem) Get() *AzureRoleItem {
	return v.value
}

func (v *NullableAzureRoleItem) Set(val *AzureRoleItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureRoleItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureRoleItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureRoleItem(val *AzureRoleItem) *NullableAzureRoleItem {
	return &NullableAzureRoleItem{value: val, isSet: true}
}

func (v NullableAzureRoleItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureRoleItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
