/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TenantUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantUser{}

// TenantUser struct for TenantUser
type TenantUser struct {
	Email       string `json:"Email"`
	StatusCode  *int32 `json:"StatusCode,omitempty"`
	UserName    string `json:"UserName"`
	Name        string `json:"Name"`
	CreatedDate string `json:"CreatedDate"`
	Enabled     bool   `json:"Enabled"`
}

type _TenantUser TenantUser

// NewTenantUser instantiates a new TenantUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantUser(email string, userName string, name string, createdDate string, enabled bool) *TenantUser {
	this := TenantUser{}
	this.Email = email
	this.UserName = userName
	this.Name = name
	this.CreatedDate = createdDate
	this.Enabled = enabled
	return &this
}

// NewTenantUserWithDefaults instantiates a new TenantUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantUserWithDefaults() *TenantUser {
	this := TenantUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *TenantUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TenantUser) SetEmail(v string) {
	o.Email = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *TenantUser) GetStatusCode() int32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret int32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUser) GetStatusCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *TenantUser) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given int32 and assigns it to the StatusCode field.
func (o *TenantUser) SetStatusCode(v int32) {
	o.StatusCode = &v
}

// GetUserName returns the UserName field value
func (o *TenantUser) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *TenantUser) SetUserName(v string) {
	o.UserName = v
}

// GetName returns the Name field value
func (o *TenantUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TenantUser) SetName(v string) {
	o.Name = v
}

// GetCreatedDate returns the CreatedDate field value
func (o *TenantUser) GetCreatedDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetCreatedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDate, true
}

// SetCreatedDate sets field value
func (o *TenantUser) SetCreatedDate(v string) {
	o.CreatedDate = v
}

// GetEnabled returns the Enabled field value
func (o *TenantUser) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *TenantUser) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *TenantUser) SetEnabled(v bool) {
	o.Enabled = v
}

func (o TenantUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Email"] = o.Email
	if !IsNil(o.StatusCode) {
		toSerialize["StatusCode"] = o.StatusCode
	}
	toSerialize["UserName"] = o.UserName
	toSerialize["Name"] = o.Name
	toSerialize["CreatedDate"] = o.CreatedDate
	toSerialize["Enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *TenantUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Email",
		"UserName",
		"Name",
		"CreatedDate",
		"Enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTenantUser := _TenantUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTenantUser)

	if err != nil {
		return err
	}

	*o = TenantUser(varTenantUser)

	return err
}

type NullableTenantUser struct {
	value *TenantUser
	isSet bool
}

func (v NullableTenantUser) Get() *TenantUser {
	return v.value
}

func (v *NullableTenantUser) Set(val *TenantUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantUser(val *TenantUser) *NullableTenantUser {
	return &NullableTenantUser{value: val, isSet: true}
}

func (v NullableTenantUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
