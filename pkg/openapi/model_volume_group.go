/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VolumeGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeGroup{}

// VolumeGroup struct for VolumeGroup
type VolumeGroup struct {
	Volumegroupname          *string      `json:"Volumegroupname,omitempty"`
	Encryption               *bool        `json:"encryption,omitempty"`
	Integrity                *bool        `json:"Integrity,omitempty"`
	Allocation               *string      `json:"allocation,omitempty"`
	Compression              *bool        `json:"compression,omitempty"`
	Deduplication            *bool        `json:"deduplication,omitempty"`
	Writecache               *bool        `json:"writecache,omitempty"`
	Redundancy               *int32       `json:"redundancy,omitempty"`
	Size                     *int32       `json:"size,omitempty"`
	Targetsecret             *string      `json:"targetsecret,omitempty"`
	Allocatedsize            *int32       `json:"allocatedsize,omitempty"`
	Resiliency               *string      `json:"resiliency,omitempty"`
	Raidcolumns              *int32       `json:"raidcolumns,omitempty"`
	Mediasize                *int32       `json:"mediasize,omitempty"`
	Mediabandwidthwrite      *int32       `json:"mediabandwidthwrite,omitempty"`
	Mediabandwidthread       *int32       `json:"mediabandwidthread,omitempty"`
	Mediaiopswrite           *int32       `json:"mediaiopswrite,omitempty"`
	Mediaiopsread            *int32       `json:"mediaiopsread,omitempty"`
	Media                    []string     `json:"media,omitempty"`
	Cachesize                *int32       `json:"cachesize,omitempty"`
	Cacheresiliency          *string      `json:"cacheresiliency,omitempty"`
	Cacheredundancy          *int32       `json:"cacheredundancy,omitempty"`
	Cacheraidcolumns         *int32       `json:"cacheraidcolumns,omitempty"`
	Cachemediasize           *int32       `json:"cachemediasize,omitempty"`
	Cachemediabandwidthwrite *int32       `json:"cachemediabandwidthwrite,omitempty"`
	Cachemediabandwidthread  *int32       `json:"cachemediabandwidthread,omitempty"`
	Cachemediaiopswrite      *int32       `json:"cachemediaiopswrite,omitempty"`
	Cachemediaiopsread       *int32       `json:"cachemediaiopsread,omitempty"`
	Cachemedia               []string     `json:"cachemedia,omitempty"`
	Attachments              []Attachment `json:"attachments,omitempty"`
}

// NewVolumeGroup instantiates a new VolumeGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeGroup() *VolumeGroup {
	this := VolumeGroup{}
	return &this
}

// NewVolumeGroupWithDefaults instantiates a new VolumeGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeGroupWithDefaults() *VolumeGroup {
	this := VolumeGroup{}
	return &this
}

// GetVolumegroupname returns the Volumegroupname field value if set, zero value otherwise.
func (o *VolumeGroup) GetVolumegroupname() string {
	if o == nil || IsNil(o.Volumegroupname) {
		var ret string
		return ret
	}
	return *o.Volumegroupname
}

// GetVolumegroupnameOk returns a tuple with the Volumegroupname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetVolumegroupnameOk() (*string, bool) {
	if o == nil || IsNil(o.Volumegroupname) {
		return nil, false
	}
	return o.Volumegroupname, true
}

// HasVolumegroupname returns a boolean if a field has been set.
func (o *VolumeGroup) HasVolumegroupname() bool {
	if o != nil && !IsNil(o.Volumegroupname) {
		return true
	}

	return false
}

// SetVolumegroupname gets a reference to the given string and assigns it to the Volumegroupname field.
func (o *VolumeGroup) SetVolumegroupname(v string) {
	o.Volumegroupname = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *VolumeGroup) GetEncryption() bool {
	if o == nil || IsNil(o.Encryption) {
		var ret bool
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *VolumeGroup) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given bool and assigns it to the Encryption field.
func (o *VolumeGroup) SetEncryption(v bool) {
	o.Encryption = &v
}

// GetIntegrity returns the Integrity field value if set, zero value otherwise.
func (o *VolumeGroup) GetIntegrity() bool {
	if o == nil || IsNil(o.Integrity) {
		var ret bool
		return ret
	}
	return *o.Integrity
}

// GetIntegrityOk returns a tuple with the Integrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetIntegrityOk() (*bool, bool) {
	if o == nil || IsNil(o.Integrity) {
		return nil, false
	}
	return o.Integrity, true
}

// HasIntegrity returns a boolean if a field has been set.
func (o *VolumeGroup) HasIntegrity() bool {
	if o != nil && !IsNil(o.Integrity) {
		return true
	}

	return false
}

// SetIntegrity gets a reference to the given bool and assigns it to the Integrity field.
func (o *VolumeGroup) SetIntegrity(v bool) {
	o.Integrity = &v
}

// GetAllocation returns the Allocation field value if set, zero value otherwise.
func (o *VolumeGroup) GetAllocation() string {
	if o == nil || IsNil(o.Allocation) {
		var ret string
		return ret
	}
	return *o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetAllocationOk() (*string, bool) {
	if o == nil || IsNil(o.Allocation) {
		return nil, false
	}
	return o.Allocation, true
}

// HasAllocation returns a boolean if a field has been set.
func (o *VolumeGroup) HasAllocation() bool {
	if o != nil && !IsNil(o.Allocation) {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given string and assigns it to the Allocation field.
func (o *VolumeGroup) SetAllocation(v string) {
	o.Allocation = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *VolumeGroup) GetCompression() bool {
	if o == nil || IsNil(o.Compression) {
		var ret bool
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCompressionOk() (*bool, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *VolumeGroup) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given bool and assigns it to the Compression field.
func (o *VolumeGroup) SetCompression(v bool) {
	o.Compression = &v
}

// GetDeduplication returns the Deduplication field value if set, zero value otherwise.
func (o *VolumeGroup) GetDeduplication() bool {
	if o == nil || IsNil(o.Deduplication) {
		var ret bool
		return ret
	}
	return *o.Deduplication
}

// GetDeduplicationOk returns a tuple with the Deduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.Deduplication) {
		return nil, false
	}
	return o.Deduplication, true
}

// HasDeduplication returns a boolean if a field has been set.
func (o *VolumeGroup) HasDeduplication() bool {
	if o != nil && !IsNil(o.Deduplication) {
		return true
	}

	return false
}

// SetDeduplication gets a reference to the given bool and assigns it to the Deduplication field.
func (o *VolumeGroup) SetDeduplication(v bool) {
	o.Deduplication = &v
}

// GetWritecache returns the Writecache field value if set, zero value otherwise.
func (o *VolumeGroup) GetWritecache() bool {
	if o == nil || IsNil(o.Writecache) {
		var ret bool
		return ret
	}
	return *o.Writecache
}

// GetWritecacheOk returns a tuple with the Writecache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetWritecacheOk() (*bool, bool) {
	if o == nil || IsNil(o.Writecache) {
		return nil, false
	}
	return o.Writecache, true
}

// HasWritecache returns a boolean if a field has been set.
func (o *VolumeGroup) HasWritecache() bool {
	if o != nil && !IsNil(o.Writecache) {
		return true
	}

	return false
}

// SetWritecache gets a reference to the given bool and assigns it to the Writecache field.
func (o *VolumeGroup) SetWritecache(v bool) {
	o.Writecache = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *VolumeGroup) GetRedundancy() int32 {
	if o == nil || IsNil(o.Redundancy) {
		var ret int32
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetRedundancyOk() (*int32, bool) {
	if o == nil || IsNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *VolumeGroup) HasRedundancy() bool {
	if o != nil && !IsNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given int32 and assigns it to the Redundancy field.
func (o *VolumeGroup) SetRedundancy(v int32) {
	o.Redundancy = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VolumeGroup) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VolumeGroup) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *VolumeGroup) SetSize(v int32) {
	o.Size = &v
}

// GetTargetsecret returns the Targetsecret field value if set, zero value otherwise.
func (o *VolumeGroup) GetTargetsecret() string {
	if o == nil || IsNil(o.Targetsecret) {
		var ret string
		return ret
	}
	return *o.Targetsecret
}

// GetTargetsecretOk returns a tuple with the Targetsecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetTargetsecretOk() (*string, bool) {
	if o == nil || IsNil(o.Targetsecret) {
		return nil, false
	}
	return o.Targetsecret, true
}

// HasTargetsecret returns a boolean if a field has been set.
func (o *VolumeGroup) HasTargetsecret() bool {
	if o != nil && !IsNil(o.Targetsecret) {
		return true
	}

	return false
}

// SetTargetsecret gets a reference to the given string and assigns it to the Targetsecret field.
func (o *VolumeGroup) SetTargetsecret(v string) {
	o.Targetsecret = &v
}

// GetAllocatedsize returns the Allocatedsize field value if set, zero value otherwise.
func (o *VolumeGroup) GetAllocatedsize() int32 {
	if o == nil || IsNil(o.Allocatedsize) {
		var ret int32
		return ret
	}
	return *o.Allocatedsize
}

// GetAllocatedsizeOk returns a tuple with the Allocatedsize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetAllocatedsizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Allocatedsize) {
		return nil, false
	}
	return o.Allocatedsize, true
}

// HasAllocatedsize returns a boolean if a field has been set.
func (o *VolumeGroup) HasAllocatedsize() bool {
	if o != nil && !IsNil(o.Allocatedsize) {
		return true
	}

	return false
}

// SetAllocatedsize gets a reference to the given int32 and assigns it to the Allocatedsize field.
func (o *VolumeGroup) SetAllocatedsize(v int32) {
	o.Allocatedsize = &v
}

// GetResiliency returns the Resiliency field value if set, zero value otherwise.
func (o *VolumeGroup) GetResiliency() string {
	if o == nil || IsNil(o.Resiliency) {
		var ret string
		return ret
	}
	return *o.Resiliency
}

// GetResiliencyOk returns a tuple with the Resiliency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetResiliencyOk() (*string, bool) {
	if o == nil || IsNil(o.Resiliency) {
		return nil, false
	}
	return o.Resiliency, true
}

// HasResiliency returns a boolean if a field has been set.
func (o *VolumeGroup) HasResiliency() bool {
	if o != nil && !IsNil(o.Resiliency) {
		return true
	}

	return false
}

// SetResiliency gets a reference to the given string and assigns it to the Resiliency field.
func (o *VolumeGroup) SetResiliency(v string) {
	o.Resiliency = &v
}

// GetRaidcolumns returns the Raidcolumns field value if set, zero value otherwise.
func (o *VolumeGroup) GetRaidcolumns() int32 {
	if o == nil || IsNil(o.Raidcolumns) {
		var ret int32
		return ret
	}
	return *o.Raidcolumns
}

// GetRaidcolumnsOk returns a tuple with the Raidcolumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetRaidcolumnsOk() (*int32, bool) {
	if o == nil || IsNil(o.Raidcolumns) {
		return nil, false
	}
	return o.Raidcolumns, true
}

// HasRaidcolumns returns a boolean if a field has been set.
func (o *VolumeGroup) HasRaidcolumns() bool {
	if o != nil && !IsNil(o.Raidcolumns) {
		return true
	}

	return false
}

// SetRaidcolumns gets a reference to the given int32 and assigns it to the Raidcolumns field.
func (o *VolumeGroup) SetRaidcolumns(v int32) {
	o.Raidcolumns = &v
}

// GetMediasize returns the Mediasize field value if set, zero value otherwise.
func (o *VolumeGroup) GetMediasize() int32 {
	if o == nil || IsNil(o.Mediasize) {
		var ret int32
		return ret
	}
	return *o.Mediasize
}

// GetMediasizeOk returns a tuple with the Mediasize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediasizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Mediasize) {
		return nil, false
	}
	return o.Mediasize, true
}

// HasMediasize returns a boolean if a field has been set.
func (o *VolumeGroup) HasMediasize() bool {
	if o != nil && !IsNil(o.Mediasize) {
		return true
	}

	return false
}

// SetMediasize gets a reference to the given int32 and assigns it to the Mediasize field.
func (o *VolumeGroup) SetMediasize(v int32) {
	o.Mediasize = &v
}

// GetMediabandwidthwrite returns the Mediabandwidthwrite field value if set, zero value otherwise.
func (o *VolumeGroup) GetMediabandwidthwrite() int32 {
	if o == nil || IsNil(o.Mediabandwidthwrite) {
		var ret int32
		return ret
	}
	return *o.Mediabandwidthwrite
}

// GetMediabandwidthwriteOk returns a tuple with the Mediabandwidthwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediabandwidthwriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Mediabandwidthwrite) {
		return nil, false
	}
	return o.Mediabandwidthwrite, true
}

// HasMediabandwidthwrite returns a boolean if a field has been set.
func (o *VolumeGroup) HasMediabandwidthwrite() bool {
	if o != nil && !IsNil(o.Mediabandwidthwrite) {
		return true
	}

	return false
}

// SetMediabandwidthwrite gets a reference to the given int32 and assigns it to the Mediabandwidthwrite field.
func (o *VolumeGroup) SetMediabandwidthwrite(v int32) {
	o.Mediabandwidthwrite = &v
}

// GetMediabandwidthread returns the Mediabandwidthread field value if set, zero value otherwise.
func (o *VolumeGroup) GetMediabandwidthread() int32 {
	if o == nil || IsNil(o.Mediabandwidthread) {
		var ret int32
		return ret
	}
	return *o.Mediabandwidthread
}

// GetMediabandwidthreadOk returns a tuple with the Mediabandwidthread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediabandwidthreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Mediabandwidthread) {
		return nil, false
	}
	return o.Mediabandwidthread, true
}

// HasMediabandwidthread returns a boolean if a field has been set.
func (o *VolumeGroup) HasMediabandwidthread() bool {
	if o != nil && !IsNil(o.Mediabandwidthread) {
		return true
	}

	return false
}

// SetMediabandwidthread gets a reference to the given int32 and assigns it to the Mediabandwidthread field.
func (o *VolumeGroup) SetMediabandwidthread(v int32) {
	o.Mediabandwidthread = &v
}

// GetMediaiopswrite returns the Mediaiopswrite field value if set, zero value otherwise.
func (o *VolumeGroup) GetMediaiopswrite() int32 {
	if o == nil || IsNil(o.Mediaiopswrite) {
		var ret int32
		return ret
	}
	return *o.Mediaiopswrite
}

// GetMediaiopswriteOk returns a tuple with the Mediaiopswrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediaiopswriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Mediaiopswrite) {
		return nil, false
	}
	return o.Mediaiopswrite, true
}

// HasMediaiopswrite returns a boolean if a field has been set.
func (o *VolumeGroup) HasMediaiopswrite() bool {
	if o != nil && !IsNil(o.Mediaiopswrite) {
		return true
	}

	return false
}

// SetMediaiopswrite gets a reference to the given int32 and assigns it to the Mediaiopswrite field.
func (o *VolumeGroup) SetMediaiopswrite(v int32) {
	o.Mediaiopswrite = &v
}

// GetMediaiopsread returns the Mediaiopsread field value if set, zero value otherwise.
func (o *VolumeGroup) GetMediaiopsread() int32 {
	if o == nil || IsNil(o.Mediaiopsread) {
		var ret int32
		return ret
	}
	return *o.Mediaiopsread
}

// GetMediaiopsreadOk returns a tuple with the Mediaiopsread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediaiopsreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Mediaiopsread) {
		return nil, false
	}
	return o.Mediaiopsread, true
}

// HasMediaiopsread returns a boolean if a field has been set.
func (o *VolumeGroup) HasMediaiopsread() bool {
	if o != nil && !IsNil(o.Mediaiopsread) {
		return true
	}

	return false
}

// SetMediaiopsread gets a reference to the given int32 and assigns it to the Mediaiopsread field.
func (o *VolumeGroup) SetMediaiopsread(v int32) {
	o.Mediaiopsread = &v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *VolumeGroup) GetMedia() []string {
	if o == nil || IsNil(o.Media) {
		var ret []string
		return ret
	}
	return o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetMediaOk() ([]string, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *VolumeGroup) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given []string and assigns it to the Media field.
func (o *VolumeGroup) SetMedia(v []string) {
	o.Media = v
}

// GetCachesize returns the Cachesize field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachesize() int32 {
	if o == nil || IsNil(o.Cachesize) {
		var ret int32
		return ret
	}
	return *o.Cachesize
}

// GetCachesizeOk returns a tuple with the Cachesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachesizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachesize) {
		return nil, false
	}
	return o.Cachesize, true
}

// HasCachesize returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachesize() bool {
	if o != nil && !IsNil(o.Cachesize) {
		return true
	}

	return false
}

// SetCachesize gets a reference to the given int32 and assigns it to the Cachesize field.
func (o *VolumeGroup) SetCachesize(v int32) {
	o.Cachesize = &v
}

// GetCacheresiliency returns the Cacheresiliency field value if set, zero value otherwise.
func (o *VolumeGroup) GetCacheresiliency() string {
	if o == nil || IsNil(o.Cacheresiliency) {
		var ret string
		return ret
	}
	return *o.Cacheresiliency
}

// GetCacheresiliencyOk returns a tuple with the Cacheresiliency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCacheresiliencyOk() (*string, bool) {
	if o == nil || IsNil(o.Cacheresiliency) {
		return nil, false
	}
	return o.Cacheresiliency, true
}

// HasCacheresiliency returns a boolean if a field has been set.
func (o *VolumeGroup) HasCacheresiliency() bool {
	if o != nil && !IsNil(o.Cacheresiliency) {
		return true
	}

	return false
}

// SetCacheresiliency gets a reference to the given string and assigns it to the Cacheresiliency field.
func (o *VolumeGroup) SetCacheresiliency(v string) {
	o.Cacheresiliency = &v
}

// GetCacheredundancy returns the Cacheredundancy field value if set, zero value otherwise.
func (o *VolumeGroup) GetCacheredundancy() int32 {
	if o == nil || IsNil(o.Cacheredundancy) {
		var ret int32
		return ret
	}
	return *o.Cacheredundancy
}

// GetCacheredundancyOk returns a tuple with the Cacheredundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCacheredundancyOk() (*int32, bool) {
	if o == nil || IsNil(o.Cacheredundancy) {
		return nil, false
	}
	return o.Cacheredundancy, true
}

// HasCacheredundancy returns a boolean if a field has been set.
func (o *VolumeGroup) HasCacheredundancy() bool {
	if o != nil && !IsNil(o.Cacheredundancy) {
		return true
	}

	return false
}

// SetCacheredundancy gets a reference to the given int32 and assigns it to the Cacheredundancy field.
func (o *VolumeGroup) SetCacheredundancy(v int32) {
	o.Cacheredundancy = &v
}

// GetCacheraidcolumns returns the Cacheraidcolumns field value if set, zero value otherwise.
func (o *VolumeGroup) GetCacheraidcolumns() int32 {
	if o == nil || IsNil(o.Cacheraidcolumns) {
		var ret int32
		return ret
	}
	return *o.Cacheraidcolumns
}

// GetCacheraidcolumnsOk returns a tuple with the Cacheraidcolumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCacheraidcolumnsOk() (*int32, bool) {
	if o == nil || IsNil(o.Cacheraidcolumns) {
		return nil, false
	}
	return o.Cacheraidcolumns, true
}

// HasCacheraidcolumns returns a boolean if a field has been set.
func (o *VolumeGroup) HasCacheraidcolumns() bool {
	if o != nil && !IsNil(o.Cacheraidcolumns) {
		return true
	}

	return false
}

// SetCacheraidcolumns gets a reference to the given int32 and assigns it to the Cacheraidcolumns field.
func (o *VolumeGroup) SetCacheraidcolumns(v int32) {
	o.Cacheraidcolumns = &v
}

// GetCachemediasize returns the Cachemediasize field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemediasize() int32 {
	if o == nil || IsNil(o.Cachemediasize) {
		var ret int32
		return ret
	}
	return *o.Cachemediasize
}

// GetCachemediasizeOk returns a tuple with the Cachemediasize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediasizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachemediasize) {
		return nil, false
	}
	return o.Cachemediasize, true
}

// HasCachemediasize returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemediasize() bool {
	if o != nil && !IsNil(o.Cachemediasize) {
		return true
	}

	return false
}

// SetCachemediasize gets a reference to the given int32 and assigns it to the Cachemediasize field.
func (o *VolumeGroup) SetCachemediasize(v int32) {
	o.Cachemediasize = &v
}

// GetCachemediabandwidthwrite returns the Cachemediabandwidthwrite field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemediabandwidthwrite() int32 {
	if o == nil || IsNil(o.Cachemediabandwidthwrite) {
		var ret int32
		return ret
	}
	return *o.Cachemediabandwidthwrite
}

// GetCachemediabandwidthwriteOk returns a tuple with the Cachemediabandwidthwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediabandwidthwriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachemediabandwidthwrite) {
		return nil, false
	}
	return o.Cachemediabandwidthwrite, true
}

// HasCachemediabandwidthwrite returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemediabandwidthwrite() bool {
	if o != nil && !IsNil(o.Cachemediabandwidthwrite) {
		return true
	}

	return false
}

// SetCachemediabandwidthwrite gets a reference to the given int32 and assigns it to the Cachemediabandwidthwrite field.
func (o *VolumeGroup) SetCachemediabandwidthwrite(v int32) {
	o.Cachemediabandwidthwrite = &v
}

// GetCachemediabandwidthread returns the Cachemediabandwidthread field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemediabandwidthread() int32 {
	if o == nil || IsNil(o.Cachemediabandwidthread) {
		var ret int32
		return ret
	}
	return *o.Cachemediabandwidthread
}

// GetCachemediabandwidthreadOk returns a tuple with the Cachemediabandwidthread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediabandwidthreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachemediabandwidthread) {
		return nil, false
	}
	return o.Cachemediabandwidthread, true
}

// HasCachemediabandwidthread returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemediabandwidthread() bool {
	if o != nil && !IsNil(o.Cachemediabandwidthread) {
		return true
	}

	return false
}

// SetCachemediabandwidthread gets a reference to the given int32 and assigns it to the Cachemediabandwidthread field.
func (o *VolumeGroup) SetCachemediabandwidthread(v int32) {
	o.Cachemediabandwidthread = &v
}

// GetCachemediaiopswrite returns the Cachemediaiopswrite field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemediaiopswrite() int32 {
	if o == nil || IsNil(o.Cachemediaiopswrite) {
		var ret int32
		return ret
	}
	return *o.Cachemediaiopswrite
}

// GetCachemediaiopswriteOk returns a tuple with the Cachemediaiopswrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediaiopswriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachemediaiopswrite) {
		return nil, false
	}
	return o.Cachemediaiopswrite, true
}

// HasCachemediaiopswrite returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemediaiopswrite() bool {
	if o != nil && !IsNil(o.Cachemediaiopswrite) {
		return true
	}

	return false
}

// SetCachemediaiopswrite gets a reference to the given int32 and assigns it to the Cachemediaiopswrite field.
func (o *VolumeGroup) SetCachemediaiopswrite(v int32) {
	o.Cachemediaiopswrite = &v
}

// GetCachemediaiopsread returns the Cachemediaiopsread field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemediaiopsread() int32 {
	if o == nil || IsNil(o.Cachemediaiopsread) {
		var ret int32
		return ret
	}
	return *o.Cachemediaiopsread
}

// GetCachemediaiopsreadOk returns a tuple with the Cachemediaiopsread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediaiopsreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Cachemediaiopsread) {
		return nil, false
	}
	return o.Cachemediaiopsread, true
}

// HasCachemediaiopsread returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemediaiopsread() bool {
	if o != nil && !IsNil(o.Cachemediaiopsread) {
		return true
	}

	return false
}

// SetCachemediaiopsread gets a reference to the given int32 and assigns it to the Cachemediaiopsread field.
func (o *VolumeGroup) SetCachemediaiopsread(v int32) {
	o.Cachemediaiopsread = &v
}

// GetCachemedia returns the Cachemedia field value if set, zero value otherwise.
func (o *VolumeGroup) GetCachemedia() []string {
	if o == nil || IsNil(o.Cachemedia) {
		var ret []string
		return ret
	}
	return o.Cachemedia
}

// GetCachemediaOk returns a tuple with the Cachemedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetCachemediaOk() ([]string, bool) {
	if o == nil || IsNil(o.Cachemedia) {
		return nil, false
	}
	return o.Cachemedia, true
}

// HasCachemedia returns a boolean if a field has been set.
func (o *VolumeGroup) HasCachemedia() bool {
	if o != nil && !IsNil(o.Cachemedia) {
		return true
	}

	return false
}

// SetCachemedia gets a reference to the given []string and assigns it to the Cachemedia field.
func (o *VolumeGroup) SetCachemedia(v []string) {
	o.Cachemedia = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *VolumeGroup) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeGroup) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *VolumeGroup) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *VolumeGroup) SetAttachments(v []Attachment) {
	o.Attachments = v
}

func (o VolumeGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Volumegroupname) {
		toSerialize["Volumegroupname"] = o.Volumegroupname
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !IsNil(o.Integrity) {
		toSerialize["Integrity"] = o.Integrity
	}
	if !IsNil(o.Allocation) {
		toSerialize["allocation"] = o.Allocation
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Deduplication) {
		toSerialize["deduplication"] = o.Deduplication
	}
	if !IsNil(o.Writecache) {
		toSerialize["writecache"] = o.Writecache
	}
	if !IsNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Targetsecret) {
		toSerialize["targetsecret"] = o.Targetsecret
	}
	if !IsNil(o.Allocatedsize) {
		toSerialize["allocatedsize"] = o.Allocatedsize
	}
	if !IsNil(o.Resiliency) {
		toSerialize["resiliency"] = o.Resiliency
	}
	if !IsNil(o.Raidcolumns) {
		toSerialize["raidcolumns"] = o.Raidcolumns
	}
	if !IsNil(o.Mediasize) {
		toSerialize["mediasize"] = o.Mediasize
	}
	if !IsNil(o.Mediabandwidthwrite) {
		toSerialize["mediabandwidthwrite"] = o.Mediabandwidthwrite
	}
	if !IsNil(o.Mediabandwidthread) {
		toSerialize["mediabandwidthread"] = o.Mediabandwidthread
	}
	if !IsNil(o.Mediaiopswrite) {
		toSerialize["mediaiopswrite"] = o.Mediaiopswrite
	}
	if !IsNil(o.Mediaiopsread) {
		toSerialize["mediaiopsread"] = o.Mediaiopsread
	}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Cachesize) {
		toSerialize["cachesize"] = o.Cachesize
	}
	if !IsNil(o.Cacheresiliency) {
		toSerialize["cacheresiliency"] = o.Cacheresiliency
	}
	if !IsNil(o.Cacheredundancy) {
		toSerialize["cacheredundancy"] = o.Cacheredundancy
	}
	if !IsNil(o.Cacheraidcolumns) {
		toSerialize["cacheraidcolumns"] = o.Cacheraidcolumns
	}
	if !IsNil(o.Cachemediasize) {
		toSerialize["cachemediasize"] = o.Cachemediasize
	}
	if !IsNil(o.Cachemediabandwidthwrite) {
		toSerialize["cachemediabandwidthwrite"] = o.Cachemediabandwidthwrite
	}
	if !IsNil(o.Cachemediabandwidthread) {
		toSerialize["cachemediabandwidthread"] = o.Cachemediabandwidthread
	}
	if !IsNil(o.Cachemediaiopswrite) {
		toSerialize["cachemediaiopswrite"] = o.Cachemediaiopswrite
	}
	if !IsNil(o.Cachemediaiopsread) {
		toSerialize["cachemediaiopsread"] = o.Cachemediaiopsread
	}
	if !IsNil(o.Cachemedia) {
		toSerialize["cachemedia"] = o.Cachemedia
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	return toSerialize, nil
}

type NullableVolumeGroup struct {
	value *VolumeGroup
	isSet bool
}

func (v NullableVolumeGroup) Get() *VolumeGroup {
	return v.value
}

func (v *NullableVolumeGroup) Set(val *VolumeGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroup(val *VolumeGroup) *NullableVolumeGroup {
	return &NullableVolumeGroup{value: val, isSet: true}
}

func (v NullableVolumeGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
