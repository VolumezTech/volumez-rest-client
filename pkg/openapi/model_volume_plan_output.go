/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VolumePlanOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumePlanOutput{}

// VolumePlanOutput struct for VolumePlanOutput
type VolumePlanOutput struct {
	Message *string `json:"Message,omitempty"`
	Success *bool   `json:"Success,omitempty"`
	Plans   []Plan  `json:"Plans,omitempty"`
}

// NewVolumePlanOutput instantiates a new VolumePlanOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumePlanOutput() *VolumePlanOutput {
	this := VolumePlanOutput{}
	return &this
}

// NewVolumePlanOutputWithDefaults instantiates a new VolumePlanOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumePlanOutputWithDefaults() *VolumePlanOutput {
	this := VolumePlanOutput{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *VolumePlanOutput) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumePlanOutput) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *VolumePlanOutput) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *VolumePlanOutput) SetMessage(v string) {
	o.Message = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *VolumePlanOutput) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumePlanOutput) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *VolumePlanOutput) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *VolumePlanOutput) SetSuccess(v bool) {
	o.Success = &v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *VolumePlanOutput) GetPlans() []Plan {
	if o == nil || IsNil(o.Plans) {
		var ret []Plan
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumePlanOutput) GetPlansOk() ([]Plan, bool) {
	if o == nil || IsNil(o.Plans) {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *VolumePlanOutput) HasPlans() bool {
	if o != nil && !IsNil(o.Plans) {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []Plan and assigns it to the Plans field.
func (o *VolumePlanOutput) SetPlans(v []Plan) {
	o.Plans = v
}

func (o VolumePlanOutput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumePlanOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !IsNil(o.Success) {
		toSerialize["Success"] = o.Success
	}
	if !IsNil(o.Plans) {
		toSerialize["Plans"] = o.Plans
	}
	return toSerialize, nil
}

type NullableVolumePlanOutput struct {
	value *VolumePlanOutput
	isSet bool
}

func (v NullableVolumePlanOutput) Get() *VolumePlanOutput {
	return v.value
}

func (v *NullableVolumePlanOutput) Set(val *VolumePlanOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumePlanOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumePlanOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumePlanOutput(val *VolumePlanOutput) *NullableVolumePlanOutput {
	return &NullableVolumePlanOutput{value: val, isSet: true}
}

func (v NullableVolumePlanOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumePlanOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
