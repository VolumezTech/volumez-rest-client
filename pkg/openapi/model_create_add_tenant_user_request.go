/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateAddTenantUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAddTenantUserRequest{}

// CreateAddTenantUserRequest struct for CreateAddTenantUserRequest
type CreateAddTenantUserRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Name     string `json:"name"`
	TenantId string `json:"tenantId"`
}

type _CreateAddTenantUserRequest CreateAddTenantUserRequest

// NewCreateAddTenantUserRequest instantiates a new CreateAddTenantUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAddTenantUserRequest(email string, password string, name string, tenantId string) *CreateAddTenantUserRequest {
	this := CreateAddTenantUserRequest{}
	this.Email = email
	this.Password = password
	this.Name = name
	this.TenantId = tenantId
	return &this
}

// NewCreateAddTenantUserRequestWithDefaults instantiates a new CreateAddTenantUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAddTenantUserRequestWithDefaults() *CreateAddTenantUserRequest {
	this := CreateAddTenantUserRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateAddTenantUserRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateAddTenantUserRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateAddTenantUserRequest) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *CreateAddTenantUserRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CreateAddTenantUserRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CreateAddTenantUserRequest) SetPassword(v string) {
	o.Password = v
}

// GetName returns the Name field value
func (o *CreateAddTenantUserRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateAddTenantUserRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateAddTenantUserRequest) SetName(v string) {
	o.Name = v
}

// GetTenantId returns the TenantId field value
func (o *CreateAddTenantUserRequest) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *CreateAddTenantUserRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *CreateAddTenantUserRequest) SetTenantId(v string) {
	o.TenantId = v
}

func (o CreateAddTenantUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAddTenantUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	toSerialize["name"] = o.Name
	toSerialize["tenantId"] = o.TenantId
	return toSerialize, nil
}

func (o *CreateAddTenantUserRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
		"name",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAddTenantUserRequest := _CreateAddTenantUserRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAddTenantUserRequest)

	if err != nil {
		return err
	}

	*o = CreateAddTenantUserRequest(varCreateAddTenantUserRequest)

	return err
}

type NullableCreateAddTenantUserRequest struct {
	value *CreateAddTenantUserRequest
	isSet bool
}

func (v NullableCreateAddTenantUserRequest) Get() *CreateAddTenantUserRequest {
	return v.value
}

func (v *NullableCreateAddTenantUserRequest) Set(val *CreateAddTenantUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAddTenantUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAddTenantUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAddTenantUserRequest(val *CreateAddTenantUserRequest) *NullableCreateAddTenantUserRequest {
	return &NullableCreateAddTenantUserRequest{value: val, isSet: true}
}

func (v NullableCreateAddTenantUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAddTenantUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
