/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AssociationCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationCreate{}

// AssociationCreate struct for AssociationCreate
type AssociationCreate struct {
	Name       *string `json:"name,omitempty"`
	Volume     *string `json:"volume,omitempty"`
	Snapshot   *string `json:"snapshot,omitempty"`
	Mountpoint *string `json:"mountpoint,omitempty"`
	Selector   *string `json:"selector,omitempty"`
}

// NewAssociationCreate instantiates a new AssociationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationCreate() *AssociationCreate {
	this := AssociationCreate{}
	return &this
}

// NewAssociationCreateWithDefaults instantiates a new AssociationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationCreateWithDefaults() *AssociationCreate {
	this := AssociationCreate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssociationCreate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationCreate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssociationCreate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssociationCreate) SetName(v string) {
	o.Name = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *AssociationCreate) GetVolume() string {
	if o == nil || IsNil(o.Volume) {
		var ret string
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationCreate) GetVolumeOk() (*string, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *AssociationCreate) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given string and assigns it to the Volume field.
func (o *AssociationCreate) SetVolume(v string) {
	o.Volume = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *AssociationCreate) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationCreate) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *AssociationCreate) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *AssociationCreate) SetSnapshot(v string) {
	o.Snapshot = &v
}

// GetMountpoint returns the Mountpoint field value if set, zero value otherwise.
func (o *AssociationCreate) GetMountpoint() string {
	if o == nil || IsNil(o.Mountpoint) {
		var ret string
		return ret
	}
	return *o.Mountpoint
}

// GetMountpointOk returns a tuple with the Mountpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationCreate) GetMountpointOk() (*string, bool) {
	if o == nil || IsNil(o.Mountpoint) {
		return nil, false
	}
	return o.Mountpoint, true
}

// HasMountpoint returns a boolean if a field has been set.
func (o *AssociationCreate) HasMountpoint() bool {
	if o != nil && !IsNil(o.Mountpoint) {
		return true
	}

	return false
}

// SetMountpoint gets a reference to the given string and assigns it to the Mountpoint field.
func (o *AssociationCreate) SetMountpoint(v string) {
	o.Mountpoint = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AssociationCreate) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationCreate) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AssociationCreate) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *AssociationCreate) SetSelector(v string) {
	o.Selector = &v
}

func (o AssociationCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.Mountpoint) {
		toSerialize["mountpoint"] = o.Mountpoint
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableAssociationCreate struct {
	value *AssociationCreate
	isSet bool
}

func (v NullableAssociationCreate) Get() *AssociationCreate {
	return v.value
}

func (v *NullableAssociationCreate) Set(val *AssociationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationCreate(val *AssociationCreate) *NullableAssociationCreate {
	return &NullableAssociationCreate{value: val, isSet: true}
}

func (v NullableAssociationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
