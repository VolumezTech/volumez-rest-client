/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Plan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plan{}

// Plan struct for Plan
type Plan struct {
	Volumegroup            VolumeGroup  `json:"volumegroup"`
	Replicationvolumegroup *VolumeGroup `json:"replicationvolumegroup,omitempty"`
}

type _Plan Plan

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(volumegroup VolumeGroup) *Plan {
	this := Plan{}
	this.Volumegroup = volumegroup
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetVolumegroup returns the Volumegroup field value
func (o *Plan) GetVolumegroup() VolumeGroup {
	if o == nil {
		var ret VolumeGroup
		return ret
	}

	return o.Volumegroup
}

// GetVolumegroupOk returns a tuple with the Volumegroup field value
// and a boolean to check if the value has been set.
func (o *Plan) GetVolumegroupOk() (*VolumeGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volumegroup, true
}

// SetVolumegroup sets field value
func (o *Plan) SetVolumegroup(v VolumeGroup) {
	o.Volumegroup = v
}

// GetReplicationvolumegroup returns the Replicationvolumegroup field value if set, zero value otherwise.
func (o *Plan) GetReplicationvolumegroup() VolumeGroup {
	if o == nil || IsNil(o.Replicationvolumegroup) {
		var ret VolumeGroup
		return ret
	}
	return *o.Replicationvolumegroup
}

// GetReplicationvolumegroupOk returns a tuple with the Replicationvolumegroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetReplicationvolumegroupOk() (*VolumeGroup, bool) {
	if o == nil || IsNil(o.Replicationvolumegroup) {
		return nil, false
	}
	return o.Replicationvolumegroup, true
}

// HasReplicationvolumegroup returns a boolean if a field has been set.
func (o *Plan) HasReplicationvolumegroup() bool {
	if o != nil && !IsNil(o.Replicationvolumegroup) {
		return true
	}

	return false
}

// SetReplicationvolumegroup gets a reference to the given VolumeGroup and assigns it to the Replicationvolumegroup field.
func (o *Plan) SetReplicationvolumegroup(v VolumeGroup) {
	o.Replicationvolumegroup = &v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volumegroup"] = o.Volumegroup
	if !IsNil(o.Replicationvolumegroup) {
		toSerialize["replicationvolumegroup"] = o.Replicationvolumegroup
	}
	return toSerialize, nil
}

func (o *Plan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volumegroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlan := _Plan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlan)

	if err != nil {
		return err
	}

	*o = Plan(varPlan)

	return err
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
