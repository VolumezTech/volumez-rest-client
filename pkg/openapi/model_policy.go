/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Policy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Policy{}

// Policy struct for Policy
type Policy struct {
	// A name for the policy. The name can be any non-empty string that does not contain a white space.
	Name string `json:"name"`
	// Enter the maximum write IOPS that a volume is expected to sustain (assuming 8K writes). Write IOPS should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Iopswrite *int32 `json:"iopswrite,omitempty"`
	// Enter the maximum read IOPS that a volume is expected to sustain (assuming 8K reads). Read IOPS should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Iopsread *int32 `json:"iopsread,omitempty"`
	// Enter the maximum write bandwidth that a volume is expected to sustain. Write Bandwidth should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Bandwidthwrite *int32 `json:"bandwidthwrite,omitempty"`
	// Enter the maximum read bandwidth that a volume is expected to sustain. Read Bandwidth should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Bandwidthread *int32 `json:"bandwidthread,omitempty"`
	// Enter the maximum latency that a volume is expected to sustain. Write latency should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Latencywrite *int32 `json:"latencywrite,omitempty"`
	// Enter the maximum read IOPS that a volume is expected to sustain. Read latency should be a positive integer number. Volumez will guarantee to provide this performance, regardless of the volume size or other volumes.
	Latencyread *int32 `json:"latencyread,omitempty"`
	//  If not all the reads are hot (i.e., Percentage of Cold Reads is >0) – Enter the more relaxed constraints for read latencies of cold data.  Valid values: non-negative integer number, that is larger than “Read Latency”.
	Latencyreadcold *int32 `json:"latencyreadcold,omitempty"`
	// Enter the percentage of the volume’s capacity that is expected to be “cold” (i.e. expected to only have infrequent reads). Default is 0%. Values that are greater than 0 give Volumez the option to use more economic media with more relaxed read performance requirements. Valid values: Integers in the range of 0..100.
	Colddata *int32 `json:"colddata,omitempty"`
	// Setting this value to “Yes” directs Volumez to prefer volume configurations where reads are usually happening from disks that are in the same zone as the application. This saves east-west network traffic across zones, however more media per zone will be required to achieve read-IOPs requirements. Set this value to “Yes” if you have network constraints (bandwidth or cost) across your zones; otherwise set it to “No”.
	Localzoneread *bool `json:"localzoneread,omitempty"`
	// Setting this value to “Yes” directs Volumez to over-provision volumes in a way that even after having a failure, the volumes will have the desired performance. Setting this value to “No” directs Volumez to provision volumes according to the desired performance, however in a case of failure – performance may be impacted. The default value is “No”.
	Failureperformance *bool `json:"failureperformance,omitempty"`
	// Choosing “Capacity” directs Volumez to prefer using capacity-saving methods (such as compression, deduplication, erasure coding and thin provisioning) where relevant, in order to consume the minimum amount of raw media. Using such methods might take some CPU cycles, and might reduce the performance of your volumes (it will still be within the range you specified). Choosing “Balanced” directs Volumez to prefer using some capacity-saving methods where relevant, in order to use less raw media, while consuming a small amount of CPU cycles. “Performance Optimized” directs Volumez to avoid using capacity-saving any methods (such as compression and deduplication) that reduce media consumption. This way applications can get the optimal performance from their media, however more raw media might be consumed to provision Performance-Optimized volumes.
	Capacityoptimization string `json:"capacityoptimization"`
	// Enter how much logical capacity is reserved up-front for the applications to use. If more capacity is needed for the volume, it will be allocated based on availability of media. Capacities that are reserved can be used for the volume itself and for its snapshots. For example – Use 0% for thin-provisioned volumes, 130% for thick-provisioned volumes with estimated 30% of space for snapshots. Valid values are 0%-500%, default is 20%.
	Capacityreservation *int32 `json:"capacityreservation,omitempty"`
	//  Enter how many media failures (e.g. disk, memory card) the system is required to sustain, and still serve volumes of this policy. A value of “0” means any disk failure will result data unavailability and loss. Valid values are 0..3, default value is 2.
	Resiliencymedia *int32 `json:"resiliencymedia,omitempty"`
	// Enter how many Volumez node (e.g. EC2 instance, server) failures the system is required to sustain, and still serve volumes of this policy. This is different than “Media failures” because sometimes multiple media copies may end on a single node. A value of “0” means any node failure will result data unavailability and loss. Valid values are 0..3, default value is 1.
	Resiliencynode *int32 `json:"resiliencynode,omitempty"`
	// Enter how many zones (e.g. AWS availability zones, DataCenters Buildings) failures the system is required to sustain, and still serve volumes of this policy. Note: zones are assumed to be within the same metro distance, and resiliency to zone failures means cross-zone network traffic. Valid values are 0..2, default value is 1.
	Resiliencyzone *int32 `json:"resiliencyzone,omitempty"`
	// Enter “YES” to encrypt the data in server where the application is running. Note: No change is needed in the applications themselves, however encryption will consume some CPU cycles on the application server. Default value NO.
	Encryption *bool `json:"encryption,omitempty"`
	// Enter “YES” to direct Volumez to only use media with disk encryption capabilities. Note that specifying “NO” can still use such media, however it is not a must to use it. Default value: NO.
	Sed *bool `json:"sed,omitempty"`
	// Enter “YES” to direct Volumez to activate the “Device Mapper integrity” protection for the volume. This capability provides strong integrity checking. Note: No change is needed in the applications themselves, however Data Integrity will consume non-negligible CPU cycles on the application server. Default value: NO.
	Integrity          *bool   `json:"integrity,omitempty"`
	Snapshotkeep       *int32  `json:"snapshotkeep,omitempty"`
	Snapshotfrequency  *string `json:"snapshotfrequency,omitempty"`
	Snapshotday        *int32  `json:"snapshotday,omitempty"`
	Snapshothour       *int32  `json:"snapshothour,omitempty"`
	Snapshotminute     *int32  `json:"snapshotminute,omitempty"`
	CreatedbyuserName  *string `json:"createdbyuserName,omitempty"`
	Createdbyuseremail *string `json:"createdbyuseremail,omitempty"`
	Createdtime        *string `json:"createdtime,omitempty"`
	Updatebyusername   *string `json:"updatebyusername,omitempty"`
	UpdatebyUseremail  *string `json:"updatebyUseremail,omitempty"`
	Updatetime         *string `json:"updatetime,omitempty"`
}

type _Policy Policy

// NewPolicy instantiates a new Policy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicy(name string, capacityoptimization string) *Policy {
	this := Policy{}
	this.Name = name
	this.Capacityoptimization = capacityoptimization
	return &this
}

// NewPolicyWithDefaults instantiates a new Policy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyWithDefaults() *Policy {
	this := Policy{}
	return &this
}

// GetName returns the Name field value
func (o *Policy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Policy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Policy) SetName(v string) {
	o.Name = v
}

// GetIopswrite returns the Iopswrite field value if set, zero value otherwise.
func (o *Policy) GetIopswrite() int32 {
	if o == nil || IsNil(o.Iopswrite) {
		var ret int32
		return ret
	}
	return *o.Iopswrite
}

// GetIopswriteOk returns a tuple with the Iopswrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetIopswriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Iopswrite) {
		return nil, false
	}
	return o.Iopswrite, true
}

// HasIopswrite returns a boolean if a field has been set.
func (o *Policy) HasIopswrite() bool {
	if o != nil && !IsNil(o.Iopswrite) {
		return true
	}

	return false
}

// SetIopswrite gets a reference to the given int32 and assigns it to the Iopswrite field.
func (o *Policy) SetIopswrite(v int32) {
	o.Iopswrite = &v
}

// GetIopsread returns the Iopsread field value if set, zero value otherwise.
func (o *Policy) GetIopsread() int32 {
	if o == nil || IsNil(o.Iopsread) {
		var ret int32
		return ret
	}
	return *o.Iopsread
}

// GetIopsreadOk returns a tuple with the Iopsread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetIopsreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Iopsread) {
		return nil, false
	}
	return o.Iopsread, true
}

// HasIopsread returns a boolean if a field has been set.
func (o *Policy) HasIopsread() bool {
	if o != nil && !IsNil(o.Iopsread) {
		return true
	}

	return false
}

// SetIopsread gets a reference to the given int32 and assigns it to the Iopsread field.
func (o *Policy) SetIopsread(v int32) {
	o.Iopsread = &v
}

// GetBandwidthwrite returns the Bandwidthwrite field value if set, zero value otherwise.
func (o *Policy) GetBandwidthwrite() int32 {
	if o == nil || IsNil(o.Bandwidthwrite) {
		var ret int32
		return ret
	}
	return *o.Bandwidthwrite
}

// GetBandwidthwriteOk returns a tuple with the Bandwidthwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetBandwidthwriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidthwrite) {
		return nil, false
	}
	return o.Bandwidthwrite, true
}

// HasBandwidthwrite returns a boolean if a field has been set.
func (o *Policy) HasBandwidthwrite() bool {
	if o != nil && !IsNil(o.Bandwidthwrite) {
		return true
	}

	return false
}

// SetBandwidthwrite gets a reference to the given int32 and assigns it to the Bandwidthwrite field.
func (o *Policy) SetBandwidthwrite(v int32) {
	o.Bandwidthwrite = &v
}

// GetBandwidthread returns the Bandwidthread field value if set, zero value otherwise.
func (o *Policy) GetBandwidthread() int32 {
	if o == nil || IsNil(o.Bandwidthread) {
		var ret int32
		return ret
	}
	return *o.Bandwidthread
}

// GetBandwidthreadOk returns a tuple with the Bandwidthread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetBandwidthreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Bandwidthread) {
		return nil, false
	}
	return o.Bandwidthread, true
}

// HasBandwidthread returns a boolean if a field has been set.
func (o *Policy) HasBandwidthread() bool {
	if o != nil && !IsNil(o.Bandwidthread) {
		return true
	}

	return false
}

// SetBandwidthread gets a reference to the given int32 and assigns it to the Bandwidthread field.
func (o *Policy) SetBandwidthread(v int32) {
	o.Bandwidthread = &v
}

// GetLatencywrite returns the Latencywrite field value if set, zero value otherwise.
func (o *Policy) GetLatencywrite() int32 {
	if o == nil || IsNil(o.Latencywrite) {
		var ret int32
		return ret
	}
	return *o.Latencywrite
}

// GetLatencywriteOk returns a tuple with the Latencywrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetLatencywriteOk() (*int32, bool) {
	if o == nil || IsNil(o.Latencywrite) {
		return nil, false
	}
	return o.Latencywrite, true
}

// HasLatencywrite returns a boolean if a field has been set.
func (o *Policy) HasLatencywrite() bool {
	if o != nil && !IsNil(o.Latencywrite) {
		return true
	}

	return false
}

// SetLatencywrite gets a reference to the given int32 and assigns it to the Latencywrite field.
func (o *Policy) SetLatencywrite(v int32) {
	o.Latencywrite = &v
}

// GetLatencyread returns the Latencyread field value if set, zero value otherwise.
func (o *Policy) GetLatencyread() int32 {
	if o == nil || IsNil(o.Latencyread) {
		var ret int32
		return ret
	}
	return *o.Latencyread
}

// GetLatencyreadOk returns a tuple with the Latencyread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetLatencyreadOk() (*int32, bool) {
	if o == nil || IsNil(o.Latencyread) {
		return nil, false
	}
	return o.Latencyread, true
}

// HasLatencyread returns a boolean if a field has been set.
func (o *Policy) HasLatencyread() bool {
	if o != nil && !IsNil(o.Latencyread) {
		return true
	}

	return false
}

// SetLatencyread gets a reference to the given int32 and assigns it to the Latencyread field.
func (o *Policy) SetLatencyread(v int32) {
	o.Latencyread = &v
}

// GetLatencyreadcold returns the Latencyreadcold field value if set, zero value otherwise.
func (o *Policy) GetLatencyreadcold() int32 {
	if o == nil || IsNil(o.Latencyreadcold) {
		var ret int32
		return ret
	}
	return *o.Latencyreadcold
}

// GetLatencyreadcoldOk returns a tuple with the Latencyreadcold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetLatencyreadcoldOk() (*int32, bool) {
	if o == nil || IsNil(o.Latencyreadcold) {
		return nil, false
	}
	return o.Latencyreadcold, true
}

// HasLatencyreadcold returns a boolean if a field has been set.
func (o *Policy) HasLatencyreadcold() bool {
	if o != nil && !IsNil(o.Latencyreadcold) {
		return true
	}

	return false
}

// SetLatencyreadcold gets a reference to the given int32 and assigns it to the Latencyreadcold field.
func (o *Policy) SetLatencyreadcold(v int32) {
	o.Latencyreadcold = &v
}

// GetColddata returns the Colddata field value if set, zero value otherwise.
func (o *Policy) GetColddata() int32 {
	if o == nil || IsNil(o.Colddata) {
		var ret int32
		return ret
	}
	return *o.Colddata
}

// GetColddataOk returns a tuple with the Colddata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetColddataOk() (*int32, bool) {
	if o == nil || IsNil(o.Colddata) {
		return nil, false
	}
	return o.Colddata, true
}

// HasColddata returns a boolean if a field has been set.
func (o *Policy) HasColddata() bool {
	if o != nil && !IsNil(o.Colddata) {
		return true
	}

	return false
}

// SetColddata gets a reference to the given int32 and assigns it to the Colddata field.
func (o *Policy) SetColddata(v int32) {
	o.Colddata = &v
}

// GetLocalzoneread returns the Localzoneread field value if set, zero value otherwise.
func (o *Policy) GetLocalzoneread() bool {
	if o == nil || IsNil(o.Localzoneread) {
		var ret bool
		return ret
	}
	return *o.Localzoneread
}

// GetLocalzonereadOk returns a tuple with the Localzoneread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetLocalzonereadOk() (*bool, bool) {
	if o == nil || IsNil(o.Localzoneread) {
		return nil, false
	}
	return o.Localzoneread, true
}

// HasLocalzoneread returns a boolean if a field has been set.
func (o *Policy) HasLocalzoneread() bool {
	if o != nil && !IsNil(o.Localzoneread) {
		return true
	}

	return false
}

// SetLocalzoneread gets a reference to the given bool and assigns it to the Localzoneread field.
func (o *Policy) SetLocalzoneread(v bool) {
	o.Localzoneread = &v
}

// GetFailureperformance returns the Failureperformance field value if set, zero value otherwise.
func (o *Policy) GetFailureperformance() bool {
	if o == nil || IsNil(o.Failureperformance) {
		var ret bool
		return ret
	}
	return *o.Failureperformance
}

// GetFailureperformanceOk returns a tuple with the Failureperformance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetFailureperformanceOk() (*bool, bool) {
	if o == nil || IsNil(o.Failureperformance) {
		return nil, false
	}
	return o.Failureperformance, true
}

// HasFailureperformance returns a boolean if a field has been set.
func (o *Policy) HasFailureperformance() bool {
	if o != nil && !IsNil(o.Failureperformance) {
		return true
	}

	return false
}

// SetFailureperformance gets a reference to the given bool and assigns it to the Failureperformance field.
func (o *Policy) SetFailureperformance(v bool) {
	o.Failureperformance = &v
}

// GetCapacityoptimization returns the Capacityoptimization field value
func (o *Policy) GetCapacityoptimization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Capacityoptimization
}

// GetCapacityoptimizationOk returns a tuple with the Capacityoptimization field value
// and a boolean to check if the value has been set.
func (o *Policy) GetCapacityoptimizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacityoptimization, true
}

// SetCapacityoptimization sets field value
func (o *Policy) SetCapacityoptimization(v string) {
	o.Capacityoptimization = v
}

// GetCapacityreservation returns the Capacityreservation field value if set, zero value otherwise.
func (o *Policy) GetCapacityreservation() int32 {
	if o == nil || IsNil(o.Capacityreservation) {
		var ret int32
		return ret
	}
	return *o.Capacityreservation
}

// GetCapacityreservationOk returns a tuple with the Capacityreservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetCapacityreservationOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacityreservation) {
		return nil, false
	}
	return o.Capacityreservation, true
}

// HasCapacityreservation returns a boolean if a field has been set.
func (o *Policy) HasCapacityreservation() bool {
	if o != nil && !IsNil(o.Capacityreservation) {
		return true
	}

	return false
}

// SetCapacityreservation gets a reference to the given int32 and assigns it to the Capacityreservation field.
func (o *Policy) SetCapacityreservation(v int32) {
	o.Capacityreservation = &v
}

// GetResiliencymedia returns the Resiliencymedia field value if set, zero value otherwise.
func (o *Policy) GetResiliencymedia() int32 {
	if o == nil || IsNil(o.Resiliencymedia) {
		var ret int32
		return ret
	}
	return *o.Resiliencymedia
}

// GetResiliencymediaOk returns a tuple with the Resiliencymedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetResiliencymediaOk() (*int32, bool) {
	if o == nil || IsNil(o.Resiliencymedia) {
		return nil, false
	}
	return o.Resiliencymedia, true
}

// HasResiliencymedia returns a boolean if a field has been set.
func (o *Policy) HasResiliencymedia() bool {
	if o != nil && !IsNil(o.Resiliencymedia) {
		return true
	}

	return false
}

// SetResiliencymedia gets a reference to the given int32 and assigns it to the Resiliencymedia field.
func (o *Policy) SetResiliencymedia(v int32) {
	o.Resiliencymedia = &v
}

// GetResiliencynode returns the Resiliencynode field value if set, zero value otherwise.
func (o *Policy) GetResiliencynode() int32 {
	if o == nil || IsNil(o.Resiliencynode) {
		var ret int32
		return ret
	}
	return *o.Resiliencynode
}

// GetResiliencynodeOk returns a tuple with the Resiliencynode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetResiliencynodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Resiliencynode) {
		return nil, false
	}
	return o.Resiliencynode, true
}

// HasResiliencynode returns a boolean if a field has been set.
func (o *Policy) HasResiliencynode() bool {
	if o != nil && !IsNil(o.Resiliencynode) {
		return true
	}

	return false
}

// SetResiliencynode gets a reference to the given int32 and assigns it to the Resiliencynode field.
func (o *Policy) SetResiliencynode(v int32) {
	o.Resiliencynode = &v
}

// GetResiliencyzone returns the Resiliencyzone field value if set, zero value otherwise.
func (o *Policy) GetResiliencyzone() int32 {
	if o == nil || IsNil(o.Resiliencyzone) {
		var ret int32
		return ret
	}
	return *o.Resiliencyzone
}

// GetResiliencyzoneOk returns a tuple with the Resiliencyzone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetResiliencyzoneOk() (*int32, bool) {
	if o == nil || IsNil(o.Resiliencyzone) {
		return nil, false
	}
	return o.Resiliencyzone, true
}

// HasResiliencyzone returns a boolean if a field has been set.
func (o *Policy) HasResiliencyzone() bool {
	if o != nil && !IsNil(o.Resiliencyzone) {
		return true
	}

	return false
}

// SetResiliencyzone gets a reference to the given int32 and assigns it to the Resiliencyzone field.
func (o *Policy) SetResiliencyzone(v int32) {
	o.Resiliencyzone = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *Policy) GetEncryption() bool {
	if o == nil || IsNil(o.Encryption) {
		var ret bool
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *Policy) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given bool and assigns it to the Encryption field.
func (o *Policy) SetEncryption(v bool) {
	o.Encryption = &v
}

// GetSed returns the Sed field value if set, zero value otherwise.
func (o *Policy) GetSed() bool {
	if o == nil || IsNil(o.Sed) {
		var ret bool
		return ret
	}
	return *o.Sed
}

// GetSedOk returns a tuple with the Sed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSedOk() (*bool, bool) {
	if o == nil || IsNil(o.Sed) {
		return nil, false
	}
	return o.Sed, true
}

// HasSed returns a boolean if a field has been set.
func (o *Policy) HasSed() bool {
	if o != nil && !IsNil(o.Sed) {
		return true
	}

	return false
}

// SetSed gets a reference to the given bool and assigns it to the Sed field.
func (o *Policy) SetSed(v bool) {
	o.Sed = &v
}

// GetIntegrity returns the Integrity field value if set, zero value otherwise.
func (o *Policy) GetIntegrity() bool {
	if o == nil || IsNil(o.Integrity) {
		var ret bool
		return ret
	}
	return *o.Integrity
}

// GetIntegrityOk returns a tuple with the Integrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetIntegrityOk() (*bool, bool) {
	if o == nil || IsNil(o.Integrity) {
		return nil, false
	}
	return o.Integrity, true
}

// HasIntegrity returns a boolean if a field has been set.
func (o *Policy) HasIntegrity() bool {
	if o != nil && !IsNil(o.Integrity) {
		return true
	}

	return false
}

// SetIntegrity gets a reference to the given bool and assigns it to the Integrity field.
func (o *Policy) SetIntegrity(v bool) {
	o.Integrity = &v
}

// GetSnapshotkeep returns the Snapshotkeep field value if set, zero value otherwise.
func (o *Policy) GetSnapshotkeep() int32 {
	if o == nil || IsNil(o.Snapshotkeep) {
		var ret int32
		return ret
	}
	return *o.Snapshotkeep
}

// GetSnapshotkeepOk returns a tuple with the Snapshotkeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSnapshotkeepOk() (*int32, bool) {
	if o == nil || IsNil(o.Snapshotkeep) {
		return nil, false
	}
	return o.Snapshotkeep, true
}

// HasSnapshotkeep returns a boolean if a field has been set.
func (o *Policy) HasSnapshotkeep() bool {
	if o != nil && !IsNil(o.Snapshotkeep) {
		return true
	}

	return false
}

// SetSnapshotkeep gets a reference to the given int32 and assigns it to the Snapshotkeep field.
func (o *Policy) SetSnapshotkeep(v int32) {
	o.Snapshotkeep = &v
}

// GetSnapshotfrequency returns the Snapshotfrequency field value if set, zero value otherwise.
func (o *Policy) GetSnapshotfrequency() string {
	if o == nil || IsNil(o.Snapshotfrequency) {
		var ret string
		return ret
	}
	return *o.Snapshotfrequency
}

// GetSnapshotfrequencyOk returns a tuple with the Snapshotfrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSnapshotfrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshotfrequency) {
		return nil, false
	}
	return o.Snapshotfrequency, true
}

// HasSnapshotfrequency returns a boolean if a field has been set.
func (o *Policy) HasSnapshotfrequency() bool {
	if o != nil && !IsNil(o.Snapshotfrequency) {
		return true
	}

	return false
}

// SetSnapshotfrequency gets a reference to the given string and assigns it to the Snapshotfrequency field.
func (o *Policy) SetSnapshotfrequency(v string) {
	o.Snapshotfrequency = &v
}

// GetSnapshotday returns the Snapshotday field value if set, zero value otherwise.
func (o *Policy) GetSnapshotday() int32 {
	if o == nil || IsNil(o.Snapshotday) {
		var ret int32
		return ret
	}
	return *o.Snapshotday
}

// GetSnapshotdayOk returns a tuple with the Snapshotday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSnapshotdayOk() (*int32, bool) {
	if o == nil || IsNil(o.Snapshotday) {
		return nil, false
	}
	return o.Snapshotday, true
}

// HasSnapshotday returns a boolean if a field has been set.
func (o *Policy) HasSnapshotday() bool {
	if o != nil && !IsNil(o.Snapshotday) {
		return true
	}

	return false
}

// SetSnapshotday gets a reference to the given int32 and assigns it to the Snapshotday field.
func (o *Policy) SetSnapshotday(v int32) {
	o.Snapshotday = &v
}

// GetSnapshothour returns the Snapshothour field value if set, zero value otherwise.
func (o *Policy) GetSnapshothour() int32 {
	if o == nil || IsNil(o.Snapshothour) {
		var ret int32
		return ret
	}
	return *o.Snapshothour
}

// GetSnapshothourOk returns a tuple with the Snapshothour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSnapshothourOk() (*int32, bool) {
	if o == nil || IsNil(o.Snapshothour) {
		return nil, false
	}
	return o.Snapshothour, true
}

// HasSnapshothour returns a boolean if a field has been set.
func (o *Policy) HasSnapshothour() bool {
	if o != nil && !IsNil(o.Snapshothour) {
		return true
	}

	return false
}

// SetSnapshothour gets a reference to the given int32 and assigns it to the Snapshothour field.
func (o *Policy) SetSnapshothour(v int32) {
	o.Snapshothour = &v
}

// GetSnapshotminute returns the Snapshotminute field value if set, zero value otherwise.
func (o *Policy) GetSnapshotminute() int32 {
	if o == nil || IsNil(o.Snapshotminute) {
		var ret int32
		return ret
	}
	return *o.Snapshotminute
}

// GetSnapshotminuteOk returns a tuple with the Snapshotminute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetSnapshotminuteOk() (*int32, bool) {
	if o == nil || IsNil(o.Snapshotminute) {
		return nil, false
	}
	return o.Snapshotminute, true
}

// HasSnapshotminute returns a boolean if a field has been set.
func (o *Policy) HasSnapshotminute() bool {
	if o != nil && !IsNil(o.Snapshotminute) {
		return true
	}

	return false
}

// SetSnapshotminute gets a reference to the given int32 and assigns it to the Snapshotminute field.
func (o *Policy) SetSnapshotminute(v int32) {
	o.Snapshotminute = &v
}

// GetCreatedbyuserName returns the CreatedbyuserName field value if set, zero value otherwise.
func (o *Policy) GetCreatedbyuserName() string {
	if o == nil || IsNil(o.CreatedbyuserName) {
		var ret string
		return ret
	}
	return *o.CreatedbyuserName
}

// GetCreatedbyuserNameOk returns a tuple with the CreatedbyuserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetCreatedbyuserNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedbyuserName) {
		return nil, false
	}
	return o.CreatedbyuserName, true
}

// HasCreatedbyuserName returns a boolean if a field has been set.
func (o *Policy) HasCreatedbyuserName() bool {
	if o != nil && !IsNil(o.CreatedbyuserName) {
		return true
	}

	return false
}

// SetCreatedbyuserName gets a reference to the given string and assigns it to the CreatedbyuserName field.
func (o *Policy) SetCreatedbyuserName(v string) {
	o.CreatedbyuserName = &v
}

// GetCreatedbyuseremail returns the Createdbyuseremail field value if set, zero value otherwise.
func (o *Policy) GetCreatedbyuseremail() string {
	if o == nil || IsNil(o.Createdbyuseremail) {
		var ret string
		return ret
	}
	return *o.Createdbyuseremail
}

// GetCreatedbyuseremailOk returns a tuple with the Createdbyuseremail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetCreatedbyuseremailOk() (*string, bool) {
	if o == nil || IsNil(o.Createdbyuseremail) {
		return nil, false
	}
	return o.Createdbyuseremail, true
}

// HasCreatedbyuseremail returns a boolean if a field has been set.
func (o *Policy) HasCreatedbyuseremail() bool {
	if o != nil && !IsNil(o.Createdbyuseremail) {
		return true
	}

	return false
}

// SetCreatedbyuseremail gets a reference to the given string and assigns it to the Createdbyuseremail field.
func (o *Policy) SetCreatedbyuseremail(v string) {
	o.Createdbyuseremail = &v
}

// GetCreatedtime returns the Createdtime field value if set, zero value otherwise.
func (o *Policy) GetCreatedtime() string {
	if o == nil || IsNil(o.Createdtime) {
		var ret string
		return ret
	}
	return *o.Createdtime
}

// GetCreatedtimeOk returns a tuple with the Createdtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetCreatedtimeOk() (*string, bool) {
	if o == nil || IsNil(o.Createdtime) {
		return nil, false
	}
	return o.Createdtime, true
}

// HasCreatedtime returns a boolean if a field has been set.
func (o *Policy) HasCreatedtime() bool {
	if o != nil && !IsNil(o.Createdtime) {
		return true
	}

	return false
}

// SetCreatedtime gets a reference to the given string and assigns it to the Createdtime field.
func (o *Policy) SetCreatedtime(v string) {
	o.Createdtime = &v
}

// GetUpdatebyusername returns the Updatebyusername field value if set, zero value otherwise.
func (o *Policy) GetUpdatebyusername() string {
	if o == nil || IsNil(o.Updatebyusername) {
		var ret string
		return ret
	}
	return *o.Updatebyusername
}

// GetUpdatebyusernameOk returns a tuple with the Updatebyusername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetUpdatebyusernameOk() (*string, bool) {
	if o == nil || IsNil(o.Updatebyusername) {
		return nil, false
	}
	return o.Updatebyusername, true
}

// HasUpdatebyusername returns a boolean if a field has been set.
func (o *Policy) HasUpdatebyusername() bool {
	if o != nil && !IsNil(o.Updatebyusername) {
		return true
	}

	return false
}

// SetUpdatebyusername gets a reference to the given string and assigns it to the Updatebyusername field.
func (o *Policy) SetUpdatebyusername(v string) {
	o.Updatebyusername = &v
}

// GetUpdatebyUseremail returns the UpdatebyUseremail field value if set, zero value otherwise.
func (o *Policy) GetUpdatebyUseremail() string {
	if o == nil || IsNil(o.UpdatebyUseremail) {
		var ret string
		return ret
	}
	return *o.UpdatebyUseremail
}

// GetUpdatebyUseremailOk returns a tuple with the UpdatebyUseremail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetUpdatebyUseremailOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatebyUseremail) {
		return nil, false
	}
	return o.UpdatebyUseremail, true
}

// HasUpdatebyUseremail returns a boolean if a field has been set.
func (o *Policy) HasUpdatebyUseremail() bool {
	if o != nil && !IsNil(o.UpdatebyUseremail) {
		return true
	}

	return false
}

// SetUpdatebyUseremail gets a reference to the given string and assigns it to the UpdatebyUseremail field.
func (o *Policy) SetUpdatebyUseremail(v string) {
	o.UpdatebyUseremail = &v
}

// GetUpdatetime returns the Updatetime field value if set, zero value otherwise.
func (o *Policy) GetUpdatetime() string {
	if o == nil || IsNil(o.Updatetime) {
		var ret string
		return ret
	}
	return *o.Updatetime
}

// GetUpdatetimeOk returns a tuple with the Updatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetUpdatetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Updatetime) {
		return nil, false
	}
	return o.Updatetime, true
}

// HasUpdatetime returns a boolean if a field has been set.
func (o *Policy) HasUpdatetime() bool {
	if o != nil && !IsNil(o.Updatetime) {
		return true
	}

	return false
}

// SetUpdatetime gets a reference to the given string and assigns it to the Updatetime field.
func (o *Policy) SetUpdatetime(v string) {
	o.Updatetime = &v
}

func (o Policy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Policy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Iopswrite) {
		toSerialize["iopswrite"] = o.Iopswrite
	}
	if !IsNil(o.Iopsread) {
		toSerialize["iopsread"] = o.Iopsread
	}
	if !IsNil(o.Bandwidthwrite) {
		toSerialize["bandwidthwrite"] = o.Bandwidthwrite
	}
	if !IsNil(o.Bandwidthread) {
		toSerialize["bandwidthread"] = o.Bandwidthread
	}
	if !IsNil(o.Latencywrite) {
		toSerialize["latencywrite"] = o.Latencywrite
	}
	if !IsNil(o.Latencyread) {
		toSerialize["latencyread"] = o.Latencyread
	}
	if !IsNil(o.Latencyreadcold) {
		toSerialize["latencyreadcold"] = o.Latencyreadcold
	}
	if !IsNil(o.Colddata) {
		toSerialize["colddata"] = o.Colddata
	}
	if !IsNil(o.Localzoneread) {
		toSerialize["localzoneread"] = o.Localzoneread
	}
	if !IsNil(o.Failureperformance) {
		toSerialize["failureperformance"] = o.Failureperformance
	}
	toSerialize["capacityoptimization"] = o.Capacityoptimization
	if !IsNil(o.Capacityreservation) {
		toSerialize["capacityreservation"] = o.Capacityreservation
	}
	if !IsNil(o.Resiliencymedia) {
		toSerialize["resiliencymedia"] = o.Resiliencymedia
	}
	if !IsNil(o.Resiliencynode) {
		toSerialize["resiliencynode"] = o.Resiliencynode
	}
	if !IsNil(o.Resiliencyzone) {
		toSerialize["resiliencyzone"] = o.Resiliencyzone
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	if !IsNil(o.Sed) {
		toSerialize["sed"] = o.Sed
	}
	if !IsNil(o.Integrity) {
		toSerialize["integrity"] = o.Integrity
	}
	if !IsNil(o.Snapshotkeep) {
		toSerialize["snapshotkeep"] = o.Snapshotkeep
	}
	if !IsNil(o.Snapshotfrequency) {
		toSerialize["snapshotfrequency"] = o.Snapshotfrequency
	}
	if !IsNil(o.Snapshotday) {
		toSerialize["snapshotday"] = o.Snapshotday
	}
	if !IsNil(o.Snapshothour) {
		toSerialize["snapshothour"] = o.Snapshothour
	}
	if !IsNil(o.Snapshotminute) {
		toSerialize["snapshotminute"] = o.Snapshotminute
	}
	if !IsNil(o.CreatedbyuserName) {
		toSerialize["createdbyuserName"] = o.CreatedbyuserName
	}
	if !IsNil(o.Createdbyuseremail) {
		toSerialize["createdbyuseremail"] = o.Createdbyuseremail
	}
	if !IsNil(o.Createdtime) {
		toSerialize["createdtime"] = o.Createdtime
	}
	if !IsNil(o.Updatebyusername) {
		toSerialize["updatebyusername"] = o.Updatebyusername
	}
	if !IsNil(o.UpdatebyUseremail) {
		toSerialize["updatebyUseremail"] = o.UpdatebyUseremail
	}
	if !IsNil(o.Updatetime) {
		toSerialize["updatetime"] = o.Updatetime
	}
	return toSerialize, nil
}

func (o *Policy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"capacityoptimization",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicy := _Policy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicy)

	if err != nil {
		return err
	}

	*o = Policy(varPolicy)

	return err
}

type NullablePolicy struct {
	value *Policy
	isSet bool
}

func (v NullablePolicy) Get() *Policy {
	return v.value
}

func (v *NullablePolicy) Set(val *Policy) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy(val *Policy) *NullablePolicy {
	return &NullablePolicy{value: val, isSet: true}
}

func (v NullablePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
