/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProviderPriceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderPriceItem{}

// ProviderPriceItem struct for ProviderPriceItem
type ProviderPriceItem struct {
	StorageType      string  `json:"storageType"`
	VolumeBasePrice  float32 `json:"volumeBasePrice"`
	VolumeTotalPrice float32 `json:"volumeTotalPrice"`
}

type _ProviderPriceItem ProviderPriceItem

// NewProviderPriceItem instantiates a new ProviderPriceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderPriceItem(storageType string, volumeBasePrice float32, volumeTotalPrice float32) *ProviderPriceItem {
	this := ProviderPriceItem{}
	this.StorageType = storageType
	this.VolumeBasePrice = volumeBasePrice
	this.VolumeTotalPrice = volumeTotalPrice
	return &this
}

// NewProviderPriceItemWithDefaults instantiates a new ProviderPriceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderPriceItemWithDefaults() *ProviderPriceItem {
	this := ProviderPriceItem{}
	return &this
}

// GetStorageType returns the StorageType field value
func (o *ProviderPriceItem) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *ProviderPriceItem) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *ProviderPriceItem) SetStorageType(v string) {
	o.StorageType = v
}

// GetVolumeBasePrice returns the VolumeBasePrice field value
func (o *ProviderPriceItem) GetVolumeBasePrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VolumeBasePrice
}

// GetVolumeBasePriceOk returns a tuple with the VolumeBasePrice field value
// and a boolean to check if the value has been set.
func (o *ProviderPriceItem) GetVolumeBasePriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeBasePrice, true
}

// SetVolumeBasePrice sets field value
func (o *ProviderPriceItem) SetVolumeBasePrice(v float32) {
	o.VolumeBasePrice = v
}

// GetVolumeTotalPrice returns the VolumeTotalPrice field value
func (o *ProviderPriceItem) GetVolumeTotalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VolumeTotalPrice
}

// GetVolumeTotalPriceOk returns a tuple with the VolumeTotalPrice field value
// and a boolean to check if the value has been set.
func (o *ProviderPriceItem) GetVolumeTotalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTotalPrice, true
}

// SetVolumeTotalPrice sets field value
func (o *ProviderPriceItem) SetVolumeTotalPrice(v float32) {
	o.VolumeTotalPrice = v
}

func (o ProviderPriceItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderPriceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageType"] = o.StorageType
	toSerialize["volumeBasePrice"] = o.VolumeBasePrice
	toSerialize["volumeTotalPrice"] = o.VolumeTotalPrice
	return toSerialize, nil
}

func (o *ProviderPriceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageType",
		"volumeBasePrice",
		"volumeTotalPrice",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderPriceItem := _ProviderPriceItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderPriceItem)

	if err != nil {
		return err
	}

	*o = ProviderPriceItem(varProviderPriceItem)

	return err
}

type NullableProviderPriceItem struct {
	value *ProviderPriceItem
	isSet bool
}

func (v NullableProviderPriceItem) Get() *ProviderPriceItem {
	return v.value
}

func (v *NullableProviderPriceItem) Set(val *ProviderPriceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderPriceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderPriceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderPriceItem(val *ProviderPriceItem) *NullableProviderPriceItem {
	return &NullableProviderPriceItem{value: val, isSet: true}
}

func (v NullableProviderPriceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderPriceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
