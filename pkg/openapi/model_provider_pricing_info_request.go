/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 8d1ee8c4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProviderPricingInfoRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderPricingInfoRequest{}

// ProviderPricingInfoRequest struct for ProviderPricingInfoRequest
type ProviderPricingInfoRequest struct {
	CloudProvider CloudProviderType `json:"cloudProvider"`
	Iops          int32             `json:"iops"`
	Size          int32             `json:"size"`
	Throughput    *int32            `json:"throughput,omitempty"`
}

type _ProviderPricingInfoRequest ProviderPricingInfoRequest

// NewProviderPricingInfoRequest instantiates a new ProviderPricingInfoRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderPricingInfoRequest(cloudProvider CloudProviderType, iops int32, size int32) *ProviderPricingInfoRequest {
	this := ProviderPricingInfoRequest{}
	this.CloudProvider = cloudProvider
	this.Iops = iops
	this.Size = size
	return &this
}

// NewProviderPricingInfoRequestWithDefaults instantiates a new ProviderPricingInfoRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderPricingInfoRequestWithDefaults() *ProviderPricingInfoRequest {
	this := ProviderPricingInfoRequest{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *ProviderPricingInfoRequest) GetCloudProvider() CloudProviderType {
	if o == nil {
		var ret CloudProviderType
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *ProviderPricingInfoRequest) GetCloudProviderOk() (*CloudProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *ProviderPricingInfoRequest) SetCloudProvider(v CloudProviderType) {
	o.CloudProvider = v
}

// GetIops returns the Iops field value
func (o *ProviderPricingInfoRequest) GetIops() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Iops
}

// GetIopsOk returns a tuple with the Iops field value
// and a boolean to check if the value has been set.
func (o *ProviderPricingInfoRequest) GetIopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iops, true
}

// SetIops sets field value
func (o *ProviderPricingInfoRequest) SetIops(v int32) {
	o.Iops = v
}

// GetSize returns the Size field value
func (o *ProviderPricingInfoRequest) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ProviderPricingInfoRequest) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ProviderPricingInfoRequest) SetSize(v int32) {
	o.Size = v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *ProviderPricingInfoRequest) GetThroughput() int32 {
	if o == nil || IsNil(o.Throughput) {
		var ret int32
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderPricingInfoRequest) GetThroughputOk() (*int32, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *ProviderPricingInfoRequest) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int32 and assigns it to the Throughput field.
func (o *ProviderPricingInfoRequest) SetThroughput(v int32) {
	o.Throughput = &v
}

func (o ProviderPricingInfoRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderPricingInfoRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["iops"] = o.Iops
	toSerialize["size"] = o.Size
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	return toSerialize, nil
}

func (o *ProviderPricingInfoRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProvider",
		"iops",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderPricingInfoRequest := _ProviderPricingInfoRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderPricingInfoRequest)

	if err != nil {
		return err
	}

	*o = ProviderPricingInfoRequest(varProviderPricingInfoRequest)

	return err
}

type NullableProviderPricingInfoRequest struct {
	value *ProviderPricingInfoRequest
	isSet bool
}

func (v NullableProviderPricingInfoRequest) Get() *ProviderPricingInfoRequest {
	return v.value
}

func (v *NullableProviderPricingInfoRequest) Set(val *ProviderPricingInfoRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderPricingInfoRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderPricingInfoRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderPricingInfoRequest(val *ProviderPricingInfoRequest) *NullableProviderPricingInfoRequest {
	return &NullableProviderPricingInfoRequest{value: val, isSet: true}
}

func (v NullableProviderPricingInfoRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderPricingInfoRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
