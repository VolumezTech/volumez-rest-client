/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TenantTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantTokenResponse{}

// TenantTokenResponse struct for TenantTokenResponse
type TenantTokenResponse struct {
	AccessToken string `json:"AccessToken"`
	TokenType   string `json:"TokenType"`
	ExpiresIn   int32  `json:"ExpiresIn"`
}

type _TenantTokenResponse TenantTokenResponse

// NewTenantTokenResponse instantiates a new TenantTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantTokenResponse(accessToken string, tokenType string, expiresIn int32) *TenantTokenResponse {
	this := TenantTokenResponse{}
	this.AccessToken = accessToken
	this.TokenType = tokenType
	this.ExpiresIn = expiresIn
	return &this
}

// NewTenantTokenResponseWithDefaults instantiates a new TenantTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantTokenResponseWithDefaults() *TenantTokenResponse {
	this := TenantTokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *TenantTokenResponse) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *TenantTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *TenantTokenResponse) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetTokenType returns the TokenType field value
func (o *TenantTokenResponse) GetTokenType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value
// and a boolean to check if the value has been set.
func (o *TenantTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenType, true
}

// SetTokenType sets field value
func (o *TenantTokenResponse) SetTokenType(v string) {
	o.TokenType = v
}

// GetExpiresIn returns the ExpiresIn field value
func (o *TenantTokenResponse) GetExpiresIn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value
// and a boolean to check if the value has been set.
func (o *TenantTokenResponse) GetExpiresInOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// SetExpiresIn sets field value
func (o *TenantTokenResponse) SetExpiresIn(v int32) {
	o.ExpiresIn = v
}

func (o TenantTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["AccessToken"] = o.AccessToken
	toSerialize["TokenType"] = o.TokenType
	toSerialize["ExpiresIn"] = o.ExpiresIn
	return toSerialize, nil
}

func (o *TenantTokenResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AccessToken",
		"TokenType",
		"ExpiresIn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTenantTokenResponse := _TenantTokenResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTenantTokenResponse)

	if err != nil {
		return err
	}

	*o = TenantTokenResponse(varTenantTokenResponse)

	return err
}

type NullableTenantTokenResponse struct {
	value *TenantTokenResponse
	isSet bool
}

func (v NullableTenantTokenResponse) Get() *TenantTokenResponse {
	return v.value
}

func (v *NullableTenantTokenResponse) Set(val *TenantTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantTokenResponse(val *TenantTokenResponse) *NullableTenantTokenResponse {
	return &NullableTenantTokenResponse{value: val, isSet: true}
}

func (v NullableTenantTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
