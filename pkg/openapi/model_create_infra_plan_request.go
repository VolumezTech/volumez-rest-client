/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - 9cdeb26f
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateInfraPlanRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInfraPlanRequest{}

// CreateInfraPlanRequest struct for CreateInfraPlanRequest
type CreateInfraPlanRequest struct {
	CloudProvider CloudProviderType            `json:"cloudProvider"`
	Policy        CreateInfraPlanRequestPolicy `json:"policy"`
	OsType        *OSType                      `json:"osType,omitempty"`
	Size          int32                        `json:"size"`
	Region        *string                      `json:"region,omitempty"`
	Zones         []string                     `json:"zones,omitempty"`
	SubnetIds     []string                     `json:"subnetIds,omitempty"`
	AccountId     *string                      `json:"accountId,omitempty"`
}

type _CreateInfraPlanRequest CreateInfraPlanRequest

// NewCreateInfraPlanRequest instantiates a new CreateInfraPlanRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInfraPlanRequest(cloudProvider CloudProviderType, policy CreateInfraPlanRequestPolicy, size int32) *CreateInfraPlanRequest {
	this := CreateInfraPlanRequest{}
	this.CloudProvider = cloudProvider
	this.Policy = policy
	this.Size = size
	return &this
}

// NewCreateInfraPlanRequestWithDefaults instantiates a new CreateInfraPlanRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInfraPlanRequestWithDefaults() *CreateInfraPlanRequest {
	this := CreateInfraPlanRequest{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *CreateInfraPlanRequest) GetCloudProvider() CloudProviderType {
	if o == nil {
		var ret CloudProviderType
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetCloudProviderOk() (*CloudProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *CreateInfraPlanRequest) SetCloudProvider(v CloudProviderType) {
	o.CloudProvider = v
}

// GetPolicy returns the Policy field value
func (o *CreateInfraPlanRequest) GetPolicy() CreateInfraPlanRequestPolicy {
	if o == nil {
		var ret CreateInfraPlanRequestPolicy
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetPolicyOk() (*CreateInfraPlanRequestPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *CreateInfraPlanRequest) SetPolicy(v CreateInfraPlanRequestPolicy) {
	o.Policy = v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *CreateInfraPlanRequest) GetOsType() OSType {
	if o == nil || IsNil(o.OsType) {
		var ret OSType
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetOsTypeOk() (*OSType, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *CreateInfraPlanRequest) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given OSType and assigns it to the OsType field.
func (o *CreateInfraPlanRequest) SetOsType(v OSType) {
	o.OsType = &v
}

// GetSize returns the Size field value
func (o *CreateInfraPlanRequest) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateInfraPlanRequest) SetSize(v int32) {
	o.Size = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CreateInfraPlanRequest) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CreateInfraPlanRequest) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CreateInfraPlanRequest) SetRegion(v string) {
	o.Region = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *CreateInfraPlanRequest) GetZones() []string {
	if o == nil || IsNil(o.Zones) {
		var ret []string
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *CreateInfraPlanRequest) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []string and assigns it to the Zones field.
func (o *CreateInfraPlanRequest) SetZones(v []string) {
	o.Zones = v
}

// GetSubnetIds returns the SubnetIds field value if set, zero value otherwise.
func (o *CreateInfraPlanRequest) GetSubnetIds() []string {
	if o == nil || IsNil(o.SubnetIds) {
		var ret []string
		return ret
	}
	return o.SubnetIds
}

// GetSubnetIdsOk returns a tuple with the SubnetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetSubnetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SubnetIds) {
		return nil, false
	}
	return o.SubnetIds, true
}

// HasSubnetIds returns a boolean if a field has been set.
func (o *CreateInfraPlanRequest) HasSubnetIds() bool {
	if o != nil && !IsNil(o.SubnetIds) {
		return true
	}

	return false
}

// SetSubnetIds gets a reference to the given []string and assigns it to the SubnetIds field.
func (o *CreateInfraPlanRequest) SetSubnetIds(v []string) {
	o.SubnetIds = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateInfraPlanRequest) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInfraPlanRequest) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateInfraPlanRequest) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreateInfraPlanRequest) SetAccountId(v string) {
	o.AccountId = &v
}

func (o CreateInfraPlanRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInfraPlanRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["policy"] = o.Policy
	if !IsNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	toSerialize["size"] = o.Size
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	if !IsNil(o.SubnetIds) {
		toSerialize["subnetIds"] = o.SubnetIds
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	return toSerialize, nil
}

func (o *CreateInfraPlanRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProvider",
		"policy",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInfraPlanRequest := _CreateInfraPlanRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateInfraPlanRequest)

	if err != nil {
		return err
	}

	*o = CreateInfraPlanRequest(varCreateInfraPlanRequest)

	return err
}

type NullableCreateInfraPlanRequest struct {
	value *CreateInfraPlanRequest
	isSet bool
}

func (v NullableCreateInfraPlanRequest) Get() *CreateInfraPlanRequest {
	return v.value
}

func (v *NullableCreateInfraPlanRequest) Set(val *CreateInfraPlanRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInfraPlanRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInfraPlanRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInfraPlanRequest(val *CreateInfraPlanRequest) *NullableCreateInfraPlanRequest {
	return &NullableCreateInfraPlanRequest{value: val, isSet: true}
}

func (v NullableCreateInfraPlanRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInfraPlanRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
