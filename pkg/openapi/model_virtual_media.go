/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VirtualMedia type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualMedia{}

// VirtualMedia struct for VirtualMedia
type VirtualMedia struct {
	Media   *Media   `json:"media,omitempty"`
	Flavor  *string  `json:"flavor,omitempty"`
	Members []string `json:"members,omitempty"`
}

// NewVirtualMedia instantiates a new VirtualMedia object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualMedia() *VirtualMedia {
	this := VirtualMedia{}
	return &this
}

// NewVirtualMediaWithDefaults instantiates a new VirtualMedia object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualMediaWithDefaults() *VirtualMedia {
	this := VirtualMedia{}
	return &this
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *VirtualMedia) GetMedia() Media {
	if o == nil || IsNil(o.Media) {
		var ret Media
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMedia) GetMediaOk() (*Media, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *VirtualMedia) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given Media and assigns it to the Media field.
func (o *VirtualMedia) SetMedia(v Media) {
	o.Media = &v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *VirtualMedia) GetFlavor() string {
	if o == nil || IsNil(o.Flavor) {
		var ret string
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMedia) GetFlavorOk() (*string, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *VirtualMedia) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given string and assigns it to the Flavor field.
func (o *VirtualMedia) SetFlavor(v string) {
	o.Flavor = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *VirtualMedia) GetMembers() []string {
	if o == nil || IsNil(o.Members) {
		var ret []string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualMedia) GetMembersOk() ([]string, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *VirtualMedia) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *VirtualMedia) SetMembers(v []string) {
	o.Members = v
}

func (o VirtualMedia) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualMedia) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

type NullableVirtualMedia struct {
	value *VirtualMedia
	isSet bool
}

func (v NullableVirtualMedia) Get() *VirtualMedia {
	return v.value
}

func (v *NullableVirtualMedia) Set(val *VirtualMedia) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualMedia(val *VirtualMedia) *NullableVirtualMedia {
	return &NullableVirtualMedia{value: val, isSet: true}
}

func (v NullableVirtualMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
