/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Job type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Job{}

// Job struct for Job
type Job struct {
	Id        *int32                 `json:"id,omitempty"`
	Type      *string                `json:"type,omitempty"`
	Object    *string                `json:"object,omitempty"`
	Args      map[string]interface{} `json:"args,omitempty"`
	State     *string                `json:"state,omitempty"`
	Status    *string                `json:"status,omitempty"`
	Progress  *int32                 `json:"progress,omitempty"`
	Starttime *string                `json:"starttime,omitempty"`
	Endtime   *string                `json:"endtime,omitempty"`
	Username  *string                `json:"username,omitempty"`
	Useremail *string                `json:"useremail,omitempty"`
	Details   []string               `json:"details,omitempty"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob() *Job {
	this := Job{}
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Job) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Job) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Job) SetId(v int32) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Job) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Job) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Job) SetType(v string) {
	o.Type = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *Job) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *Job) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *Job) SetObject(v string) {
	o.Object = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *Job) GetArgs() map[string]interface{} {
	if o == nil || IsNil(o.Args) {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *Job) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *Job) SetArgs(v map[string]interface{}) {
	o.Args = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Job) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Job) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Job) SetState(v string) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Job) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Job) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Job) SetStatus(v string) {
	o.Status = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *Job) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *Job) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *Job) SetProgress(v int32) {
	o.Progress = &v
}

// GetStarttime returns the Starttime field value if set, zero value otherwise.
func (o *Job) GetStarttime() string {
	if o == nil || IsNil(o.Starttime) {
		var ret string
		return ret
	}
	return *o.Starttime
}

// GetStarttimeOk returns a tuple with the Starttime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStarttimeOk() (*string, bool) {
	if o == nil || IsNil(o.Starttime) {
		return nil, false
	}
	return o.Starttime, true
}

// HasStarttime returns a boolean if a field has been set.
func (o *Job) HasStarttime() bool {
	if o != nil && !IsNil(o.Starttime) {
		return true
	}

	return false
}

// SetStarttime gets a reference to the given string and assigns it to the Starttime field.
func (o *Job) SetStarttime(v string) {
	o.Starttime = &v
}

// GetEndtime returns the Endtime field value if set, zero value otherwise.
func (o *Job) GetEndtime() string {
	if o == nil || IsNil(o.Endtime) {
		var ret string
		return ret
	}
	return *o.Endtime
}

// GetEndtimeOk returns a tuple with the Endtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetEndtimeOk() (*string, bool) {
	if o == nil || IsNil(o.Endtime) {
		return nil, false
	}
	return o.Endtime, true
}

// HasEndtime returns a boolean if a field has been set.
func (o *Job) HasEndtime() bool {
	if o != nil && !IsNil(o.Endtime) {
		return true
	}

	return false
}

// SetEndtime gets a reference to the given string and assigns it to the Endtime field.
func (o *Job) SetEndtime(v string) {
	o.Endtime = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Job) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Job) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Job) SetUsername(v string) {
	o.Username = &v
}

// GetUseremail returns the Useremail field value if set, zero value otherwise.
func (o *Job) GetUseremail() string {
	if o == nil || IsNil(o.Useremail) {
		var ret string
		return ret
	}
	return *o.Useremail
}

// GetUseremailOk returns a tuple with the Useremail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetUseremailOk() (*string, bool) {
	if o == nil || IsNil(o.Useremail) {
		return nil, false
	}
	return o.Useremail, true
}

// HasUseremail returns a boolean if a field has been set.
func (o *Job) HasUseremail() bool {
	if o != nil && !IsNil(o.Useremail) {
		return true
	}

	return false
}

// SetUseremail gets a reference to the given string and assigns it to the Useremail field.
func (o *Job) SetUseremail(v string) {
	o.Useremail = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Job) GetDetails() []string {
	if o == nil || IsNil(o.Details) {
		var ret []string
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDetailsOk() ([]string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Job) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []string and assigns it to the Details field.
func (o *Job) SetDetails(v []string) {
	o.Details = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Job) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.Starttime) {
		toSerialize["starttime"] = o.Starttime
	}
	if !IsNil(o.Endtime) {
		toSerialize["endtime"] = o.Endtime
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Useremail) {
		toSerialize["useremail"] = o.Useremail
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
