/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OSType the model 'OSType'
type OSType string

// List of OSType
const (
	UBUNTU OSType = "ubuntu"
	RHEL   OSType = "rhel"
)

// All allowed values of OSType enum
var AllowedOSTypeEnumValues = []OSType{
	"ubuntu",
	"rhel",
}

func (v *OSType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OSType(value)
	for _, existing := range AllowedOSTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OSType", value)
}

// NewOSTypeFromValue returns a pointer to a valid OSType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOSTypeFromValue(v string) (*OSType, error) {
	ev := OSType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OSType: valid values are %v", v, AllowedOSTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OSType) IsValid() bool {
	for _, existing := range AllowedOSTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OSType value
func (v OSType) Ptr() *OSType {
	return &v
}

type NullableOSType struct {
	value *OSType
	isSet bool
}

func (v NullableOSType) Get() *OSType {
	return v.value
}

func (v *NullableOSType) Set(val *OSType) {
	v.value = val
	v.isSet = true
}

func (v NullableOSType) IsSet() bool {
	return v.isSet
}

func (v *NullableOSType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSType(val *OSType) *NullableOSType {
	return &NullableOSType{value: val, isSet: true}
}

func (v NullableOSType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
