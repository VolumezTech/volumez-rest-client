/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateAzureRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAzureRoleRequest{}

// UpdateAzureRoleRequest struct for UpdateAzureRoleRequest
type UpdateAzureRoleRequest struct {
	ApplicationId     *string      `json:"applicationId,omitempty"`
	ActiveDirectoryId *string      `json:"activeDirectoryId,omitempty"`
	Secret            *AzureSecret `json:"secret,omitempty"`
}

// NewUpdateAzureRoleRequest instantiates a new UpdateAzureRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAzureRoleRequest() *UpdateAzureRoleRequest {
	this := UpdateAzureRoleRequest{}
	return &this
}

// NewUpdateAzureRoleRequestWithDefaults instantiates a new UpdateAzureRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAzureRoleRequestWithDefaults() *UpdateAzureRoleRequest {
	this := UpdateAzureRoleRequest{}
	return &this
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *UpdateAzureRoleRequest) GetApplicationId() string {
	if o == nil || IsNil(o.ApplicationId) {
		var ret string
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAzureRoleRequest) GetApplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *UpdateAzureRoleRequest) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given string and assigns it to the ApplicationId field.
func (o *UpdateAzureRoleRequest) SetApplicationId(v string) {
	o.ApplicationId = &v
}

// GetActiveDirectoryId returns the ActiveDirectoryId field value if set, zero value otherwise.
func (o *UpdateAzureRoleRequest) GetActiveDirectoryId() string {
	if o == nil || IsNil(o.ActiveDirectoryId) {
		var ret string
		return ret
	}
	return *o.ActiveDirectoryId
}

// GetActiveDirectoryIdOk returns a tuple with the ActiveDirectoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAzureRoleRequest) GetActiveDirectoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveDirectoryId) {
		return nil, false
	}
	return o.ActiveDirectoryId, true
}

// HasActiveDirectoryId returns a boolean if a field has been set.
func (o *UpdateAzureRoleRequest) HasActiveDirectoryId() bool {
	if o != nil && !IsNil(o.ActiveDirectoryId) {
		return true
	}

	return false
}

// SetActiveDirectoryId gets a reference to the given string and assigns it to the ActiveDirectoryId field.
func (o *UpdateAzureRoleRequest) SetActiveDirectoryId(v string) {
	o.ActiveDirectoryId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UpdateAzureRoleRequest) GetSecret() AzureSecret {
	if o == nil || IsNil(o.Secret) {
		var ret AzureSecret
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAzureRoleRequest) GetSecretOk() (*AzureSecret, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UpdateAzureRoleRequest) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given AzureSecret and assigns it to the Secret field.
func (o *UpdateAzureRoleRequest) SetSecret(v AzureSecret) {
	o.Secret = &v
}

func (o UpdateAzureRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAzureRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.ActiveDirectoryId) {
		toSerialize["activeDirectoryId"] = o.ActiveDirectoryId
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableUpdateAzureRoleRequest struct {
	value *UpdateAzureRoleRequest
	isSet bool
}

func (v NullableUpdateAzureRoleRequest) Get() *UpdateAzureRoleRequest {
	return v.value
}

func (v *NullableUpdateAzureRoleRequest) Set(val *UpdateAzureRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAzureRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAzureRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAzureRoleRequest(val *UpdateAzureRoleRequest) *NullableUpdateAzureRoleRequest {
	return &NullableUpdateAzureRoleRequest{value: val, isSet: true}
}

func (v NullableUpdateAzureRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAzureRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
