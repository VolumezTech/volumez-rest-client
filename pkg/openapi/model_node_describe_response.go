/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeDescribeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDescribeResponse{}

// NodeDescribeResponse struct for NodeDescribeResponse
type NodeDescribeResponse struct {
	// Map of volume IDs to volume objects
	VolumesMap *map[string]Volume `json:"volumesMap,omitempty"`
}

// NewNodeDescribeResponse instantiates a new NodeDescribeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDescribeResponse() *NodeDescribeResponse {
	this := NodeDescribeResponse{}
	return &this
}

// NewNodeDescribeResponseWithDefaults instantiates a new NodeDescribeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDescribeResponseWithDefaults() *NodeDescribeResponse {
	this := NodeDescribeResponse{}
	return &this
}

// GetVolumesMap returns the VolumesMap field value if set, zero value otherwise.
func (o *NodeDescribeResponse) GetVolumesMap() map[string]Volume {
	if o == nil || IsNil(o.VolumesMap) {
		var ret map[string]Volume
		return ret
	}
	return *o.VolumesMap
}

// GetVolumesMapOk returns a tuple with the VolumesMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDescribeResponse) GetVolumesMapOk() (*map[string]Volume, bool) {
	if o == nil || IsNil(o.VolumesMap) {
		return nil, false
	}
	return o.VolumesMap, true
}

// HasVolumesMap returns a boolean if a field has been set.
func (o *NodeDescribeResponse) HasVolumesMap() bool {
	if o != nil && !IsNil(o.VolumesMap) {
		return true
	}

	return false
}

// SetVolumesMap gets a reference to the given map[string]Volume and assigns it to the VolumesMap field.
func (o *NodeDescribeResponse) SetVolumesMap(v map[string]Volume) {
	o.VolumesMap = &v
}

func (o NodeDescribeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDescribeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VolumesMap) {
		toSerialize["volumesMap"] = o.VolumesMap
	}
	return toSerialize, nil
}

type NullableNodeDescribeResponse struct {
	value *NodeDescribeResponse
	isSet bool
}

func (v NullableNodeDescribeResponse) Get() *NodeDescribeResponse {
	return v.value
}

func (v *NullableNodeDescribeResponse) Set(val *NodeDescribeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDescribeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDescribeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDescribeResponse(val *NodeDescribeResponse) *NullableNodeDescribeResponse {
	return &NullableNodeDescribeResponse{value: val, isSet: true}
}

func (v NullableNodeDescribeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDescribeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
