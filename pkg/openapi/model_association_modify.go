/*
Volumez API

Volumez orchestrator API

API version: 1.0.0 - f3a04f74
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AssociationModify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationModify{}

// AssociationModify struct for AssociationModify
type AssociationModify struct {
	Name     *string `json:"name,omitempty"`
	Snapshot *string `json:"snapshot,omitempty"`
	Selector *string `json:"selector,omitempty"`
}

// NewAssociationModify instantiates a new AssociationModify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationModify() *AssociationModify {
	this := AssociationModify{}
	return &this
}

// NewAssociationModifyWithDefaults instantiates a new AssociationModify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationModifyWithDefaults() *AssociationModify {
	this := AssociationModify{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssociationModify) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationModify) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssociationModify) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssociationModify) SetName(v string) {
	o.Name = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *AssociationModify) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationModify) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *AssociationModify) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *AssociationModify) SetSnapshot(v string) {
	o.Snapshot = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AssociationModify) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssociationModify) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AssociationModify) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *AssociationModify) SetSelector(v string) {
	o.Selector = &v
}

func (o AssociationModify) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationModify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableAssociationModify struct {
	value *AssociationModify
	isSet bool
}

func (v NullableAssociationModify) Get() *AssociationModify {
	return v.value
}

func (v *NullableAssociationModify) Set(val *AssociationModify) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationModify) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationModify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationModify(val *AssociationModify) *NullableAssociationModify {
	return &NullableAssociationModify{value: val, isSet: true}
}

func (v NullableAssociationModify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationModify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
