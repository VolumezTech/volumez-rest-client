/*
GitHub

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package volumezopenapiclient

import (
	"context"
	"testing"

	openapiclient "bitbucket.org/volumez/volumez-openapi-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_volumezopenapiclient_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService AddUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AddUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AddUserOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AddUserOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertAcknowledge", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var alert string

		resp, httpRes, err := apiClient.DefaultAPI.AlertAcknowledge(context.Background(), alert).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsAlertAcknowledgeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AlertsAlertAcknowledgeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AlertsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AlertsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApproveChangePassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApproveChangePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AssociationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var association string

		resp, httpRes, err := apiClient.DefaultAPI.AssociationDelete(context.Background(), association).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var association string

		resp, httpRes, err := apiClient.DefaultAPI.AssociationModify(context.Background(), association).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationsAssociationOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var association string

		httpRes, err := apiClient.DefaultAPI.AssociationsAssociationOptions(context.Background(), association).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AssociationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AssociationsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AssociationsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentCreate(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string
		var node string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentDelete(context.Background(), volume, snapshot, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string
		var node string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentGet(context.Background(), volume, snapshot, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string
		var node string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentModify(context.Background(), volume, snapshot, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentsList(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentsListAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentsListAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentsListForVolume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.AttachmentsListForVolume(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AttachmentsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AttachmentsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AutoProvisionVolumes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AutoProvisionVolumes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AutoprovisionvolumesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AutoprovisionvolumesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AzuremarketplaceSubscriptionOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.AzuremarketplaceSubscriptionOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BatchVolumesPlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.BatchVolumesPlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CapacityGroupGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CapacityGroupGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CapacitygroupsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.CapacitygroupsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ChangePasswordLoggedIn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ChangePasswordLoggedIn(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ChartsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.ChartsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ChartsProxyOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var proxy string

		httpRes, err := apiClient.DefaultAPI.ChartsProxyOptions(context.Background(), proxy).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivitiesConnectivityOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConnectivitiesConnectivityOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivitiesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ConnectivitiesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivitiesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.ConnectivitiesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivityCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ConnectivityCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivityDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var connectivity string

		resp, httpRes, err := apiClient.DefaultAPI.ConnectivityDelete(context.Background(), connectivity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivityGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var connectivity string

		resp, httpRes, err := apiClient.DefaultAPI.ConnectivityGet(context.Background(), connectivity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConnectivityModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var connectivity string

		resp, httpRes, err := apiClient.DefaultAPI.ConnectivityModify(context.Background(), connectivity).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConsistencyGroupGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var snapshotGroupName string

		resp, httpRes, err := apiClient.DefaultAPI.ConsistencyGroupGet(context.Background(), snapshotGroupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ConsistencyGroupSnapshotCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ConsistencyGroupSnapshotCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateInfraPlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateInfraPlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreatePublicInfraPlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreatePublicInfraPlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CreateRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteAzureSSOMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.DeleteAzureSSOMapping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudProviderAccountId string

		httpRes, err := apiClient.DefaultAPI.DeleteRole(context.Background(), cloudProviderAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteTenantHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenantHost string
		var tenantID string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteTenantHost(context.Background(), tenantHost, tenantID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DisableUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var email string

		resp, httpRes, err := apiClient.DefaultAPI.DisableUser(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DisableUserEmailOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.DisableUserEmailOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService EnableUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var email string

		resp, httpRes, err := apiClient.DefaultAPI.EnableUser(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService EnableUserEmailOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.EnableUserEmailOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ExportCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var export string

		resp, httpRes, err := apiClient.DefaultAPI.ExportDelete(context.Background(), export).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var export string

		resp, httpRes, err := apiClient.DefaultAPI.ExportModify(context.Background(), export).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportsExportOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.ExportsExportOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ExportsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExportsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.ExportsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAllRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAllRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAzureSSOMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAzureSSOMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetFeaturesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetFeaturesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetMachineInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetMachineInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetSubscription(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantAccessToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantAccessToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantHost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantHost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantIDFromTenantToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantIDFromTenantToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantRefreshToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantRefreshToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenantUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenantUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetVMMetadataByRegion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudProviderAccountId string
		var region string
		var nodeId string

		resp, httpRes, err := apiClient.DefaultAPI.GetVMMetadataByRegion(context.Background(), cloudProviderAccountId, region, nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetVMVPCs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudProviderAccountId string

		resp, httpRes, err := apiClient.DefaultAPI.GetVMVPCs(context.Background(), cloudProviderAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetVMVPCsByRegion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudProviderAccountId string
		var region string

		resp, httpRes, err := apiClient.DefaultAPI.GetVMVPCsByRegion(context.Background(), cloudProviderAccountId, region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetVMZones", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetVMZones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService HandleSSOCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userPoolID string
		var applicationClientId string

		httpRes, err := apiClient.DefaultAPI.HandleSSOCallback(context.Background(), userPoolID, applicationClientId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InfraPlannerCreateInfraPlanOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.InfraPlannerCreateInfraPlanOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InfraPlannerCreateInfraPlanPublicOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.InfraPlannerCreateInfraPlanPublicOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InfraPlannerProviderPricingInfoOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.InfraPlannerProviderPricingInfoOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InviteUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var email string

		resp, httpRes, err := apiClient.DefaultAPI.InviteUser(context.Background(), email).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService InviteUserEmailOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.InviteUserEmailOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var job string

		resp, httpRes, err := apiClient.DefaultAPI.JobDelete(context.Background(), job).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var job int32

		resp, httpRes, err := apiClient.DefaultAPI.JobGet(context.Background(), job).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobResumeSuspend", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var job int32
		var state int32

		resp, httpRes, err := apiClient.DefaultAPI.JobResumeSuspend(context.Background(), job, state).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobsJobOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.JobsJobOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobsJobResumeSuspendStateOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.JobsJobResumeSuspendStateOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.JobsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService JobsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.JobsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogTenantidLogfileGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var logfile string
		var tenantid string

		httpRes, err := apiClient.DefaultAPI.LogTenantidLogfileGet(context.Background(), logfile, tenantid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LogTenantidLogfileOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var logfile string
		var tenantid string

		httpRes, err := apiClient.DefaultAPI.LogTenantidLogfileOptions(context.Background(), logfile, tenantid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaAssign", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaAssign(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaDelete(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaDiagnose", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string
		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.MediaDiagnose(context.Background(), media, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaDrain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaDrain(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaGet(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.MediaList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaAssignOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaMediaAssignOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaDrainOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaMediaDrainOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		httpRes, err := apiClient.DefaultAPI.MediaMediaOptions(context.Background(), media).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaProfileOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaMediaProfileOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaTenantDiagnoseOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaMediaTenantDiagnoseOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaMediaUnassignOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaMediaUnassignOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaModify(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.MediaOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaProfileModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaProfileModify(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MediaUnassign", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.MediaUnassign(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ModifyTenantSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ModifyTenantSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworkCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.NetworkCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworkDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var network string

		resp, httpRes, err := apiClient.DefaultAPI.NetworkDelete(context.Background(), network).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworkGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var network string

		resp, httpRes, err := apiClient.DefaultAPI.NetworkGet(context.Background(), network).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworkModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var network string

		resp, httpRes, err := apiClient.DefaultAPI.NetworkModify(context.Background(), network).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworksList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.NetworksList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworksNetworkOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NetworksNetworkOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NetworksOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NetworksOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeCollectLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string
		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.NodeCollectLogs(context.Background(), node, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeDelete(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeDescribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeDescribe(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeDrain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeDrain(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeGet(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeRepair", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string
		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.NodeRepair(context.Background(), node, tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeSetTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeSetTags(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeUpgrade(context.Background(), node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodeUpgradeForSupport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenant string
		var node string

		resp, httpRes, err := apiClient.DefaultAPI.NodeUpgradeForSupport(context.Background(), tenant, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.NodesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesLogsNodeTenantOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesLogsNodeTenantOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesNodeDescribeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesNodeDescribeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesNodeDrainOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesNodeDrainOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesNodeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesNodeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesRepairNodeTenantOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesRepairNodeTenantOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesTagsNodeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesTagsNodeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUpgradeNodeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesUpgradeNodeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUpgradeNodeTenantTenantOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesUpgradeNodeTenantTenantOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PoliciesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PoliciesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PoliciesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.PoliciesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PoliciesPolicyOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.PoliciesPolicyOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PoliciesPolicySizeSizeZoneZoneOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.PoliciesPolicySizeSizeZoneZoneOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PoliciesPolicyVolumesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.PoliciesPolicyVolumesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PolicyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policy string

		resp, httpRes, err := apiClient.DefaultAPI.PolicyDelete(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policy string

		resp, httpRes, err := apiClient.DefaultAPI.PolicyGet(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyGetVolumes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policy string

		resp, httpRes, err := apiClient.DefaultAPI.PolicyGetVolumes(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policy string

		resp, httpRes, err := apiClient.DefaultAPI.PolicyModify(context.Background(), policy).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PolicyPlan", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var policy string
		var size int32
		var zone string

		resp, httpRes, err := apiClient.DefaultAPI.PolicyPlan(context.Background(), policy, size, zone).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProviderPricingInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ProviderPricingInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutAzureSSOMapping", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PutAzureSSOMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RefreshTenantAPIAccessCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RefreshTenantAPIAccessCredentials(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RequestChangePassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RequestChangePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ResetTenantSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ResetTenantSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SignIn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SignIn(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SignOut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SignOut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SignUp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SignUp(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SigninOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SigninOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SignoutOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SignoutOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SignupOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SignupOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotCreate(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotDelete(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotGet(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotModify(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotRollback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string
		var snapshot string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotRollback(context.Background(), volume, snapshot).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotsList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotsList(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotsListAll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SnapshotsListAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SnapshotsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SsoAzureMappingOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SsoAzureMappingOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SsoCallbackUserPoolIDApplicationClientIdOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SsoCallbackUserPoolIDApplicationClientIdOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemFeaturesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SystemFeaturesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SystemMachineinfoOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.SystemMachineinfoOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantApiaccessCredentialsRefreshOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantApiaccessCredentialsRefreshOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesCloudProviderAccountIdRoleOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesCloudProviderAccountIdRoleOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesCloudProviderAccountIdVmRegionMetadataNodeIdOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesCloudProviderAccountIdVmRegionMetadataNodeIdOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesCloudProviderAccountIdVmRegionVpcsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesCloudProviderAccountIdVmRegionVpcsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesCloudProviderAccountIdVmVpcsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesCloudProviderAccountIdVmVpcsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesRoleOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesRoleOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantCloudResourcesVmZonesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantCloudResourcesVmZonesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantHostAccessCredentials", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.TenantHostAccessCredentials(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantRefreshtokenOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantRefreshtokenOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantSettingsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantSettingsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantSettingsResetOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantSettingsResetOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantTenantIDTenanthostsTenantHostOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantTenantIDTenanthostsTenantHostOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantTenanthostCredentialsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantTenanthostCredentialsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantTenanthostOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantTenanthostOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantTenantidOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantTenantidOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantTokenOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantTokenOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserChangepasswordOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantUserChangepasswordOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserChangepasswordloggedinOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantUserChangepasswordloggedinOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserConfirmationOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantUserConfirmationOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.TenantUserCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantUserOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUserRequestchangepasswordOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.TenantUserRequestchangepasswordOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TenantUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.DefaultAPI.TenantUsers(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cloudProviderAccountId string

		httpRes, err := apiClient.DefaultAPI.UpdateRole(context.Background(), cloudProviderAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UserConfirm", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UserConfirm(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UsersTenantIdOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.UsersTenantIdOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VersionGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.VersionGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VersionOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VersionOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VirtualMediaCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.VirtualMediaCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VirtualMediaDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		resp, httpRes, err := apiClient.DefaultAPI.VirtualMediaDelete(context.Background(), media).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VirtualMediaList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.VirtualMediaList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VirtualmediaMediaOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var media string

		httpRes, err := apiClient.DefaultAPI.VirtualmediaMediaOptions(context.Background(), media).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VirtualmediaOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VirtualmediaOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.VolumeCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.VolumeDelete(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeDescribe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.VolumeDescribe(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.VolumeGet(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeModify", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.VolumeModify(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumeRecoverInitiate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		resp, httpRes, err := apiClient.DefaultAPI.VolumeRecoverInitiate(context.Background(), volume).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.VolumesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesPlanOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesPlanOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesSnapshotOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesSnapshotOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesSnapshotSnapshotGroupNameOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var snapshotGroupName string

		httpRes, err := apiClient.DefaultAPI.VolumesSnapshotSnapshotGroupNameOptions(context.Background(), snapshotGroupName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeAttachmentsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeAttachmentsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeDescribeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeDescribeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volume string

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeOptions(context.Background(), volume).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeRecoverOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeRecoverOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeSnapshotsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeSnapshotsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeSnapshotsSnapshotAttachmentsNodeOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeSnapshotsSnapshotAttachmentsNodeOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeSnapshotsSnapshotAttachmentsOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeSnapshotsSnapshotAttachmentsOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeSnapshotsSnapshotOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeSnapshotsSnapshotOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService VolumesVolumeSnapshotsSnapshotRollbackOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DefaultAPI.VolumesVolumeSnapshotsSnapshotRollbackOptions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
