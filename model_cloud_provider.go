/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CloudProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudProvider{}

// CloudProvider struct for CloudProvider
type CloudProvider struct {
	Type      CloudProviderType `json:"type"`
	AccountID string            `json:"accountID"`
}

type _CloudProvider CloudProvider

// NewCloudProvider instantiates a new CloudProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProvider(type_ CloudProviderType, accountID string) *CloudProvider {
	this := CloudProvider{}
	this.Type = type_
	this.AccountID = accountID
	return &this
}

// NewCloudProviderWithDefaults instantiates a new CloudProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderWithDefaults() *CloudProvider {
	this := CloudProvider{}
	return &this
}

// GetType returns the Type field value
func (o *CloudProvider) GetType() CloudProviderType {
	if o == nil {
		var ret CloudProviderType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudProvider) GetTypeOk() (*CloudProviderType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudProvider) SetType(v CloudProviderType) {
	o.Type = v
}

// GetAccountID returns the AccountID field value
func (o *CloudProvider) GetAccountID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountID
}

// GetAccountIDOk returns a tuple with the AccountID field value
// and a boolean to check if the value has been set.
func (o *CloudProvider) GetAccountIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountID, true
}

// SetAccountID sets field value
func (o *CloudProvider) SetAccountID(v string) {
	o.AccountID = v
}

func (o CloudProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["accountID"] = o.AccountID
	return toSerialize, nil
}

func (o *CloudProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"accountID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudProvider := _CloudProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudProvider)

	if err != nil {
		return err
	}

	*o = CloudProvider(varCloudProvider)

	return err
}

type NullableCloudProvider struct {
	value *CloudProvider
	isSet bool
}

func (v NullableCloudProvider) Get() *CloudProvider {
	return v.value
}

func (v *NullableCloudProvider) Set(val *CloudProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProvider(val *CloudProvider) *NullableCloudProvider {
	return &NullableCloudProvider{value: val, isSet: true}
}

func (v NullableCloudProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
