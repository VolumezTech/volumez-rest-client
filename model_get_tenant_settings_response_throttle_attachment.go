/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"encoding/json"
)

// checks if the GetTenantSettingsResponseThrottleAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTenantSettingsResponseThrottleAttachment{}

// GetTenantSettingsResponseThrottleAttachment struct for GetTenantSettingsResponseThrottleAttachment
type GetTenantSettingsResponseThrottleAttachment struct {
	DefaultSnapshotResources  NullableInt32 `json:"defaultSnapshotResources,omitempty"`
	MinReservedForTop         NullableInt32 `json:"minReservedForTop,omitempty"`
	EnableCagThrottling       NullableBool  `json:"enableCagThrottling,omitempty"`
	EnableRaidThrottling      NullableBool  `json:"enableRaidThrottling,omitempty"`
	EnableSliceThrottling     NullableBool  `json:"enableSliceThrottling,omitempty"`
	EnableMultipathThrottling NullableBool  `json:"enableMultipathThrottling,omitempty"`
}

// NewGetTenantSettingsResponseThrottleAttachment instantiates a new GetTenantSettingsResponseThrottleAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTenantSettingsResponseThrottleAttachment() *GetTenantSettingsResponseThrottleAttachment {
	this := GetTenantSettingsResponseThrottleAttachment{}
	return &this
}

// NewGetTenantSettingsResponseThrottleAttachmentWithDefaults instantiates a new GetTenantSettingsResponseThrottleAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTenantSettingsResponseThrottleAttachmentWithDefaults() *GetTenantSettingsResponseThrottleAttachment {
	this := GetTenantSettingsResponseThrottleAttachment{}
	return &this
}

// GetDefaultSnapshotResources returns the DefaultSnapshotResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetDefaultSnapshotResources() int32 {
	if o == nil || IsNil(o.DefaultSnapshotResources.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultSnapshotResources.Get()
}

// GetDefaultSnapshotResourcesOk returns a tuple with the DefaultSnapshotResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetDefaultSnapshotResourcesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSnapshotResources.Get(), o.DefaultSnapshotResources.IsSet()
}

// HasDefaultSnapshotResources returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasDefaultSnapshotResources() bool {
	if o != nil && o.DefaultSnapshotResources.IsSet() {
		return true
	}

	return false
}

// SetDefaultSnapshotResources gets a reference to the given NullableInt32 and assigns it to the DefaultSnapshotResources field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetDefaultSnapshotResources(v int32) {
	o.DefaultSnapshotResources.Set(&v)
}

// SetDefaultSnapshotResourcesNil sets the value for DefaultSnapshotResources to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetDefaultSnapshotResourcesNil() {
	o.DefaultSnapshotResources.Set(nil)
}

// UnsetDefaultSnapshotResources ensures that no value is present for DefaultSnapshotResources, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetDefaultSnapshotResources() {
	o.DefaultSnapshotResources.Unset()
}

// GetMinReservedForTop returns the MinReservedForTop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetMinReservedForTop() int32 {
	if o == nil || IsNil(o.MinReservedForTop.Get()) {
		var ret int32
		return ret
	}
	return *o.MinReservedForTop.Get()
}

// GetMinReservedForTopOk returns a tuple with the MinReservedForTop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetMinReservedForTopOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinReservedForTop.Get(), o.MinReservedForTop.IsSet()
}

// HasMinReservedForTop returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasMinReservedForTop() bool {
	if o != nil && o.MinReservedForTop.IsSet() {
		return true
	}

	return false
}

// SetMinReservedForTop gets a reference to the given NullableInt32 and assigns it to the MinReservedForTop field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetMinReservedForTop(v int32) {
	o.MinReservedForTop.Set(&v)
}

// SetMinReservedForTopNil sets the value for MinReservedForTop to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetMinReservedForTopNil() {
	o.MinReservedForTop.Set(nil)
}

// UnsetMinReservedForTop ensures that no value is present for MinReservedForTop, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetMinReservedForTop() {
	o.MinReservedForTop.Unset()
}

// GetEnableCagThrottling returns the EnableCagThrottling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableCagThrottling() bool {
	if o == nil || IsNil(o.EnableCagThrottling.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableCagThrottling.Get()
}

// GetEnableCagThrottlingOk returns a tuple with the EnableCagThrottling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableCagThrottlingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableCagThrottling.Get(), o.EnableCagThrottling.IsSet()
}

// HasEnableCagThrottling returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasEnableCagThrottling() bool {
	if o != nil && o.EnableCagThrottling.IsSet() {
		return true
	}

	return false
}

// SetEnableCagThrottling gets a reference to the given NullableBool and assigns it to the EnableCagThrottling field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableCagThrottling(v bool) {
	o.EnableCagThrottling.Set(&v)
}

// SetEnableCagThrottlingNil sets the value for EnableCagThrottling to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableCagThrottlingNil() {
	o.EnableCagThrottling.Set(nil)
}

// UnsetEnableCagThrottling ensures that no value is present for EnableCagThrottling, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetEnableCagThrottling() {
	o.EnableCagThrottling.Unset()
}

// GetEnableRaidThrottling returns the EnableRaidThrottling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableRaidThrottling() bool {
	if o == nil || IsNil(o.EnableRaidThrottling.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableRaidThrottling.Get()
}

// GetEnableRaidThrottlingOk returns a tuple with the EnableRaidThrottling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableRaidThrottlingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableRaidThrottling.Get(), o.EnableRaidThrottling.IsSet()
}

// HasEnableRaidThrottling returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasEnableRaidThrottling() bool {
	if o != nil && o.EnableRaidThrottling.IsSet() {
		return true
	}

	return false
}

// SetEnableRaidThrottling gets a reference to the given NullableBool and assigns it to the EnableRaidThrottling field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableRaidThrottling(v bool) {
	o.EnableRaidThrottling.Set(&v)
}

// SetEnableRaidThrottlingNil sets the value for EnableRaidThrottling to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableRaidThrottlingNil() {
	o.EnableRaidThrottling.Set(nil)
}

// UnsetEnableRaidThrottling ensures that no value is present for EnableRaidThrottling, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetEnableRaidThrottling() {
	o.EnableRaidThrottling.Unset()
}

// GetEnableSliceThrottling returns the EnableSliceThrottling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableSliceThrottling() bool {
	if o == nil || IsNil(o.EnableSliceThrottling.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSliceThrottling.Get()
}

// GetEnableSliceThrottlingOk returns a tuple with the EnableSliceThrottling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableSliceThrottlingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSliceThrottling.Get(), o.EnableSliceThrottling.IsSet()
}

// HasEnableSliceThrottling returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasEnableSliceThrottling() bool {
	if o != nil && o.EnableSliceThrottling.IsSet() {
		return true
	}

	return false
}

// SetEnableSliceThrottling gets a reference to the given NullableBool and assigns it to the EnableSliceThrottling field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableSliceThrottling(v bool) {
	o.EnableSliceThrottling.Set(&v)
}

// SetEnableSliceThrottlingNil sets the value for EnableSliceThrottling to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableSliceThrottlingNil() {
	o.EnableSliceThrottling.Set(nil)
}

// UnsetEnableSliceThrottling ensures that no value is present for EnableSliceThrottling, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetEnableSliceThrottling() {
	o.EnableSliceThrottling.Unset()
}

// GetEnableMultipathThrottling returns the EnableMultipathThrottling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableMultipathThrottling() bool {
	if o == nil || IsNil(o.EnableMultipathThrottling.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableMultipathThrottling.Get()
}

// GetEnableMultipathThrottlingOk returns a tuple with the EnableMultipathThrottling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTenantSettingsResponseThrottleAttachment) GetEnableMultipathThrottlingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableMultipathThrottling.Get(), o.EnableMultipathThrottling.IsSet()
}

// HasEnableMultipathThrottling returns a boolean if a field has been set.
func (o *GetTenantSettingsResponseThrottleAttachment) HasEnableMultipathThrottling() bool {
	if o != nil && o.EnableMultipathThrottling.IsSet() {
		return true
	}

	return false
}

// SetEnableMultipathThrottling gets a reference to the given NullableBool and assigns it to the EnableMultipathThrottling field.
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableMultipathThrottling(v bool) {
	o.EnableMultipathThrottling.Set(&v)
}

// SetEnableMultipathThrottlingNil sets the value for EnableMultipathThrottling to be an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) SetEnableMultipathThrottlingNil() {
	o.EnableMultipathThrottling.Set(nil)
}

// UnsetEnableMultipathThrottling ensures that no value is present for EnableMultipathThrottling, not even an explicit nil
func (o *GetTenantSettingsResponseThrottleAttachment) UnsetEnableMultipathThrottling() {
	o.EnableMultipathThrottling.Unset()
}

func (o GetTenantSettingsResponseThrottleAttachment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTenantSettingsResponseThrottleAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultSnapshotResources.IsSet() {
		toSerialize["defaultSnapshotResources"] = o.DefaultSnapshotResources.Get()
	}
	if o.MinReservedForTop.IsSet() {
		toSerialize["minReservedForTop"] = o.MinReservedForTop.Get()
	}
	if o.EnableCagThrottling.IsSet() {
		toSerialize["enableCagThrottling"] = o.EnableCagThrottling.Get()
	}
	if o.EnableRaidThrottling.IsSet() {
		toSerialize["enableRaidThrottling"] = o.EnableRaidThrottling.Get()
	}
	if o.EnableSliceThrottling.IsSet() {
		toSerialize["enableSliceThrottling"] = o.EnableSliceThrottling.Get()
	}
	if o.EnableMultipathThrottling.IsSet() {
		toSerialize["enableMultipathThrottling"] = o.EnableMultipathThrottling.Get()
	}
	return toSerialize, nil
}

type NullableGetTenantSettingsResponseThrottleAttachment struct {
	value *GetTenantSettingsResponseThrottleAttachment
	isSet bool
}

func (v NullableGetTenantSettingsResponseThrottleAttachment) Get() *GetTenantSettingsResponseThrottleAttachment {
	return v.value
}

func (v *NullableGetTenantSettingsResponseThrottleAttachment) Set(val *GetTenantSettingsResponseThrottleAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTenantSettingsResponseThrottleAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTenantSettingsResponseThrottleAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTenantSettingsResponseThrottleAttachment(val *GetTenantSettingsResponseThrottleAttachment) *NullableGetTenantSettingsResponseThrottleAttachment {
	return &NullableGetTenantSettingsResponseThrottleAttachment{value: val, isSet: true}
}

func (v NullableGetTenantSettingsResponseThrottleAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTenantSettingsResponseThrottleAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
