/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"encoding/json"
)

// checks if the RefreshTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefreshTokenResponse{}

// RefreshTokenResponse struct for RefreshTokenResponse
type RefreshTokenResponse struct {
	AccessToken           *string `json:"AccessToken,omitempty"`
	IdToken               *string `json:"IdToken,omitempty"`
	AccessTokenExpiration *string `json:"AccessTokenExpiration,omitempty"`
	IdTokenExpiration     *string `json:"IdTokenExpiration,omitempty"`
	TokenType             *string `json:"TokenType,omitempty"`
}

// NewRefreshTokenResponse instantiates a new RefreshTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshTokenResponse() *RefreshTokenResponse {
	this := RefreshTokenResponse{}
	return &this
}

// NewRefreshTokenResponseWithDefaults instantiates a new RefreshTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshTokenResponseWithDefaults() *RefreshTokenResponse {
	this := RefreshTokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *RefreshTokenResponse) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetIdToken returns the IdToken field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetIdToken() string {
	if o == nil || IsNil(o.IdToken) {
		var ret string
		return ret
	}
	return *o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetIdTokenOk() (*string, bool) {
	if o == nil || IsNil(o.IdToken) {
		return nil, false
	}
	return o.IdToken, true
}

// HasIdToken returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasIdToken() bool {
	if o != nil && !IsNil(o.IdToken) {
		return true
	}

	return false
}

// SetIdToken gets a reference to the given string and assigns it to the IdToken field.
func (o *RefreshTokenResponse) SetIdToken(v string) {
	o.IdToken = &v
}

// GetAccessTokenExpiration returns the AccessTokenExpiration field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetAccessTokenExpiration() string {
	if o == nil || IsNil(o.AccessTokenExpiration) {
		var ret string
		return ret
	}
	return *o.AccessTokenExpiration
}

// GetAccessTokenExpirationOk returns a tuple with the AccessTokenExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetAccessTokenExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.AccessTokenExpiration) {
		return nil, false
	}
	return o.AccessTokenExpiration, true
}

// HasAccessTokenExpiration returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasAccessTokenExpiration() bool {
	if o != nil && !IsNil(o.AccessTokenExpiration) {
		return true
	}

	return false
}

// SetAccessTokenExpiration gets a reference to the given string and assigns it to the AccessTokenExpiration field.
func (o *RefreshTokenResponse) SetAccessTokenExpiration(v string) {
	o.AccessTokenExpiration = &v
}

// GetIdTokenExpiration returns the IdTokenExpiration field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetIdTokenExpiration() string {
	if o == nil || IsNil(o.IdTokenExpiration) {
		var ret string
		return ret
	}
	return *o.IdTokenExpiration
}

// GetIdTokenExpirationOk returns a tuple with the IdTokenExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetIdTokenExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.IdTokenExpiration) {
		return nil, false
	}
	return o.IdTokenExpiration, true
}

// HasIdTokenExpiration returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasIdTokenExpiration() bool {
	if o != nil && !IsNil(o.IdTokenExpiration) {
		return true
	}

	return false
}

// SetIdTokenExpiration gets a reference to the given string and assigns it to the IdTokenExpiration field.
func (o *RefreshTokenResponse) SetIdTokenExpiration(v string) {
	o.IdTokenExpiration = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise.
func (o *RefreshTokenResponse) GetTokenType() string {
	if o == nil || IsNil(o.TokenType) {
		var ret string
		return ret
	}
	return *o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *RefreshTokenResponse) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given string and assigns it to the TokenType field.
func (o *RefreshTokenResponse) SetTokenType(v string) {
	o.TokenType = &v
}

func (o RefreshTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefreshTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["AccessToken"] = o.AccessToken
	}
	if !IsNil(o.IdToken) {
		toSerialize["IdToken"] = o.IdToken
	}
	if !IsNil(o.AccessTokenExpiration) {
		toSerialize["AccessTokenExpiration"] = o.AccessTokenExpiration
	}
	if !IsNil(o.IdTokenExpiration) {
		toSerialize["IdTokenExpiration"] = o.IdTokenExpiration
	}
	if !IsNil(o.TokenType) {
		toSerialize["TokenType"] = o.TokenType
	}
	return toSerialize, nil
}

type NullableRefreshTokenResponse struct {
	value *RefreshTokenResponse
	isSet bool
}

func (v NullableRefreshTokenResponse) Get() *RefreshTokenResponse {
	return v.value
}

func (v *NullableRefreshTokenResponse) Set(val *RefreshTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshTokenResponse(val *RefreshTokenResponse) *NullableRefreshTokenResponse {
	return &NullableRefreshTokenResponse{value: val, isSet: true}
}

func (v NullableRefreshTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
