/*
GitHub

Volumez orchestrator API

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package volumezopenapiclient

import (
	"encoding/json"
)

// checks if the ConnectivityCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectivityCheck{}

// ConnectivityCheck struct for ConnectivityCheck
type ConnectivityCheck struct {
	InitiatorsSelector *string `json:"initiators_selector,omitempty"`
	TargetsSelector    *string `json:"targets_selector,omitempty"`
}

// NewConnectivityCheck instantiates a new ConnectivityCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectivityCheck() *ConnectivityCheck {
	this := ConnectivityCheck{}
	return &this
}

// NewConnectivityCheckWithDefaults instantiates a new ConnectivityCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectivityCheckWithDefaults() *ConnectivityCheck {
	this := ConnectivityCheck{}
	return &this
}

// GetInitiatorsSelector returns the InitiatorsSelector field value if set, zero value otherwise.
func (o *ConnectivityCheck) GetInitiatorsSelector() string {
	if o == nil || IsNil(o.InitiatorsSelector) {
		var ret string
		return ret
	}
	return *o.InitiatorsSelector
}

// GetInitiatorsSelectorOk returns a tuple with the InitiatorsSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectivityCheck) GetInitiatorsSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorsSelector) {
		return nil, false
	}
	return o.InitiatorsSelector, true
}

// HasInitiatorsSelector returns a boolean if a field has been set.
func (o *ConnectivityCheck) HasInitiatorsSelector() bool {
	if o != nil && !IsNil(o.InitiatorsSelector) {
		return true
	}

	return false
}

// SetInitiatorsSelector gets a reference to the given string and assigns it to the InitiatorsSelector field.
func (o *ConnectivityCheck) SetInitiatorsSelector(v string) {
	o.InitiatorsSelector = &v
}

// GetTargetsSelector returns the TargetsSelector field value if set, zero value otherwise.
func (o *ConnectivityCheck) GetTargetsSelector() string {
	if o == nil || IsNil(o.TargetsSelector) {
		var ret string
		return ret
	}
	return *o.TargetsSelector
}

// GetTargetsSelectorOk returns a tuple with the TargetsSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectivityCheck) GetTargetsSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.TargetsSelector) {
		return nil, false
	}
	return o.TargetsSelector, true
}

// HasTargetsSelector returns a boolean if a field has been set.
func (o *ConnectivityCheck) HasTargetsSelector() bool {
	if o != nil && !IsNil(o.TargetsSelector) {
		return true
	}

	return false
}

// SetTargetsSelector gets a reference to the given string and assigns it to the TargetsSelector field.
func (o *ConnectivityCheck) SetTargetsSelector(v string) {
	o.TargetsSelector = &v
}

func (o ConnectivityCheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectivityCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InitiatorsSelector) {
		toSerialize["initiators_selector"] = o.InitiatorsSelector
	}
	if !IsNil(o.TargetsSelector) {
		toSerialize["targets_selector"] = o.TargetsSelector
	}
	return toSerialize, nil
}

type NullableConnectivityCheck struct {
	value *ConnectivityCheck
	isSet bool
}

func (v NullableConnectivityCheck) Get() *ConnectivityCheck {
	return v.value
}

func (v *NullableConnectivityCheck) Set(val *ConnectivityCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivityCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivityCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivityCheck(val *ConnectivityCheck) *NullableConnectivityCheck {
	return &NullableConnectivityCheck{value: val, isSet: true}
}

func (v NullableConnectivityCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivityCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
